<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cookie,document.cookie</title>
    <link href="/2021/03/28/Cookie,document.cookie/"/>
    <url>/2021/03/28/Cookie,document.cookie/</url>
    
    <content type="html"><![CDATA[<h1 id="Cookie-document-cookie"><a href="#Cookie-document-cookie" class="headerlink" title="Cookie,document.cookie"></a>Cookie,document.cookie</h1><ol><li>Cookie : 直接<strong>存储在浏览器</strong>中的一小串数据。是 <strong>HTTP 协议的一部分</strong>，由 RFC 6265 规范定义。</li><li>Cookie 通常是<strong>由 Web 服务器使用响应 <code>Set-Cookie HTTP-header</code> 设置</strong>的。然后<strong>浏览器</strong>使用 <code>Cookie HTTP-header</code> 将它们自动添加到（几乎）每个对相同域的请求中。(服务器设置，并由浏览器添加至请求)</li></ol><h2 id="Cookie-作用：身份验证"><a href="#Cookie-作用：身份验证" class="headerlink" title="Cookie 作用：身份验证"></a>Cookie 作用：身份验证</h2><ol><li>用户登录后，服务器<strong>在响应中</strong>使用 Set-Cookie HTTP-header 来设置具有唯一“会话标识符（session identifier）”的 cookie。</li><li>下次如果请求是由<strong>相同域</strong>发起的，浏览器会使用 Cookie HTTP-header 通过网络发送 cookie。</li><li>服务器接收时识别cookie就知道是谁发起了请求。</li></ol><p><strong>就好比公司打卡，第一天上班HR根本不认识你，此时会给你发工作证来标明你唯一的身份，之后打卡，HR只要识别你工作证就能知道是你打卡而不是别人打卡。</strong></p><h2 id="document-cookie"><a href="#document-cookie" class="headerlink" title="document.cookie"></a>document.cookie</h2><p>cookie 是服务器在响应阶段设置的，在浏览器端可以通过 <code>document.cookie</code> 访问</p><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p><code>document.cookie</code> 不是对象属性，而是一个访问器(getter/setter)，因此可以读取和写入。</p><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p><code>console.log(document.cookie)</code> 隐式调用了 get 方法，并返回所有的cookie。<br><code>document.cookie</code> 的值由 <code>name=value</code> 对组成，以<code>;</code>分隔。每个都是独立的 cookie。**key 和 value 都不需要 ‘’ **</p><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p><code>document.cookie = &#39;user=John&#39;</code> 调用 set 方法写入一个cookie<br>此处只是插入了一个cookie，而不是覆盖了所有cookie，这就证明了document.cookie是访问器而不是对象属性。<br>cookie 的 name 和 value 可以是任何字符，为了保证格式有效，通常需要用内建的函数(<strong><code>encodeURIComponent</code></strong>)进行转义。</p><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery">// 特殊字符（空格），需要编码<br><span class="hljs-keyword">let</span><span class="hljs-built_in"> name</span> = <span class="hljs-string">&quot;my name&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-keyword">value</span> = <span class="hljs-string">&quot;John Smith&quot;</span><br><br>// 将 cookie 编码为 my<span class="hljs-meta">%20name</span>=John<span class="hljs-meta">%20Smith</span><br><span class="hljs-type">document</span>.cookie = encodeURIComponent<span class="hljs-built_in">(name</span>) + <span class="hljs-string">&#x27;=&#x27;</span> + encodeURIComponent(<span class="hljs-keyword">value</span>);<br><br>alert<span class="hljs-built_in">(document</span>.cookie); // ...; my<span class="hljs-meta">%20name</span>=John<span class="hljs-meta">%20Smith</span><br></code></pre></div></td></tr></table></figure><h2 id="Cookie-的设置选项"><a href="#Cookie-的设置选项" class="headerlink" title="Cookie 的设置选项"></a>Cookie 的设置选项</h2><p>在写入 Cookie 时，可以设置相应的选项：选项写在 key=value 之后，并以 <code>;</code> 分隔。<br><code>document.cookie = &quot;user=John; path=/; expires=Tue, 19 Jan 2038 03:14:07 GMT&quot;</code></p><ol><li><code>path=/mypath</code>：url 路径前缀，该路径下的页面可以访问该 cookie。必须是绝对路径。默认为当前路径。<br>如果一个 cookie 带有 <code>path=/admin</code> 设置，那么该 cookie 在 <code>/admin</code> 和 <code>/admin/something</code> 下都是可见的，但是在 <code>/home</code> 或 <code>/adminpage</code> 下不可见。<strong>即设置路径及其子路径可访问cookie</strong><br>通常，我们应该将 path 设置为根目录：path=/，以使 cookie 对此网站的所有页面可见。</li><li><code>domain=site.com</code>：设置可访问 cookie 的根域，其使得该域下所有子域均可访问 cookie。<br>默认情况下，cookie 只有在当前域下才能被访问到。如果 cookie 设置在 site.com 下，我们在 other.com 下就无法获取它，甚至在 site.com 子域下也无法访问。显示的 domain 设置可以解决上述问题。</li><li><code>expires=Tue, 19 Jan 2038 03:14:07 GMT</code>：cookie 的到期日期，那时浏览器会自动删除它。<br>日期必须完全采用 GMT 时区的这种格式。可以使用 <code>date.toUTCString</code> 来获取它。</li><li><code>max-age=3600</code>：expires 的替代选项，具指明 cookie 的过期时间距离当前时间的秒数。</li><li><code>secure</code>：设置 Cookie 只能通过 HTTPS 传输<br>cookie 是基于域的，它们不区分协议。默认情况下，如果我们在 <a href="http://site.com/">http://site.com</a> 上设置了 cookie，那么该 cookie 也会出现在 <a href="https://site.com/">https://site.com</a> 上，反之亦然。使用此选项，如果一个 cookie 是通过 <a href="https://site.com/">https://site.com</a> 设置的，那么它不会在相同域的 HTTP 环境下出现</li><li><code>samesite</code>：防止 XSRF（跨网站请求伪造）攻击。<br>XSRF? 用户在某页面登陆时，会向该页面发送cookie，页面核实cookie后允许用户进行后续操作。通常发送cookie请求是用户登录时执行的，但是cookie请求可以通过脚本执行！即黑客在其他网站可以用脚本模拟用户登录，从而欺骗页面。<br><code>samesite=strict</code> 保证如果用户来自同一网站之外，那么设置了 samesite=strict 的 cookie 永远不会被发送。只有在该网站下的操作才会发送 cookie。但是这样同样会屏蔽一些用户默许的合法链接，比如通过用户自己的笔记或收藏夹访问等。<strong>解决办法：</strong>通过使用两个 cookie 来解决这个问题：一个 cookie 用于“一般识别”，另一个带有 samesite=strict 的 cookie 用于进行数据更改的操作。这样，从网站外部来的用户可以访问网站，但是支付操作等必须是从银行网站启动的，这样第二个 cookie 才能被发送。<br><code>samesite=lax</code> 宽松模式，当从外部来到网站，则禁止浏览器发送 cookie，但是增加了一个例外。如果以下两个条件均成立，则会发送 samesite=lax cookie：a. HTTP 方法是“安全的”（例如 GET 方法，而不是 POST）b. 执行顶级导航（更改浏览器地址栏中的 URL）</li><li>httpOnly：禁止任何 JavaScript 访问 cookie。我们使用 document.cookie 看不到此类 cookie，也无法对此类 cookie 进行操作。即 Cookie 操作只能在服务端进行。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LocalStorage,sessionStorage</title>
    <link href="/2021/03/28/LocalStorage,sessionStorage/"/>
    <url>/2021/03/28/LocalStorage,sessionStorage/</url>
    
    <content type="html"><![CDATA[<h1 id="LocalStorage-sessionStorage"><a href="#LocalStorage-sessionStorage" class="headerlink" title="LocalStorage,sessionStorage"></a>LocalStorage,sessionStorage</h1><h2 id="LocalStorage-sessionStorage-与-Cookie-的区别"><a href="#LocalStorage-sessionStorage-与-Cookie-的区别" class="headerlink" title="LocalStorage,sessionStorage 与 Cookie 的区别"></a>LocalStorage,sessionStorage 与 Cookie 的区别</h2><ol><li><strong>Web存储对象(LocalStorage,sessionStorage)不会随每个请求被发送到服务器。可以保存更多数据</strong>。大多数浏览器都允许保存至少 2MB 的数据（或更多），并且具有用于配置数据的设置。</li><li><strong>服务器无法通过 HTTP header 操纵存储对象</strong>。对于Web存储对象的操作一切都是在 JavaScript 中完成的。</li><li>存储对象绑定到源（域/协议/端口三者）。不同协议或子域 对应 不同的存储对象，它们之间无法访问彼此数据。</li></ol><h2 id="LocalStorage-sessionStorage-存储对象的方法和属性"><a href="#LocalStorage-sessionStorage-存储对象的方法和属性" class="headerlink" title="LocalStorage,sessionStorage 存储对象的方法和属性"></a>LocalStorage,sessionStorage 存储对象的方法和属性</h2><ol><li>setItem(key, value) —— 存储键/值对。</li><li>getItem(key) —— 按照键获取值。</li><li>removeItem(key) —— 删除键及其对应的值。</li><li>clear() —— 删除所有数据。</li><li>key(index) —— 获取该索引下的键名。</li><li>length —— 存储的内容的长度。</li></ol><h2 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ol><li>在<strong>同源(协议/域/端口均相同)**的所有标签页和窗口之间</strong>共享数据**。(url路径可以不同，即源下路径不同，也可以获取数据)</li><li><strong>数据不会过期</strong>。它在浏览器重启甚至系统重启后仍然存在。</li></ol><h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h3><ol><li>sessionStorage 的数据<strong>只存在于当前浏览器标签页</strong>。不同标签页存储数据不同。</li><li>数据在页面刷新后仍然保留，但在关闭/重新打开浏览器标签页后不会被保留。</li></ol><h2 id="存储对象遍历"><a href="#存储对象遍历" class="headerlink" title="存储对象遍历"></a>存储对象遍历</h2><p>存储对象不可迭代(<code>for..of..</code>不适用)</p><h3 id="for-let-i-0-i-lt-localStorage-length-i"><a href="#for-let-i-0-i-lt-localStorage-length-i" class="headerlink" title="for(let i=0; i&lt;localStorage.length; i++)"></a>for(let i=0; i&lt;localStorage.length; i++)</h3><p>用最普通的for循环遍历：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">localStorage</span>.length; i++</span>)</span> &#123;<br>  <span class="hljs-keyword">let</span> key = <span class="hljs-built_in">localStorage</span>.key(i);<br>  alert(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>: <span class="hljs-subst">$&#123;<span class="hljs-built_in">localStorage</span>.getItem(key)&#125;</span>`</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="for-let-key-in-localStorage"><a href="#for-let-key-in-localStorage" class="headerlink" title="for(let key in localStorage)"></a>for(let key in localStorage)</h3><p>用遍历对象键的方式：<br>缺点：遍历所有键，会输出 localStorage 或 sessionStorage 的内建字段</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">localStorage</span></span>)</span> &#123;<br>  alert(key); <span class="hljs-comment">// 显示 getItem，setItem 和其他内建的东西</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="通过-hasOwnProperty-或使用-Object-keys-过滤原型内建字段"><a href="#通过-hasOwnProperty-或使用-Object-keys-过滤原型内建字段" class="headerlink" title="通过 hasOwnProperty 或使用 Object.keys 过滤原型内建字段"></a>通过 hasOwnProperty 或使用 Object.keys 过滤原型内建字段</h4><p><strong><code>.hasOwnProperty()</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">localStorage</span></span>)</span> &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">localStorage</span>.hasOwnProperty(key)) &#123;<br>    <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 跳过像 &quot;setItem&quot;，&quot;getItem&quot; 等这样的键</span><br>  &#125;<br>  alert(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>: <span class="hljs-subst">$&#123;<span class="hljs-built_in">localStorage</span>.getItem(key)&#125;</span>`</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong><code>Object.keys()</code></strong><br>更佳的选择，不需要写额外判断条件，Object.keys()只返回属于对象的键，会忽略原型上的。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> keys = <span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">localStorage</span>);<br><span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> keys</span>)</span> &#123;<br>  alert(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>: <span class="hljs-subst">$&#123;<span class="hljs-built_in">localStorage</span>.getItem(key)&#125;</span>`</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="存储格式"><a href="#存储格式" class="headerlink" title="存储格式"></a>存储格式</h2><p>Web存储对象(localStorage,sessionStorage)的键值对都必须是字符串，其内部会进行自动转化。<br>因此，对象类型的值存储要手动通过 <code>JSON.stringify()</code> 处理，以免出错。<br>或者可以对整个存储对象进行字符串化处理。</p><h2 id="Storage-事件"><a href="#Storage-事件" class="headerlink" title="Storage 事件"></a>Storage 事件</h2><h3 id="触发条件："><a href="#触发条件：" class="headerlink" title="触发条件："></a>触发条件：</h3><p>当 localStorage 或 sessionStorage 中的数据更新后，storage 事件就会触发。<br><strong>事件会在所有可访问到存储对象的 window 对象上触发，导致当前数据改变的 window 对象除外。</strong></p><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><p><strong>其允许同源的不同窗口交换消息</strong><br>常用于监听同源下不同窗口 LocalStorage 变化，当一个窗口数据更新时，另一个窗口及时进行反应。</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-regexp">//</span> 等同于 <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;storage&#x27;</span>, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;&#125;)<br><span class="hljs-built_in">window</span>.onstorage = event =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (event.key != <span class="hljs-string">&#x27;now&#x27;</span>) <span class="hljs-keyword">return</span>;<br>  alert(event.key + <span class="hljs-string">&#x27;:&#x27;</span> + event.newValue + <span class="hljs-string">&quot; at &quot;</span> + event.url);<br>&#125;;<br><br><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;now&#x27;</span>, <span class="hljs-built_in">Date</span>.now());<br></code></pre></div></td></tr></table></figure><h3 id="事件属性："><a href="#事件属性：" class="headerlink" title="事件属性："></a>事件属性：</h3><ol><li>key —— 发生更改的数据的 key（如果调用的是 .clear() 方法，则为 null）。</li><li>oldValue —— 旧值（如果是新增数据，则为 null）。</li><li>newValue —— 新值（如果是删除数据，则为 null）。</li><li>url —— 发生数据更新的文档的 url。</li><li>storageArea —— 发生数据更新的 localStorage 或 sessionStorage 对象。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue组件通信</title>
    <link href="/2021/03/28/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <url>/2021/03/28/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue组件通信"><a href="#Vue组件通信" class="headerlink" title="Vue组件通信"></a>Vue组件通信</h1><p>参考链接：<a href="https://segmentfault.com/a/1190000022700216">组件之间相互传值的方式</a></p><h2 id="父传子-props"><a href="#父传子-props" class="headerlink" title="父传子(props)"></a>父传子(props)</h2><p>一：在父组件的子组件标签中绑定自定义属性<br>二：子组件中使用props接收<br><strong>父组件</strong></p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;user-detail :<span class="hljs-attribute">myName</span>=<span class="hljs-string">&quot;name&quot;</span> :<span class="hljs-attribute">myObject</span>=<span class="hljs-string">&quot;object&quot;</span> /&gt;<br>    <br><span class="hljs-builtin-name">export</span><span class="hljs-built_in"> default </span>&#123;<br>    components: &#123;<br>        UserDetail<br>    &#125;<br>    <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>子组件</strong></p><figure class="highlight dart"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dart"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    props: &#123;<br>      myName: &#123;<br>        type: <span class="hljs-built_in">String</span>,  <span class="hljs-comment">// 变量类型</span><br>        <span class="hljs-keyword">default</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 默认值</span><br>        requires: <span class="hljs-keyword">true</span>, <span class="hljs-comment">// 表示必填选项</span><br>      &#125;,<br>      myObject: &#123;<br>        type: <span class="hljs-built_in">Object</span>,<br>        <span class="hljs-keyword">default</span>() &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;, <span class="hljs-comment">// 对象或数组默认值需要用函数返回</span><br>      &#125;,<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>子组件接受的父组件的值分为<strong>引用类型</strong>和<strong>普通类型</strong>：<br><strong>普通类型：</strong>字符串（String）、数字（Number）、布尔值（Boolean）、空（Null）<br><strong>引用类型：</strong>数组（Array）、对象（Object）<br>vue 单向数据流，规定了组件之间的数据是单向流通的，子组件是不允许直接对父组件传来的值进行修改的。我们需要先把传过来的值重新赋值给data中的一个变量，然后再更改那个变量。<br>当子组件接收的是普通类型数据时，修改该存储变量不会更改父组件相应的值；当子组件接收的是引用类型时，在子组件中修改存储的变量后，父组件的也会修改。这是因为引用类型变量保存的是对象的地址，父组件的变量，子组件接受的变量以及子组件另存为的变量都指向同一对象地址，因此会共享数据。除非有特殊需要，否则不要轻易修改传递的对象值。</p><h2 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h2><h3 id="emit"><a href="#emit" class="headerlink" title="($emit)"></a>($emit)</h3><p>一：子组件绑定一个事件，当事件触发时，通过<code>$emit</code>向父组件发送一个事件(可携带参数传递，多个参数用对象包裹)<br>二：在父组件对应子组件上定义并绑定对应于<code>$emit</code>发送的事件(可接受携带的参数)<br><strong>子组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button @click=<span class="hljs-string">&quot;changeParentName&quot;</span>&gt;改变父组件的name&lt;/button&gt;<br>​<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    methods: &#123;<br>        <span class="hljs-comment">//子组件的事件</span><br>        changeParentName: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;handleChange&#x27;</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>) <span class="hljs-comment">// 向父组件发送handleChange事件并传参Jack</span><br>            <span class="hljs-comment">// 注：此处事件名称与父组件中绑定的事件名称要一致</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>父组件</strong></p><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">child</span> @<span class="hljs-attr">handleChange</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span></span><br>​<br>methods: &#123;<br>    changeName<span class="hljs-built_in">(name</span>) &#123;  //<span class="hljs-built_in"> name</span>形参是子组件中传入的值Jack<br>        this<span class="hljs-built_in">.name</span> =<span class="hljs-built_in"> name</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>父组件用<code>@</code>接收子组件发送的事件。父组件需要定义一个函数来接受子组件发送的事件。子组件向父组件发送事件，需要特定的条件触发(若要实现子组件变量修改后，立刻改变父组件变量，可以用watch监听子组件变量，并在watch内定义函数发送自定义事件)。</p><h3 id="callback"><a href="#callback" class="headerlink" title="(callback)"></a>(callback)</h3><p>通过“父传子”回调函数实现“子传父”的功能<br>一：在父组件中定义一个callback函数，并把 callback 函数传过去<br>二：在子组件中接收，并执行 callback 函数<br><strong>父组件</strong></p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir">&lt;child <span class="hljs-symbol">:callback=<span class="hljs-string">&quot;callback&quot;</span>&gt;&lt;/child&gt;</span><br>​<br><span class="hljs-symbol">methods:</span> &#123;<br>    <span class="hljs-symbol">callback:</span> function(name) &#123;<br>        this.name = name<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>子组件</strong></p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-params">&lt;button @click=&quot;callback(&#x27;Jack&#x27;)&quot;&gt;</span>改变父组件的name<span class="hljs-params">&lt;/button&gt;</span><br>​<br><span class="hljs-symbol">props:</span> &#123;<br><span class="hljs-symbol">    callback:</span> Function,<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h2><p>父组件可以通过<code>$refs</code>访问指定的子组件实例，从而调用组件的方法或访问数据。<br><strong>这种方式的组件通信不能跨级</strong><br><strong>使用<code>$refs</code>时要注意，此时子组件可能未完全挂在完成；因此我们一般使用<code>$refs</code>调用子组件的data和methods(在子组件created阶段就完成了)</strong><br>此外还有<code>$parent</code>,<code>$children</code>，但不建议使用。<br><strong>子组件</strong></p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span><span class="hljs-built_in"> default </span>&#123;<br>    data () &#123;<br>        return &#123;<br>            title: <span class="hljs-string">&#x27;子组件&#x27;</span><br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        sayHello () &#123;<br>            console.log(<span class="hljs-string">&#x27;Hello&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>父组件</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">child</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;childRef&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>​<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br>    created () &#123;<br><span class="javascript">      <span class="hljs-comment">// 通过 $ref 来访问子组件</span></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.childRef.title);  <span class="hljs-comment">// 子组件</span></span><br><span class="javascript">      <span class="hljs-built_in">this</span>.$refs.childRef.sayHello(); <span class="hljs-comment">// Hello</span></span><br><br><span class="javascript">      <span class="hljs-comment">// 通过 $children 来调用子组件的方法</span></span><br><span class="javascript">      <span class="hljs-built_in">this</span>.$children.sayHello(); <span class="hljs-comment">// Hello</span></span><br>    &#125;<br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="兄弟通信"><a href="#兄弟通信" class="headerlink" title="兄弟通信"></a>兄弟通信</h2><h3 id="props-和-emit-结合使用"><a href="#props-和-emit-结合使用" class="headerlink" title="props 和 $emit 结合使用"></a>props 和 $emit 结合使用</h3><p>同级子组件通过父组件作为中转站传值。一个子组件通过 <code>$emit</code> 传递参数到父组件，父组件接收传递的值，并通过 props 传递给另一个子组件。<br><strong>该方法跨级传递时过于繁琐，需要从底层一步步向上传递，到根组件后再一步步向下传递。后续介绍的空实例中转可以解决该问题</strong><br><strong>父组件</strong></p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;child-a :<span class="hljs-attribute">myName</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;<br>&lt;child-b :<span class="hljs-attribute">myName</span>=<span class="hljs-string">&quot;name&quot;</span> @<span class="hljs-attribute">changeName</span>=<span class="hljs-string">&quot;editName&quot;</span> /&gt;  <br>    <br><span class="hljs-builtin-name">export</span><span class="hljs-built_in"> default </span>&#123;<br>    data() &#123;<br>        return &#123;<br>            name: <span class="hljs-string">&#x27;John&#x27;</span><br>        &#125;<br>    &#125;,<br>    components: &#123;<br>        <span class="hljs-string">&#x27;child-a&#x27;</span>: ChildA,<br>        <span class="hljs-string">&#x27;child-b&#x27;</span>: ChildB,<br>    &#125;,<br>    methods: &#123;<br>        editName(name) &#123;<br>            this.name = name<br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>子组件</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs handlebars"><span class="xml">// child-a 组件</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>姓名：</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">newName</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">export default &#123;</span><br><span class="xml">    props: [&quot;myName&quot;],</span><br><span class="xml">    computed: &#123;</span><br><span class="xml">        newName() &#123;</span><br><span class="xml">            if(this.myName) &#123; // 判断是否有值传过来</span><br><span class="xml">                return this.myName</span><br><span class="xml">            &#125;</span><br><span class="xml">            return &#x27;John&#x27; //没有传值的默认值</span><br><span class="xml">        &#125;</span><br><span class="xml">    &#125;</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml">// child-b 组件</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>姓名：</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">myName</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>修改姓名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">export default &#123;</span><br><span class="xml">    props: [&quot;myName&quot;],</span><br><span class="xml">    methods: &#123;</span><br><span class="xml">        changeName() &#123;</span><br><span class="xml">            this.$emit(&#x27;changeName&#x27;, &#x27;Lily&#x27;)   // 触发事件并传值</span><br><span class="xml">        &#125;</span><br><span class="xml">    &#125;</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="空Vue实例中转-适用于任何场景"><a href="#空Vue实例中转-适用于任何场景" class="headerlink" title="空Vue实例中转(适用于任何场景)"></a>空Vue实例中转(适用于任何场景)</h3><p>一：创建一个 EventBus.js 文件，暴露一个 vue 实例</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">import Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;Vue&#x27;</span>  <br><span class="hljs-builtin-name">export</span><span class="hljs-built_in"> default </span>new Vue()<br></code></pre></div></td></tr></table></figure><p>二：在要传值的文件里导入这个空 vue 实例，定义方法并通过 <code>$emit</code> 发送事件函数（也可以在 main.js 中全局引入该 js 文件）<br>三：在接收传值的组件中也导入 vue 实例，通过 <code>$on</code> 监听回调，回调函数接收所有触发事件时传入的参数<br><strong>注意：空Vue实例的this指向当前父级块作用域，一般为组件实例</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs handlebars"><span class="xml">// 发送事件</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>姓名: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>修改姓名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">​</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">import &#123; EventBus &#125; from &quot;../EventBus.js&quot;</span><br><span class="xml">​</span><br><span class="xml">export default &#123;</span><br><span class="xml"> data() &#123;</span><br><span class="xml">     return &#123;</span><br><span class="xml">         name: &#x27;John&#x27;,</span><br><span class="xml">     &#125;</span><br><span class="xml">  &#125;,</span><br><span class="xml">  methods: &#123;</span><br><span class="xml">      changeName() &#123;</span><br><span class="xml">          this.name = &#x27;Lily&#x27;</span><br><span class="xml">          EventBus.$emit(&quot;editName&quot;, this.name) // 触发全局事件,并且把改变后的值传入事件函数</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 监听事件并触发回调</span><br><span class="hljs-keyword">import</span> &#123; EventBus &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../EventBus.js&quot;</span><br>​<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            name: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;<br>         EventBus.$on(<span class="hljs-string">&#x27;editName&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> &#123;<br>             <span class="hljs-built_in">this</span>.name = name<br>         &#125;)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="provide-amp-inject-跨级通信"><a href="#provide-amp-inject-跨级通信" class="headerlink" title="provide &amp; inject 跨级通信"></a>provide &amp; inject 跨级通信</h2><p><a href="https://v3.cn.vuejs.org/guide/component-provide-inject.html">provide/inject – Vue3官方文档</a><br>Vue 高阶的方法：(provied &amp; inject) 选项需要一起使用：允许一个祖先组件通过<code>provide</code>向其所有子孙后代注入一个依赖，不论组件层次有多深，子组件都能通过<code>inject</code>接收，该关系在起上下游关系成立的时间里始终生效<br><strong>祖先组件</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">export</span> <span class="hljs-selector-tag">default</span> &#123;<br>  <span class="hljs-attribute">provide</span>: &#123; // 作用：将注入的变量提供给它的所有子组件。<br>    name: <span class="hljs-string">&#x27;Jack&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>子孙组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  inject: [<span class="hljs-string">&#x27;name&#x27;</span>], <span class="hljs-comment">// 获取 provide 注入的变量</span><br>  mounted () &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);  <span class="hljs-comment">// Jack</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>provide 和 inject 绑定并不是可响应的。即父组件的name变化后，子组件不会跟着变，然而，如果你传入了一个响应式的对象，那么其对象的 property 仍是响应式的</strong><br>在使用 provide / inject 时通常要处理响应问题：<br>在 Vue2 中：</p><ol><li>直接provide祖先实例(this)，然后在子孙组件中注入依赖，这样就可以在后代组件中直接修改祖先组件的实例的属性。缺点是挂载的无效东西太多</li><li>使用 <a href="https://cn.vuejs.org/v2/api/#Vue-observable">Vue.observable – Vue2</a> 优化响应式 provide. (即用Vue.observable()作用到对象，将其注册为响应式)</li></ol><p>在 Vue3 中：provide 需要传递组件实例data的property时，需要将provide变为返回对象的函数。<br>Vue3 对于 provide 响应式的处理，主要通过传递一个 ref property 或 reactive 对象给 provide 来改变这种行为。而 ref 对象通过 <code>Vue.computed()</code> 创建（它接受 getter 函数并为 getter 返回的值返回一个不可变的响应式 ref 对象，或者，它可以使用一个带有 get 和 set 函数的对象来创建一个可写的 ref 对象。）。<br><a href="https://v3.cn.vuejs.org/guide/reactivity-computed-watchers.html#%E8%AE%A1%E7%AE%97%E5%80%BC">Vue3文档–响应式计算和侦听</a><br><a href="https://v3.cn.vuejs.org/guide/component-provide-inject.html#%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94%E6%80%A7">Vue3文档–provide/inject</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>评论功能实现</title>
    <link href="/2021/03/28/%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/03/28/%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="评论功能实现"><a href="#评论功能实现" class="headerlink" title="评论功能实现"></a>评论功能实现</h1><h2 id="效果图展示"><a href="#效果图展示" class="headerlink" title="效果图展示"></a>效果图展示</h2><p><img src="/img/posts_img/20210328093332361_29308.png"></p><h2 id="组件结构"><a href="#组件结构" class="headerlink" title="组件结构"></a>组件结构</h2><p><strong><code>vue</code></strong></p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">├─ src<br>│  ├─ components<br>│  │  ├─ common<br>│  │  │  ├─ comment  <span class="hljs-comment">// 通用comment组件</span><br>│  │  │  │  ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CommentArea</span>.</span></span>vue<br>│  │  │  │  ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CommentBtn</span>.</span></span>vue<br>│  │  │  │  ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CommentCtn</span>.</span></span>vue<br>│  │  │  │  ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CommentItem</span>.</span></span>vue<br>│  │  │  │  └─ middle.js  <span class="hljs-comment">// 空Vue实例，作为通信中转</span><br>│  │  └─ content<br>│  │     ├─ comment<br>│  │        └─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Comment</span>.</span></span>vue  <span class="hljs-comment">// 项目comment组件</span><br>│  ├─ main.js<br>│  ├─ network  <span class="hljs-comment">// Post请求</span><br>│  │  ├─ index.js<br>│  │  └─ request.js<br>│  └─ views<br>│     ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Main</span>.</span></span>vue  <span class="hljs-comment">// 项目入口</span><br>│     └─ user<br>│        └─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserPage</span>.</span></span>vue  <span class="hljs-comment">// 组件展示页面</span><br>└─ vue.config.js<br></code></pre></div></td></tr></table></figure><p><strong><code>egg</code></strong></p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">├─ app<br>│  ├─ controller<br>│  │  └─ comment.js<br>│  ├─ router.js<br>│  └─ service<br>│     └─ comment.js<br>├─ config<br>   ├─ config.default.js<br>   └─ plugin.js<br></code></pre></div></td></tr></table></figure><h2 id="数据组织结构"><a href="#数据组织结构" class="headerlink" title="数据组织结构"></a>数据组织结构</h2><p><img src="/img/posts_img/20210328114000703_19213.png"><br><img src="/img/posts_img/20210328114301998_17880.png"></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">Comment</span>: [<br>  &#123;<br>    //主评论者<br>    reviewer: <span class="hljs-keyword">String</span>,<br>    // 被回复者<br>    responder: <span class="hljs-keyword">String</span>,<br>    <span class="hljs-built_in">date</span>: <span class="hljs-keyword">String</span>,<br>    <span class="hljs-keyword">content</span>: <span class="hljs-keyword">String</span>,<br>    <span class="hljs-keyword">index</span>: <span class="hljs-built_in">Number</span>,<br>  &#125;,&#123;&#125;,...<br>]<br></code></pre></div></td></tr></table></figure><h2 id="总体设计思路"><a href="#总体设计思路" class="headerlink" title="总体设计思路"></a>总体设计思路</h2><ol><li><code>CommentArea.vue</code>: 未输入任何内容时，<code>&lt;textarea&gt;</code>显示默认提示文本信息，点击发布弹出全局对话框“发布内容不能为空！”。输入内容并点击发布，将信息展示到 <code>CommentItem.vue</code> 中，并写入数据库。写入成功则弹出全局对话框“评论发布成功,已同步到数据库~”，写入失败弹出全局对话框“数据库写入失败”。点击”发布”或“清空”按钮均会删除<code>&lt;textarea&gt;</code>中的文本信息，并重新聚焦。</li><li><code>CommentItem.vue</code>: 展示评论信息，目前仅支持二级评论。主评论无缩进，子评论缩进并更改为回复模式。更换至回复模式的方法：点击想要评论的发布者姓名，在发布评论功能栏中提示“正在回复xxx”字样后，输入评论并发布即可。评论展示区设置了滚动条，当评论数量超出区域展示范围时，显示滚动条，在设计过程中，本组件自动在发布评论后将滚动条聚焦到底部。</li><li><code>egg</code>: 前端发起get请求时，egg读取数据库所有评论并返回前端，在页面展示；前端发起post请求时，将评论信息通过data传输给后端，后端接收后写入数据库内。</li></ol><h2 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h2><p>此处只针对本人在组件开发时遇到的一些问题或个人认为重要的点进行讲解。不对代码做一一解读，最后会贴出本项目所有代码，以供参考。<br>代码解读顺序按照一次完整的评论流程进行：</p><h3 id="数据请求与传递"><a href="#数据请求与传递" class="headerlink" title="数据请求与传递"></a>数据请求与传递</h3><p><strong><code>Comment.vue</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">CommentCtn</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:comment</span>=<span class="hljs-string">&quot;comment&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:curClient</span>=<span class="hljs-string">&quot;curClient&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:replyClient</span>=<span class="hljs-string">&quot;replyClient&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> CommentCtn <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/common/comment/CommentCtn&quot;</span>;</span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; commentRequest &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/network&quot;</span>;</span><br><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&quot;Comment&quot;</span>,</span><br>  components: &#123;<br>    CommentCtn,<br>  &#125;,<br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      width: <span class="hljs-string">&quot;600px&quot;</span>,</span><br><span class="javascript">      height: <span class="hljs-string">&quot;700px&quot;</span>,</span><br><span class="javascript">      curClient: <span class="hljs-string">&quot;WangJT&quot;</span>,</span><br><span class="javascript">      replyClient: <span class="hljs-string">&quot;xxx&quot;</span>,</span><br>      comment: [],<br>    &#125;;<br>  &#125;,<br><span class="javascript">  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// (imp)基于响应式的数据请求:通过逐个添加入数组(arr.push),保证Vue对数据的响应</span></span><br><span class="javascript">    <span class="hljs-comment">// 不能用 comment = [xxx], 相当于修改了指向, 将Vue初始化时对数组添加的watcher覆盖了</span></span><br><span class="javascript">    <span class="hljs-comment">// 若没有响应式, 则需要在 &lt;CommentCtn&gt; 组件内添加 $watch 方法监听 comment (之前在用的方法,现在找到原因了)</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> comments = <span class="hljs-keyword">await</span> commentRequest();</span><br><span class="javascript">    comments.map(<span class="hljs-function">(<span class="hljs-params">obj</span>) =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.comment.push(obj);</span><br>    &#125;);<br>  &#125;,<br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>重点：</strong><br>在初始渲染时，我们需要get请求数据库内已存储的评论，并将它传递给组件进行渲染。但由于get请求是异步操作，还未传入数据，<code>&lt;Comment&gt;</code>组件就渲染完成了，不当的操作会导致评论渲染不成功。主要原因和解决关键在于Vue的<strong>响应机制</strong>。(可先看下面关于Vue响应式系统的讲解)<br>方案一：<br>言归正传，此处我们在初始化实例前声明了响应式propety – <code>comment:[]</code>，此时任何向 <code>comment</code> 添加数据的行为有可能触发响应，注意是有可能：<code>this.comment = [new array]</code>就不会触发。因此，我们要保证请求到数据(一个数组)后，通过遍历的方式通过<code>arr.push()</code>逐个添加到评论内，从而触发响应式，进行实时渲染。<br>方案二：<br>若我们执意用<code>this.comment = [new array]</code>来替换已被添加至响应式系统里的数组时(替换了就相当于将数组从响应式系统中移除，又重新赋给了变量一个新的数组地址，不再具有响应式)，我们需要通过<code>this.$watch</code>手动监测<code>coment</code>数组的变化，并实时渲染。<br><strong>以下为Vue官方文档<a href="https://cn.vuejs.org/v2/guide/reactivity.html#ad">深入响应式原理</a>的原话：</strong><br>当一个 Vue 实例被创建时，它将 data 对象中的所有的 property 加入到 Vue 的响应式系统中。当这些 property 的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。值得注意的是只有当实例被创建时就已经存在于 data 中的 property 才是响应式的。也就是说如果你添加一个新的 property，并对其后续做改动将不会触发任何视图的更新。 Vue 不允许动态添加根级响应式 property，所以你必须在初始化实例前声明所有根级响应式 property，哪怕只是一个空值。<br><strong>更深层次理解：</strong><br> 当你把一个普通的 JavaScript 对象传入 Vue 实例作为 <strong><code>data</code></strong> 选项，Vue 将遍历此对象所有的 property，并使用 <code>Object.defineProperty</code> 把这些 property 全部转为 <code>getter/setter</code>。这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。<br> <img src="/img/posts_img/20210328101142163_15568.png"><br><strong>Vue响应式系统的限制：</strong><br>由于 JavaScript 的限制，Vue 不能检测数组和对象的变化。<br>对于对象：<br>Vue 无法检测 property 的添加或移除(只能检测修改)。由于 Vue 会在初始化实例时对 property 执行 getter/setter 转化，所以 property 必须在 data 对象上存在才能让 Vue 将它转换为响应式的。<br>解决方法：<br>(逐个添加属性)<br><code>Vue.set(object, propertyName, value)</code><br><code>vm.$set(object, propertyName, value)</code><br>(添加多条属性)<br><code>this.someObject = Object.assign(&#123;&#125;, this.someObject, &#123; a: 1, b: 2 &#125;)</code></p><p>对于数组：<br>Vue 不能检测以下数组的变动：</p><ol><li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></li><li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></li></ol><p>解决方法：<br><code>Vue.set(vm.items, indexOfItem, newValue)</code><br><code>arr.splice()</code><br><code>arr.push()</code><br>… 等数组原生内建方法</p><h3 id="初始渲染"><a href="#初始渲染" class="headerlink" title="初始渲染"></a>初始渲染</h3><p><strong><code>CommentCtn</code></strong></p><figure class="highlight handlebars"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;comment-container&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; width, height &#125;&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 无评论时展示 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;emptyComment&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>暂无评论，请发表第一条评论吧<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span></span><br><span class="xml">      <span class="hljs-comment">&lt;!-- 评论展示区 --&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;comment-list&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 遍历主评论,子评论在内部判断 --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, idx) in mainComments&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;idx&quot;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">CommentItem</span></span></span><br><span class="xml">            :allComments=&quot;comment&quot;</span><br><span class="xml">            :comment=&quot;item&quot;</span><br><span class="xml">            :index=&quot;idx&quot;</span><br><span class="xml">            @replyComment=&quot;replyComment&quot;</span><br><span class="xml">          /&gt;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>发表评论<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 发表评论区 --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 若回复评论，则显示 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;curSelect&quot;</span>&gt;</span>正在回复 </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">curSelect</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">CommentArea</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">CommentBtn</span> @<span class="hljs-attr">addComment</span>=<span class="hljs-string">&quot;addComment&quot;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">import CommentItem from &quot;@/components/common/comment/CommentItem&quot;;</span><br><span class="xml">import CommentArea from &quot;@/components/common/comment/CommentArea&quot;;</span><br><span class="xml">import CommentBtn from &quot;@/components/common/comment/CommentBtn&quot;;</span><br><span class="xml">import &#123; commentPost &#125; from &quot;@/network&quot;;</span><br><br><span class="xml">export default &#123;</span><br><span class="xml">  name: &quot;CommentCtn&quot;,</span><br><span class="xml">  components: &#123;</span><br><span class="xml">    CommentItem,</span><br><span class="xml">    CommentArea,</span><br><span class="xml">    CommentBtn,</span><br><span class="xml">  &#125;,</span><br><span class="xml">  data() &#123;</span><br><span class="xml">    return &#123;</span><br><span class="xml">      selectComment: -1,</span><br><span class="xml">    &#125;;</span><br><span class="xml">  &#125;,</span><br><span class="xml">  props: &#123;</span><br><span class="xml">    /*</span><br><span class="xml">      &#123;</span><br><span class="xml">        reviewer:String,</span><br><span class="xml">        responder:String,</span><br><span class="xml">        date:String,</span><br><span class="xml">        content:String,</span><br><span class="xml">        index:Number</span><br><span class="xml">      &#125; []</span><br><span class="xml">    */</span><br><span class="xml">    //  评论列表</span><br><span class="xml">    comment: Array,</span><br><span class="xml">    curClient: String,</span><br><span class="xml">    replyClient: String,</span><br><span class="xml">    width: &#123;</span><br><span class="xml">      type: String,</span><br><span class="xml">      default: &quot;600px&quot;,</span><br><span class="xml">    &#125;,</span><br><span class="xml">    height: &#123;</span><br><span class="xml">      type: String,</span><br><span class="xml">      default: &quot;700px&quot;,</span><br><span class="xml">    &#125;,</span><br><span class="xml">  &#125;,</span><br><span class="xml">  computed: &#123;</span><br><span class="xml">    // 判断评论是否为空,为空则显示占位文本</span><br><span class="xml">    emptyComment() &#123;</span><br><span class="xml">      return !this.comment.length;</span><br><span class="xml">    &#125;,</span><br><span class="xml">    // 通过选中项的idx与主评论的idx匹配,确定选择项的被回复者ID(目前只支持二级评论)</span><br><span class="xml">    curSelect() &#123;</span><br><span class="xml">      if (this.selectComment !== -1) &#123;</span><br><span class="xml">        // (imp)对象数组常用处理方法</span><br><span class="xml">        return this.mainComments.find((obj) =&gt; &#123;</span><br><span class="xml">          return obj.index === this.selectComment;</span><br><span class="xml">        &#125;).reviewer;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;,</span><br><span class="xml">    // 主评论</span><br><span class="xml">    mainComments() &#123;</span><br><span class="xml">      // (imp)对象数组常用处理方法</span><br><span class="xml">      return this.comment.filter((obj) =&gt; &#123;</span><br><span class="xml">        return obj.responder == &quot;undefined&quot;;</span><br><span class="xml">      &#125;);</span><br><span class="xml">    &#125;,</span><br><span class="xml">    mainCommentsNum() &#123;</span><br><span class="xml">      return this.comment.filter((obj) =&gt; &#123;</span><br><span class="xml">        return obj.responder == &quot;undefined&quot;;</span><br><span class="xml">      &#125;).length;</span><br><span class="xml">    &#125;,</span><br><span class="xml">  &#125;,</span><br><span class="xml">  methods: &#123;</span><br><span class="xml">    // 日期转换(Date对象转字符串)</span><br><span class="xml">    dateTransform(date) &#123;</span><br><span class="xml">      let y = date.getFullYear();</span><br><span class="xml">      let m = date.getMonth() + 1;</span><br><span class="xml">      m = m <span class="hljs-tag">&lt; <span class="hljs-attr">10</span> ? &quot;<span class="hljs-attr">0</span>&quot; + <span class="hljs-attr">m</span> <span class="hljs-attr">:</span> <span class="hljs-attr">m</span>;</span></span><br><span class="xml">      let d = date.getDate();</span><br><span class="xml">      d = d <span class="hljs-tag">&lt; <span class="hljs-attr">10</span> ? &quot;<span class="hljs-attr">0</span>&quot; + <span class="hljs-attr">d</span> <span class="hljs-attr">:</span> <span class="hljs-attr">d</span>;</span></span><br><span class="xml">      let h = date.getHours();</span><br><span class="xml">      let minute = date.getMinutes();</span><br><span class="xml">      minute = minute <span class="hljs-tag">&lt; <span class="hljs-attr">10</span> ? &quot;<span class="hljs-attr">0</span>&quot; + <span class="hljs-attr">minute</span> <span class="hljs-attr">:</span> <span class="hljs-attr">minute</span>;</span></span><br><span class="xml">      let second = date.getSeconds();</span><br><span class="xml">      second = minute <span class="hljs-tag">&lt; <span class="hljs-attr">10</span> ? &quot;<span class="hljs-attr">0</span>&quot; + <span class="hljs-attr">second</span> <span class="hljs-attr">:</span> <span class="hljs-attr">second</span>;</span></span><br><span class="xml">      return y + &quot;-&quot; + m + &quot;-&quot; + d + &quot; &quot; + h + &quot;:&quot; + minute + &quot;:&quot; + second;</span><br><span class="xml">    &#125;,</span><br><span class="xml">    addComment(content) &#123;</span><br><span class="xml">      if (this.selectComment === -1) &#123;</span><br><span class="xml">        // 添加主评论</span><br><span class="xml">        const mainComment = &#123;</span><br><span class="xml">          reviewer: this.curClient,</span><br><span class="xml">          responder: &quot;undefined&quot;,</span><br><span class="xml">          date: this.dateTransform(new Date()),</span><br><span class="xml">          content,</span><br><span class="xml">          index: this.mainCommentsNum,</span><br><span class="xml">        &#125;;</span><br><span class="xml">        // (imp)通过arr.push()更新comment列表,Vue会响应式更新</span><br><span class="xml">        this.comment.push(mainComment);</span><br><span class="xml">        commentPost(mainComment).then((res) =&gt; &#123;</span><br><span class="xml">          if (res) &#123;</span><br><span class="xml">            this.$Message.info(&quot;评论发布成功,已同步到数据库~&quot;);</span><br><span class="xml">          &#125; else &#123;</span><br><span class="xml">            this.$Message.info(&quot;数据库写入失败&quot;);</span><br><span class="xml">          &#125;</span><br><span class="xml">        &#125;);</span><br><span class="xml">      &#125; else &#123;</span><br><span class="xml">        // 添加子评论</span><br><span class="xml">        const subComment = &#123;</span><br><span class="xml">          reviewer: this.replyClient,</span><br><span class="xml">          responder: this.comment.find(</span><br><span class="xml">            (obj) =&gt; obj.index === this.selectComment</span><br><span class="xml">          ).reviewer,</span><br><span class="xml">          date: this.dateTransform(new Date()),</span><br><span class="xml">          content,</span><br><span class="xml">          index: this.selectComment,</span><br><span class="xml">        &#125;;</span><br><span class="xml">        this.comment.push(subComment);</span><br><span class="xml">        this.selectComment = -1;</span><br><span class="xml">        // 提交到数据库</span><br><span class="xml">        commentPost(subComment).then((res) =&gt; &#123;</span><br><span class="xml">          if (res) &#123;</span><br><span class="xml">            this.$Message.info(&quot;评论发布成功,已同步到数据库~&quot;);</span><br><span class="xml">          &#125; else &#123;</span><br><span class="xml">            this.$Message.info(&quot;数据库写入失败&quot;);</span><br><span class="xml">          &#125;</span><br><span class="xml">        &#125;);</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;,</span><br><span class="xml">    // (imp)自动聚焦评论区底部</span><br><span class="xml">    setScrollBottom() &#123;</span><br><span class="xml">      let event = document.getElementById(&quot;comment-list&quot;);</span><br><span class="xml">      event.scrollTop = event.scrollHeight;</span><br><span class="xml">    &#125;,</span><br><span class="xml">    replyComment(selectIdx) &#123;</span><br><span class="xml">      this.selectComment = selectIdx;</span><br><span class="xml">    &#125;,</span><br><span class="xml">  &#125;,</span><br><span class="xml">  // (imp)组件内watch侦听模式</span><br><span class="xml">  watch: &#123;</span><br><span class="xml">    // 监听评论，评论发生变化，拉动滚动条到最底端</span><br><span class="xml">    comment: &#123;</span><br><span class="xml">      // (imp)this指向问题:</span><br><span class="xml">      // function() &#123;&#125; 内 this 取决于上下文调用环境；</span><br><span class="xml">      // 箭头函数没有 this，取最近上层块级作用域；点符号调用中，取点符号前对象</span><br><span class="xml">      handler: function () &#123;</span><br><span class="xml">        // 此处要用零延时setTimeout将滚动条重置滞后，确保响应系统更新后，再计算滚动条高度</span><br><span class="xml">        // 若不用，滚动条停留在最新一条评论的前一条上方</span><br><span class="xml">        setTimeout(() =&gt; &#123;</span><br><span class="xml">          this.setScrollBottom();</span><br><span class="xml">        &#125;, 0);</span><br><span class="xml">      &#125;,</span><br><span class="xml">      // 监听深层嵌套</span><br><span class="xml">      deep: true,</span><br><span class="xml">    &#125;,</span><br><span class="xml">  &#125;,</span><br><span class="xml">&#125;;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="xml">...</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p><strong>重点：</strong><br>一：处理对象数组的常用方法(map,filter,find,findIdx)<br>遍历所有元素并对各元素执行回调，所有回调结果返回组成新数组<br><code>map&lt;U&gt;(callbackfn: (value: T, index: number, array: T[]) =&gt; U, thisArg?: any): U[];</code><br>遍历所有元素并对各元素执行回调，回调返回boolean值，若为true，则将该参与遍历的元素添加至新数组<br><code>filter(predicate: (value: T, index: number, array: T[]) =&gt; unknown, thisArg?: any): T[];</code><br>遍历所有元素并对各元素执行回调，回调返回boolean值，若为true，则返回该元素并停止遍历<br><code>arr.find(callback[, thisArg])</code><br>遍历所有元素并对各元素执行回调，回调返回boolean值，若为true，则返回该元素索引并停止遍历<br><code>arr.findIdx(callback[, thisArg])</code></p><p>二：Vue 的 watch 侦听模式<br>官方文档：<br><a href="https://cn.vuejs.org/v2/api/#watch">组件内watch侦听</a><br><a href="https://cn.vuejs.org/v2/api/#vm-watch">全局$watch侦听</a><br>组件内写法(本质上是调用了全局$watch)：<br>watch是一个对象类型，接收 String 类型作为 key，其可以是需要观察的字符串或者表达式，值是对应回调函数 | 方法名 | 包含选项的对象。Vue 实例将会在实例化时调用 <code>$watch()</code>，遍历 watch 对象的每一个 property。<br><strong>值得注意的是，watch内回调函数不要用箭头函数，因为箭头函数this绑定了父级块作用域上下文，而不是明确指向vue实例。此处用普通函数，普通函数this绑定调用上下文，watch内函数被vue实例调用，因此this始终指向vue实例</strong></p><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-attribute">watch</span>: &#123;<br>  [<span class="hljs-attribute">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">Function</span> | <span class="hljs-built_in">Object</span> | <span class="hljs-built_in">Array</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>实例：</p><figure class="highlight nim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nim">watch: &#123;<br>  // <span class="hljs-number">1</span>.若key为正常字符串，可省略引号；回调函数默认接收且仅接收两个参数(侦听目标新值，侦听目标原值)<br>  abc: function(newValue,oldValue) <span class="hljs-meta">&#123;...&#125;</span>,<br>  // <span class="hljs-number">2</span>.可用<span class="hljs-type">ES6</span>语法改写为：<br>  abc(newValue,oldValue) <span class="hljs-meta">&#123;...&#125;</span>,<br>  // <span class="hljs-number">3</span>.直接传入已定义方法的方法名<br>  b: &#x27;someMethod&#x27;,<br>  // <span class="hljs-number">4</span>.特殊字符串需要加上引号<br>  &#x27;$store.state.xxx&#x27;(newValue,oldValue)<span class="hljs-meta">&#123;...&#125;</span>,<br>  // <span class="hljs-number">5</span>.表达式(参照js计算属性使用)<br>  [&#x27;abc&#x27;+&#x27;edf&#x27;](newValue,oldValue)<span class="hljs-meta">&#123;...&#125;</span>,<br>  // <span class="hljs-number">6</span>.包含选项的对象&#123;handler: (newValue:<span class="hljs-built_in">any</span>, oldValue:<span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">any</span>, deep: boolean, immediate: boolean&#125;<br>  a:&#123;<br>    handler: function(newValue, oldValue) <span class="hljs-meta">&#123;...&#125;</span>,<br>    // 回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深<br>    deep: <span class="hljs-literal">true</span>,<br>    // 回调将会在侦听开始之后被立即调用<br>    immediate: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  // <span class="hljs-number">7</span>.若传入回调数组，它们会被逐一调用<br>  e: [<br>    &#x27;handle1&#x27;,<br>    function handle2 (val, oldVal) &#123; /* ... */ &#125;,<br>    &#123;<br>      handler: function handle3 (val, oldVal) &#123; /* ... */ &#125;,<br>      /* ... */<br>    &#125;<br>  ],<br>&#125;<br></code></pre></div></td></tr></table></figure><p><a href="https://cn.vuejs.org/v2/api/#vm-watch">全局$watch</a>：<br>参照官方文档，与组件内大致相同，<code>vm.$watch</code>分成三部分，其中侦听目标可以是<code>string | Function</code>，回调函数可以是<code>Function | Object</code>，配置参数传入<code>Object</code>，属性为<code>deep &amp; immediate</code>。此外 <code>vm.$watch</code> 还返回一个函数<code>unwatch: Function</code>，调用<code>unwatch</code>可以结束相应<code>vm.$watch</code>的侦听(类似于setTimeout &amp; clearTimeout)</p><h3 id="中转EventBus：实现兄弟通信，跨级通信"><a href="#中转EventBus：实现兄弟通信，跨级通信" class="headerlink" title="中转EventBus：实现兄弟通信，跨级通信"></a>中转EventBus：实现兄弟通信，跨级通信</h3><p><strong><code>CommentArea.vue</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span><br><span class="hljs-tag">    <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;comment-textarea&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">autofocus</span></span><br><span class="hljs-tag">    <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请发表您的看法 ...&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span></span><br><span class="hljs-tag">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> Middle <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./middle&quot;</span>;</span><br><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&quot;CommentArea&quot;</span>,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      value: <span class="hljs-string">&quot;&quot;</span>,</span><br>    &#125;;<br>  &#125;,<br>  watch: &#123;<br><span class="javascript">    <span class="hljs-comment">// (imp)利用中转EventBus实现兄弟组件通信,跨级组件通信</span></span><br><span class="javascript">    <span class="hljs-comment">// 本质: new 一个空 Vue 实例,向它内部添加事件发送和事件监听</span></span><br><span class="javascript">    <span class="hljs-comment">// vm.$emit()发送,vm.$on()监听并执行回调</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">value</span>(<span class="hljs-params">newValue, oldValue</span>)</span> &#123;</span><br><span class="javascript">      Middle.$emit(<span class="hljs-string">&quot;textChange&quot;</span>, newValue);</span><br>    &#125;,<br>  &#125;,<br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// (imp)回调的监听可在组件创建的一开始就开启</span></span><br><span class="javascript">    Middle.$on(<span class="hljs-string">&quot;clearContent&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.value = <span class="hljs-string">&quot;&quot;</span>;</span><br>    &#125;);<br>  &#125;,<br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong><code>CommentBtn.vue</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row-display btn-bar&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>清空<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>发布<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> Middle <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./middle&quot;</span>;</span><br><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&quot;CommentBtn&quot;</span>,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      content: <span class="hljs-string">&quot;&quot;</span>,</span><br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">submit</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-comment">// this -&gt; 当前组件 vm</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(this);</span></span><br><span class="javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.content) &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&quot;addComment&quot;</span>, <span class="hljs-built_in">this</span>.content);</span><br><span class="javascript">        Middle.$emit(<span class="hljs-string">&quot;clearContent&quot;</span>);</span><br><span class="javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.$Message.info(<span class="hljs-string">&#x27;发布内容不能为空！&#x27;</span>)</span><br>      &#125;<br><span class="javascript">      <span class="hljs-comment">// 点击发布后，重新聚焦到textarea</span></span><br><span class="javascript">      <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;comment-textarea&#x27;</span>).focus();</span><br>    &#125;,<br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">clear</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      Middle.$emit(<span class="hljs-string">&quot;clearContent&quot;</span>);</span><br>    &#125;,<br>  &#125;,<br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 监听事件并回调在组件创建阶段开启</span></span><br><span class="javascript">    Middle.$on(<span class="hljs-string">&quot;textChange&quot;</span>, <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-comment">// (imp)中转Vue实例的this指向:</span></span><br><span class="javascript">      <span class="hljs-comment">// 此处 this -&gt; Middle (vm)，Middle 作为中转，this 取决上下文？ 所以 this -&gt; 当前组件 vm ？</span></span><br><span class="javascript">      <span class="hljs-comment">// console.log(this);</span></span><br><span class="javascript">      <span class="hljs-built_in">this</span>.content = value;</span><br>    &#125;);<br>  &#125;,<br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong><code>middle.js</code></strong></p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-regexp">//</span> 作为中转站，承担发送事件$emit(传参)，监听事件$<span class="hljs-literal">on</span>并处罚回调的作用<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vue();<br></code></pre></div></td></tr></table></figure><p>重点：<br>在通用组件编写中，我们碰到兄弟通讯，跨级通讯，往往需要多级父子传递过程，比较麻烦。为了组件的复用性，又不能使用vuex全局管理。此处提出了一种方法：通过空Vue实例实现数据传递。<br>具体操作：</p><ol><li>新建 js 文件，new 一个 Vue 实例并导出</li><li>在需要发送事件的地方导入 js，通过 <code>vm.$emit()</code> 方法传递参数 <a href="https://cn.vuejs.org/v2/api/#vm-emit">vm.$emit()</a></li><li>在需要接收参数的地方导入 js，通过 <code>vm.$on</code> 方法监听事件并触发回调 <a href="https://cn.vuejs.org/v2/api/#vm-on">vm.$on</a></li></ol><p>该方式的好处在于，新建了一个“可自由放置位置”的中转站，代替了通过父组件(甚至更多上层组件)进行传值的问题。我们只需要在传递数据的源头和接受数据的尽头引入中转站即可。<br><strong>疑问：</strong><br>我们实例化了一个新的Vue对象，其内部 this 指向承接上下文吗？以<code>CommentBtn.vue</code>为例，this 指向点符号前对象，即 Middle，但 Middle 作为空 Vue 实例，应该不存在 <code>this.content</code> 才对，但实际上打印出 this 发现，this 与当前组件 <code>&lt;CommentBtn&gt;</code> 相同。猜测：可能空Vue实例没有挂载到某节点，因此this从上下文获取。</p><h2 id="评论功能代码"><a href="#评论功能代码" class="headerlink" title="评论功能代码"></a>评论功能代码</h2><p>见 <a href="https://github.com/jtwang7/vue-project">vue-project</a> &amp; <a href="https://github.com/jtwang7/vue-project-egg">vue-project-egg</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Egg</tag>
      
      <tag>MySQL</tag>
      
      <tag>Vue</tag>
      
      <tag>axios</tag>
      
      <tag>ES6</tag>
      
      <tag>JavaScript</tag>
      
      <tag>前后端联调</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue侦听功能(watch)</title>
    <link href="/2021/03/22/Vue%E4%BE%A6%E5%90%AC(watch)/"/>
    <url>/2021/03/22/Vue%E4%BE%A6%E5%90%AC(watch)/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue侦听-watch"><a href="#Vue侦听-watch" class="headerlink" title="Vue侦听(watch)"></a>Vue侦听(watch)</h1><p><a href="https://cn.vuejs.org/v2/api/#watch">vue(watch)官方文档</a></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&quot;LayoutFrame&quot;</span>,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      isCollapsed: <span class="hljs-literal">false</span>,</span><br>    &#125;;<br>  &#125;,<br>  watch: &#123;<br><span class="javascript">    <span class="hljs-string">&quot;$route.path&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newValue, oldValue</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(newValue);</span><br><span class="javascript">      <span class="hljs-comment">// js 中数组取末尾不能用索引-1，因为不支持该写法。</span></span><br><span class="javascript">      <span class="hljs-built_in">this</span>.curActiveName = newValue;</span><br>    &#125;,<br>  &#125;,<br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>重点：</p><ol><li>watch 接收对象作为属性值</li><li>对象内类型：<code>&#123; [key: string]: string | Function | Object | Array &#125;</code> 即 key 传入的是字符串，属性值有四种(字符串，函数，对象，数组)</li><li>watch 侦听的目标(target)作为 key 值，后面的回调函数在目标发生状态改变时触发，接收 <code>(newValue, oldValue)</code>，其中 newValue 为新状态值， oldValue 为旧状态值。</li><li>watch 可以侦听 store ，router，route 等全局实例，和监听普通变量一样，同样不需要加 this。</li></ol><h1 id="JS-数组拼接技巧"><a href="#JS-数组拼接技巧" class="headerlink" title="JS 数组拼接技巧"></a>JS 数组拼接技巧</h1><p>通常会遇到以下应用场景：<br>对某一数组内的值进行处理，并返回新的数组。此时我们可以用 <code>arr.map(()=&gt;&#123;&#125;)</code> 来实现，<br>但当<code>arr.map(()=&gt;&#123;&#125;)</code> 内部返回数组时，我们希望将数组整合成一个数组，可采用如下方式：</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript">[].concat.apply([],arr.map(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>   ...<br>   <span class="hljs-keyword">return</span> xxx<br>&#125;))<br></code></pre></div></td></tr></table></figure><p><code>[].concat</code> 为数组拼接，<code>.apply()</code>表示对其回调函数返回值都应用<code>.concat()</code>方法，<code>.apply([],callback())</code>第一个参数为this指向，此处指向<code>[]</code>空数组，即定义初始值。</p><h1 id="html-a标签禁用跳转功能"><a href="#html-a标签禁用跳转功能" class="headerlink" title="html a标签禁用跳转功能"></a>html a标签禁用跳转功能</h1><p><code>&lt;a&gt;</code>标签除了作为跳转标签外，还可以包裹文本等元素，使之具有点击的功能(即鼠标放在文本上，显示点击图标)。<br>但包裹的文本，我们通常不希望其具备跳转的功能，因此，我们可以通过：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0)&quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>取消其跳转的功能</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue项目登录功能实现</title>
    <link href="/2021/03/21/Vue%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/03/21/Vue%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue登录功能实现"><a href="#Vue登录功能实现" class="headerlink" title="Vue登录功能实现"></a>Vue登录功能实现</h1><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>vue + vue-router + iviewUI + egg.js</p><h2 id="登录页面制作"><a href="#登录页面制作" class="headerlink" title="登录页面制作"></a>登录页面制作</h2><p><img src="/img/posts_img/20210321104031010_1796.png"></p><p><strong><code>Login.vue</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;login-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-body&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>账户登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">LoginBar</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:icon</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">use</span> <span class="hljs-attr">xlink:href</span>=<span class="hljs-string">&quot;#icon-user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">use</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:input</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">Input</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;account&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Account ...&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 200px; padding-bottom: 15px&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-style&quot;</span></span><br><span class="hljs-tag">          /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">LoginBar</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">LoginBar</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:icon</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">use</span> <span class="hljs-attr">xlink:href</span>=<span class="hljs-string">&quot;#icon-password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">use</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:input</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">Input</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;password&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">password</span></span><br><span class="hljs-tag">            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password ...&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 200px; padding-bottom: 10px&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-style&quot;</span></span><br><span class="hljs-tag">          /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">LoginBar</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">LoginBtn</span> <span class="hljs-attr">:account</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">:password</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@/assets/login/iconfont.js&quot;</span>;</span><br><span class="javascript"><span class="hljs-keyword">import</span> LoginBar <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./LoginBar&quot;</span>;</span><br><span class="javascript"><span class="hljs-keyword">import</span> LoginBtn <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./LoginBtn&#x27;</span></span><br><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&quot;Login&quot;</span>,</span><br>  components: &#123;<br>    LoginBar,<br>    LoginBtn,<br>  &#125;,<br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      account: <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="javascript">      password: <span class="hljs-string">&quot;&quot;</span>,</span><br>    &#125;;<br>  &#125;,<br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><span class="css"><span class="hljs-comment">/* style scoped 包裹样式只能在该组件内使用 */</span></span><br><span class="css"><span class="hljs-selector-id">#login-container</span> &#123;</span><br>  position: absolute;<br>  width: 100%;<br>  height: 100%;<br>  top: 0;<br>  left: 0;<br>  z-index: -1;<br><span class="css">  <span class="hljs-comment">/* style内引入图片不能用@ */</span></span><br>  background-image: url(&quot;../../../assets/login-background.png&quot;);<br>  background-size: 100%;<br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.login-body</span> &#123;</span><br>  margin-top: 20vh;<br>  margin-left: 20vw;<br>  margin-right: 20vw;<br>  height: 200px;<br><br>  display: flex;<br>  flex-direction: column;<br>  justify-content: space-around;<br>  align-items: center;<br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.login-body</span> <span class="hljs-selector-class">.title</span> &#123;</span><br>  color: white;<br>  font-weight: bolder;<br>  font-size: 2em;<br>  margin-bottom: 20px;<br>&#125;<br><br><span class="css"><span class="hljs-comment">/* iconfont 下载的图标通过 font-size 调大小 */</span></span><br><span class="css"><span class="hljs-selector-class">.login-body</span> <span class="hljs-selector-class">.icon</span> &#123;</span><br>  font-size: 30px;<br>  margin-right: 10px;<br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.login-body</span> <span class="hljs-selector-class">.input-style</span> &#123;</span><br>    margin-right: 2vw;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-comment">/* 全局CSS样式 */</span></span><br><span class="css"><span class="hljs-selector-class">.icon</span> &#123;</span><br>  width: 1em;<br>  height: 1em;<br><span class="css">  <span class="hljs-selector-tag">vertical-align</span>: <span class="hljs-selector-tag">-0</span><span class="hljs-selector-class">.15em</span>;</span><br>  fill: currentColor;<br>  overflow: hidden;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong><code>LoginBar.vue</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;login-bar&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;input&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name:<span class="hljs-string">&#x27;LoginBar&#x27;</span></span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scopoed</span>&gt;</span><br><span class="css"><span class="hljs-selector-class">.login-bar</span> &#123;</span><br>  display: flex;<br>  justify-content: space-around;<br>  align-items: center;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="技术点总结："><a href="#技术点总结：" class="headerlink" title="技术点总结："></a>技术点总结：</h3><p>css 样式篇：</p><ol><li><code>&lt;style scoped&gt;</code> 管理当前组件内CSS样式，<code>&lt;style&gt;</code> 管理全局CSS样式。</li><li><code>&lt;style&gt;</code> 内外部引入 CSS 样式通过：<code>@import &#39;../../../xxx.css&#39;</code>，注意此处必须为 <code>&#39;../../&#39;</code> 路径，不能为 <code>@/xx/xx/</code>，踩坑的地方是程序编译时会加载成<code>./@/xxx/xxx/</code>路径。</li><li>iconfont 图标库下载的图标，大小可以通过<code>font-size</code>调整。</li><li>iconfont Symbol 类图标使用 (可参考下载文件中的<code>demo_index.html</code>)：在 <code>&lt;script&gt;</code> 中引入 <code>&#39;iconfont.js&#39;</code> 文件，根据样例代码在模板中引用即可。</li></ol><p>组件篇：</p><ol><li><code>&lt;LoginBar&gt;</code> 是自定义的预留插槽组件。</li><li><code>&lt;LoginBtn&gt;</code> 是封装的登录按钮(讲业务逻辑时贴代码)。</li><li><code>&lt;Input&gt;</code>是<a href="https://www.iviewui.com/">iviewui</a>的封装组件，按照官方文档使用即可。</li></ol><h2 id="主应用“登录-注册”按钮制作"><a href="#主应用“登录-注册”按钮制作" class="headerlink" title="主应用“登录/注册”按钮制作"></a>主应用“登录/注册”按钮制作</h2><p><img src="/img/posts_img/20210321105417697_12639.png"></p><p><strong><code>NoLogged.vue</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;no-logged&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isLogged&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- mouseover.native --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 监听原生事件时，需要通过.native修饰符 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 自定义事件官方文档：https://cn.vuejs.org/v2/guide/components-custom-events.html --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;sign&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;signHover ? &#x27;text-active-style&#x27; : &#x27;text-style&#x27;&quot;</span></span><br><span class="hljs-tag">      @<span class="hljs-attr">mouseover.native</span>=<span class="hljs-string">&quot;signHover = true&quot;</span></span><br><span class="hljs-tag">      @<span class="hljs-attr">mouseout.native</span>=<span class="hljs-string">&quot;signHover = false&quot;</span></span><br><span class="hljs-tag">      &gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span></span><br><span class="hljs-tag">    &gt;</span><br>    /<br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;reg&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;regHover ? &#x27;text-active-style&#x27; : &#x27;text-style&#x27;&quot;</span></span><br><span class="hljs-tag">      @<span class="hljs-attr">mouseover.native</span>=<span class="hljs-string">&quot;regHover = true&quot;</span></span><br><span class="hljs-tag">      @<span class="hljs-attr">mouseout.native</span>=<span class="hljs-string">&quot;regHover = false&quot;</span></span><br><span class="hljs-tag">      &gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span></span><br><span class="hljs-tag">    &gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&quot;NoLogged&quot;</span>,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      signHover: <span class="hljs-literal">false</span>,</span><br><span class="javascript">      regHover: <span class="hljs-literal">false</span>,</span><br>    &#125;;<br>  &#125;,<br>  props: &#123;<br>    sign: &#123;<br><span class="javascript">      type: <span class="hljs-built_in">String</span>,</span><br><span class="javascript">      <span class="hljs-keyword">default</span>: <span class="hljs-string">&quot;&quot;</span>,</span><br>    &#125;,<br>    reg: &#123;<br><span class="javascript">      type: <span class="hljs-built_in">String</span>,</span><br><span class="javascript">      <span class="hljs-keyword">default</span>: <span class="hljs-string">&quot;&quot;</span>,</span><br>    &#125;,<br>    isLogged: &#123;<br><span class="javascript">      type: <span class="hljs-built_in">Boolean</span>,</span><br><span class="javascript">      <span class="hljs-keyword">default</span>: <span class="hljs-literal">true</span>,</span><br>    &#125;,<br>  &#125;,<br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-id">#no-logged</span> &#123;</span><br>  color: white;<br>&#125;<br><br><span class="css"><span class="hljs-selector-id">#no-logged</span> <span class="hljs-selector-class">.text-style</span> &#123;</span><br>  color: white;<br>&#125;<br><br><span class="css"><span class="hljs-selector-id">#no-logged</span> <span class="hljs-selector-class">.text-active-style</span> &#123;</span><br>  color: rgb(250, 150, 133);<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="技术点总结：-1"><a href="#技术点总结：-1" class="headerlink" title="技术点总结："></a>技术点总结：</h3><p>此处用 <code>&lt;router-link&gt;</code> 组件监听和实现路由跳转 (编程式路由也可以实现)。</p><p><strong>业务逻辑：</strong></p><ol><li>点击登录或注册，实现路由跳转(此处暂时只实现了登陆页面的跳转)。</li><li>样式修改：当鼠标移动到登录或注册上时，通过监听原生事件动态修改样式。</li></ol><p><strong>重点：</strong></p><ol><li>vue 监听原生事件(mouseover, keyup, …)时，需要通过 <code>.native</code> 修饰符。详情参考官方文档：<a href="https://cn.vuejs.org/v2/guide/components-custom-events.html">自定义事件</a></li><li>动态改变样式(两种方法)：vue的<a href="https://cn.vuejs.org/v2/guide/class-and-style.html#%E5%AF%B9%E8%B1%A1%E8%AF%AD%E6%B3%95">动态class绑定</a><code>:class=&quot;&#123;&#39;styleName1&#39;:isActived, &#39;styleName2&#39;:!isActived&#125;&quot;</code> 或者通过三元运算符<code>:class=&quot;isActived?&#39;styleName1&#39;:&#39;styleName2&#39;&quot;</code></li></ol><h2 id="主应用登陆成功后“用户头像”展示"><a href="#主应用登陆成功后“用户头像”展示" class="headerlink" title="主应用登陆成功后“用户头像”展示"></a>主应用登陆成功后“用户头像”展示</h2><p><img src="/img/posts_img/20210321110943778_9692.png"></p><p><strong><code>Logged.vue</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Dropdown</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isLogged&quot;</span> @<span class="hljs-attr">on-click</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0)&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar-container&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../../assets/userAvatar.png&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">      /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;ios-arrow-down&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:white;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Icon</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">DropdownMenu</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">DropdownItem</span>&gt;</span>个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">DropdownItem</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">DropdownItem</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">DropdownItem</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">DropdownItem</span> <span class="hljs-attr">disabled</span>&gt;</span>权限管理<span class="hljs-tag">&lt;/<span class="hljs-name">DropdownItem</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">DropdownItem</span> <span class="hljs-attr">divided</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;signout&quot;</span>&gt;</span>退出登录<span class="hljs-tag">&lt;/<span class="hljs-name">DropdownItem</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">DropdownMenu</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Dropdown</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&quot;Logged&quot;</span>,</span><br>  props: &#123;<br>    isLogged: &#123;<br><span class="javascript">      type: <span class="hljs-built_in">Boolean</span>,</span><br><span class="javascript">      <span class="hljs-keyword">default</span>: <span class="hljs-literal">false</span>,</span><br>    &#125;,<br>  &#125;,<br>  methods: &#123;<br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">click</span>(<span class="hljs-params">name</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params">name === <span class="hljs-string">&#x27;signout&#x27;</span></span>)</span> &#123;</span><br><span class="javascript">              <span class="hljs-built_in">this</span>.$router.replace(<span class="hljs-string">&#x27;/main/gaode/tourist&#x27;</span>);</span><br>          &#125;<br>      &#125;<br>  &#125;,<br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br>img &#123;<br>  width: 100%;<br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.avatar-container</span> &#123;</span><br>  border-radius: 50%;<br>  width: 40px;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="技术点总结：-2"><a href="#技术点总结：-2" class="headerlink" title="技术点总结："></a>技术点总结：</h3><p>css 样式篇：</p><ol><li><code>img &#123;&#125;</code> 对所有 img 标签进行样式管理。</li><li>图片样式裁剪为圆形的方法：在 img 标签内定义样式 <code>border-radius: 50%</code>。</li></ol><p>组件篇：</p><ol><li>下拉菜单采用 <a href="https://www.iviewui.com/components/dropdown">Dropdown</a> 。</li></ol><p>业务逻辑篇：</p><ol><li>监听下拉菜单内的点击事件<code>on-click</code> (详见官方文档API)，当点击<strong>退出登录</strong>时，通过编程式路由跳转到游客界面(即<strong>登录/注册</strong>)。</li></ol><h2 id="“登录-注册”与“用户头像”切换"><a href="#“登录-注册”与“用户头像”切换" class="headerlink" title="“登录/注册”与“用户头像”切换"></a>“登录/注册”与“用户头像”切换</h2><p><strong><code>Sign.vue</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sign&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Logged</span> <span class="hljs-attr">:isLogged</span>=<span class="hljs-string">&#x27;Logged&#x27;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">NoLogged</span> <span class="hljs-attr">:isLogged</span>=<span class="hljs-string">&#x27;!Logged&#x27;</span> <span class="hljs-attr">sign</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">reg</span>=<span class="hljs-string">&quot;/login&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> Logged <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Logged&#x27;</span></span><br><span class="javascript"><span class="hljs-keyword">import</span> NoLogged <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./NoLogged&#x27;</span></span><br><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&quot;Sign&quot;</span>,</span><br>  components: &#123;<br>    Logged,<br>    NoLogged,<br>  &#125;,<br>  computed: &#123;<br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">Logged</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$route.params.id);</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.$route.params.id === <span class="hljs-string">&#x27;tourist&#x27;</span>) &#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-id">#sign</span> &#123;</span><br>  margin-left: 30px;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="技术点总结：-3"><a href="#技术点总结：-3" class="headerlink" title="技术点总结："></a>技术点总结：</h3><p><strong>计算属性 + 路由传参</strong><br>通过计算属性判断当前路由：<br>若路由 parmas 动态传参值为 <code>tourist</code>，则“登录/注册”的 <code>v-if=true</code>；<br>若路由 parmas 动态传参值为 <code>用户id</code>，则“用户头像”的 <code>v-if=true</code>；</p><h2 id="登录按钮及其业务逻辑"><a href="#登录按钮及其业务逻辑" class="headerlink" title="登录按钮及其业务逻辑"></a>登录按钮及其业务逻辑</h2><p><strong><code>LoginBtn.vue</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;circle&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sign&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- .stop 修饰符阻止事件冒泡 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;log-in&quot;</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;sign&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; login &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/network/login&quot;</span>;</span><br><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&quot;LoginBtn&quot;</span>,</span><br>  props: &#123;<br>    account: &#123;<br><span class="javascript">      type: <span class="hljs-built_in">String</span>,</span><br><span class="javascript">      <span class="hljs-keyword">default</span>: <span class="hljs-string">&quot;&quot;</span>,</span><br>    &#125;,<br>    password: &#123;<br><span class="javascript">      type: <span class="hljs-built_in">String</span>,</span><br><span class="javascript">      <span class="hljs-keyword">default</span>: <span class="hljs-string">&quot;&quot;</span>,</span><br>    &#125;,<br>  &#125;,<br>  methods: &#123;<br><span class="javascript">    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">sign</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.account) &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.$Message.info(<span class="hljs-string">&quot;请输入用户名...&quot;</span>);</span><br><span class="javascript">        <span class="hljs-comment">// 中断该方法继续进行，否则还会进行请求</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span>;</span><br><span class="javascript">      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.password) &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.$Message.info(<span class="hljs-string">&quot;请输入密码...&quot;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">return</span>;</span><br>      &#125;<br><br><span class="javascript">      <span class="hljs-comment">// 需要设置拦截器！！否则请求的是axios包装的值</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> login(&#123;</span><br><span class="javascript">        account: <span class="hljs-built_in">this</span>.account,</span><br><span class="javascript">        password: <span class="hljs-built_in">this</span>.password,</span><br>      &#125;);<br><br><span class="javascript">      <span class="hljs-keyword">if</span> (res === <span class="hljs-string">&#x27;success&#x27;</span>) &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.$router.replace(<span class="hljs-string">`/main/gaode/<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.account&#125;</span>`</span>);</span><br><span class="javascript">      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res === <span class="hljs-string">&#x27;refused&#x27;</span>) &#123;</span><br><span class="javascript">        <span class="hljs-comment">// iviewUI的方法，不是Vue内部的</span></span><br><span class="javascript">        <span class="hljs-built_in">this</span>.$Message.info(<span class="hljs-string">&quot;密码错误！请重新登录...&quot;</span>);</span><br><span class="javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.$Message.info(<span class="hljs-string">&quot;用户名不存在...&quot;</span>);</span><br>      &#125;<br>    &#125;,<br>  &#125;,<br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><span class="css"><span class="hljs-selector-class">.circle</span> &#123;</span><br>  width: 100px;<br>  height: 100px;<br>  background: rgb(248, 143, 74);<br>  -moz-border-radius: 50px;<br>  -webkit-border-radius: 50px;<br>  border-radius: 50px;<br><br>  display: flex;<br>  justify-content: center;<br>  align-items: center;<br><br>  margin-top: 20px;<br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.log-in</span> &#123;</span><br>  font-weight: bolder;<br>  font-size: 2em;<br>  display: block;<br><br>  color: rgb(119, 119, 143);<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="技术点总结：-4"><a href="#技术点总结：-4" class="headerlink" title="技术点总结："></a>技术点总结：</h3><ol><li><code>.stop</code> 修饰符阻止事件冒泡：此例中，子组件和父组件都监听了click事件，当子组件监听到click事件后，由于事件冒泡，父组件也会重复响应。通过<code>.stop</code>修饰符可以解决该问题。</li><li><code>this.Message.info(&#39;xxx&#39;)</code>为 <a href="https://www.iviewui.com/components/message">iviewui 的全局提示事件</a>，非 vue 自带。</li><li>判断是否登陆成功的业务逻辑：若未输入用户名，提示(且中断函数) =&gt; 若未输入密码，提示(且中断函数)；若上述完成，向后端发送请求，后端判断后返回数据，若成功则返回<code>success</code>，失败返回<code>refused</code>，用户名不存在返回<code>empty</code>，前端异步等待接收结果后，作进一步判断(<code>success</code>:编程式路由跳转，<code>refused || empty</code>:全局提示)</li></ol><h2 id="egg-js后端业务逻辑"><a href="#egg-js后端业务逻辑" class="headerlink" title="egg.js后端业务逻辑"></a>egg.js后端业务逻辑</h2><h3 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Egg.Application&#125;</span> <span class="hljs-variable">app</span></span> - egg application</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./router/map&#x27;</span>)(app);<br>  <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./router/account&#x27;</span>)(app);<br>&#125;;<br></code></pre></div></td></tr></table></figure><p><strong>技术点总结：</strong><br>此处对路由做了管理，具体路由分类放至创建的<code>router</code>文件夹下，通过CommonJS模块导入方法<code>require()</code>引入。各路由文件返回的是方法且接受<code>app</code>参数，因此 require 请求后得到的结果当作方法使用。</p><h3 id="router-account-js"><a href="#router-account-js" class="headerlink" title="/router/account.js"></a>/router/account.js</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; router, controller &#125; = app;<br>    <span class="hljs-comment">// 用户账号路由</span><br>    router.post(<span class="hljs-string">&#x27;/login&#x27;</span>,controller.getAccount.verify);<br>&#125;;<br></code></pre></div></td></tr></table></figure><p><strong>技术点总结：</strong><br>导出Post路由，路径指向<code>/login</code>，调用 controller 对象内挂载的 getAccount 实例的 verify (异步)方法。</p><h3 id="controller-getAccount-js"><a href="#controller-getAccount-js" class="headerlink" title="/controller/getAccount.js"></a>/controller/getAccount.js</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">const</span> Controller = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg&#x27;</span>).Controller;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetAccountController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">verify</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-built_in">this</span><br>        ctx.body = <span class="hljs-keyword">await</span> ctx.service.account.verify()<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = GetAccountController;<br></code></pre></div></td></tr></table></figure><p><strong>技术点总结：</strong><br>从 <code>egg.Controller</code> 中导入 Controller 类，继承该基类，类内定义方法：等待 <code>service.accout.verify()</code> 完成并将值返回给 <code>ctx.body</code> 暴露到响应体内传给前端。记住导出该类。</p><h3 id="service-account-js"><a href="#service-account-js" class="headerlink" title="/service/account.js"></a>/service/account.js</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">const</span> Service = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg&#x27;</span>).Service;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Service</span> </span>&#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">verify</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123; ctx, app &#125; = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-comment">// body: &#123;account:&#x27;xxx&#x27;,password:&#x27;yyy&#x27;&#125;</span><br>        <span class="hljs-keyword">const</span> &#123; account, password &#125; = ctx.request.body<br>        <span class="hljs-comment">// 数据库若没有用户则返回 []</span><br>        <span class="hljs-comment">// 数据库存在用户，返回形如 [ RowDataPacket &#123; id: 1, user: &#x27;admin&#x27;, password: &#x27;123456&#x27; &#125; ]</span><br>        <span class="hljs-keyword">const</span> target = <span class="hljs-keyword">await</span> app.mysql.select(<span class="hljs-string">&#x27;account&#x27;</span>, &#123;<br>            where: &#123;<br>                user: account,<br>            &#125;<br>        &#125;)<br>        <span class="hljs-keyword">if</span> (target.length !== <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (target[<span class="hljs-number">0</span>].password === password) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;success&#x27;</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;refused&#x27;</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;empty&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = AccountService;<br></code></pre></div></td></tr></table></figure><p><strong>技术点总结：</strong><br><code>/service</code>主要管理数据库一类的操作，此处业务逻辑：从前端请求(post)的body中读取账户密码，通过账户在数据库内查找用户，若存在该用户，返回形如 <code>[ RowDataPacket &#123; id: 1, user: &#39;admin&#39;, password: &#39;123456&#39; &#125; ]</code>的数组，若不存在则返回空数组<code>[]</code>，之后再验证密码即可。<br>注意：egg.js 中默认开启了 csrf 安全防护，请参考<a href="https://eggjs.org/zh-cn/basics/router.html">官方文档</a>，在<code>config/config.default.js</code>中关闭。</p><h2 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h2><p>采用 DBeaver 可视化管理数据库：<br>新建表 - 新建列 - 添加数据 - 设置约束(主键)<br><img src="/img/posts_img/20210321115010709_24364.png"></p><h2 id="前端-Post-请求及路由配置"><a href="#前端-Post-请求及路由配置" class="headerlink" title="前端 Post 请求及路由配置"></a>前端 Post 请求及路由配置</h2><h3 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h3><p><strong><code>/network/index.js</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> basePost = <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> instance = axios.create(&#123;<br>        baseURL: <span class="hljs-string">&#x27;http://127.0.0.1:7001&#x27;</span>,<br>        method: <span class="hljs-string">&#x27;post&#x27;</span>,<br>        timeout: <span class="hljs-number">5000</span>,<br>    &#125;)<br><br>    instance.interceptors.response.use(<br>        res =&gt; &#123;<br>            <span class="hljs-keyword">return</span> res.data<br>        &#125;,<br>        err =&gt; &#123;<br>            <span class="hljs-built_in">console</span>.log(err);<br>        &#125;)<br><br>    <span class="hljs-keyword">return</span> instance(config)<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>技术点总结：</strong><br>统一封装基础 post 请求配置，并设置响应拦截器，用于过滤 axios 对响应结果的包装。</p><p><strong><code>/network/login.js</code></strong></p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">import &#123; basePost &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index&#x27;</span><br><br><span class="hljs-builtin-name">export</span> const login = (config) =&gt; &#123;<br>    const &#123; account, password &#125; = config;<br>    return basePost(&#123;<br>        url: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>        data: &#123;<br>            account,<br>            password,<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>技术点总结：</strong><br>独立封装符合当前业务逻辑的 post 请求，返回一个 Promise 对象(axios实例本身就是 Promise 对象，当获得响应结果后，可以通过该 Promise 执行后续处理操作)。</p><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br>Vue.use(VueRouter)<br><br><span class="hljs-comment">// 应用页面</span><br><span class="hljs-keyword">const</span> MainRoute = <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/Main&#x27;</span>)<br><span class="hljs-comment">// main-地图路由</span><br><span class="hljs-keyword">const</span> GaodeRoute = <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/components/common/map/EchartsGaode&#x27;</span>);<br><span class="hljs-keyword">const</span> MapboxRoute = <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/components/common/map/Mapbox&#x27;</span>);<br><br><span class="hljs-comment">// 登陆页面</span><br><span class="hljs-keyword">const</span> LoginRoute = <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/components/common/login/Login&#x27;</span>);<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    redirect: <span class="hljs-string">&#x27;/main/gaode/tourist&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-comment">// 应用页面</span><br>    path: <span class="hljs-string">&#x27;/main&#x27;</span>,<br>    component: MainRoute,<br>    children: [<br>      &#123;<br>        path: <span class="hljs-string">&#x27;gaode/:id&#x27;</span>,<br>        component: GaodeRoute,<br>      &#125;,<br>      &#123;<br>        path: <span class="hljs-string">&#x27;mapbox&#x27;</span>,<br>        component: MapboxRoute,<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    <span class="hljs-comment">// 登陆页面</span><br>    path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>    component: LoginRoute,<br>  &#125;,<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  mode: <span class="hljs-string">&#x27;history&#x27;</span>,<br>  base: process.env.BASE_URL,<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br></code></pre></div></td></tr></table></figure><p><strong>技术点总结：</strong><br>路由代码包括了主应用界面的路由配置和登陆页面的路由配置。主页面组件<code>&lt;Main /&gt;</code>和登陆界面组件<code>&lt;Login /&gt;</code>均放在项目入口组件<code>&lt;App /&gt;</code>下，通过<code>&lt;router-view&gt;</code>展示。<br>注意：<code>&lt;Main /&gt;</code> 和 <code>&lt;Login /&gt;</code>是同级关系，这样可以实现整体页面的刷新(及发生路由跳转时，登陆页面整体替换主页面)，而<code>&lt;Main /&gt;</code>组件内的路由跳转要写在其子级路径，如代码所示。</p><h4 id="项目入口组件-App-vue"><a href="#项目入口组件-App-vue" class="headerlink" title="项目入口组件 App.vue"></a>项目入口组件 App.vue</h4><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">export default </span><span class="xquery">&#123;</span><br><span class="xquery"> <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="xquery">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>此处<code>&lt;router-view&gt;</code>展示的是<code>&lt;Main /&gt;</code> 和 <code>&lt;Login /&gt;</code>，及最顶层的路由关系。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Egg</tag>
      
      <tag>MySQL</tag>
      
      <tag>Vue</tag>
      
      <tag>前后端联调</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js - vue-router</title>
    <link href="/2021/03/18/Vue-Router/"/>
    <url>/2021/03/18/Vue-Router/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h1><p>vue-router 学习比较系统全面，因此直接拿 vue 项目练习和讲解，此项目主要包含了 vue-router 的使用以及一些辅助的页面组件。<br>项目主要的结构如下(主要业务逻辑代码在src路径下)：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs stylus">learnvuerouter<br>├─ .gitignore<br>├─ babel<span class="hljs-selector-class">.config</span>.js<br>├─ package-lock.json<br>├─ package.json<br>├─ public<br>│  ├─ favicon.ico<br>│  └─ index.html<br>├─ README.md<br>├─ src<br>│  ├─ App.vue<br>│  ├─ assets  <span class="hljs-comment">//静态资源</span><br>│  │  └─ logo.png<br>│  ├─ components  <span class="hljs-comment">//组件</span><br>│  │  ├─ HelloWorld.vue<br>│  │  ├─ Info.vue<br>│  │  ├─ News.vue<br>│  │  ├─ Profile.vue<br>│  │  └─ User.vue<br>│  ├─ main<span class="hljs-selector-class">.js</span>  <span class="hljs-comment">//项目入口文件(Vue实例)</span><br>│  ├─ router  <span class="hljs-comment">//路由</span><br>│  │  └─ index<span class="hljs-selector-class">.js</span>  <span class="hljs-comment">//路由入口文件</span><br>│  └─ views<br>│     ├─ About.vue<br>│     └─ Home.vue<br>└─ 路由学习.txt<br></code></pre></td></tr></table></figure><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><h3 id="Part1-vue-router-安装及引用"><a href="#Part1-vue-router-安装及引用" class="headerlink" title="Part1: vue-router 安装及引用"></a>Part1: vue-router 安装及引用</h3><p>Vue框架在安装的时候会提示开发者是否选择vue-router库，若选择则在项目生成过程中自动安装vue-router库，并提供相应的示例代码。若没有在项目初始化时安装vue-router，可以通过npm或yarn命令安装。<br>安装：<code>npm install --save vue-router</code><br>引用：<br><code>ES6 - import VueRouter from &#39;vue-router&#39;</code><br><code>CommonJs - const VueRouter = require(&#39;vue-router&#39;)</code><br><strong>注意：vue-router在开发和发布使用时均会使用，为了在<code>package.json</code>中添加相应的依赖，安装时请务必加上<code>--save</code></strong><br><a href="https://router.vuejs.org/zh/">Vue-Router官方中文文档</a></p><h3 id="Part2-vue-router-在项目目录结构中的存放位置"><a href="#Part2-vue-router-在项目目录结构中的存放位置" class="headerlink" title="Part2: vue-router 在项目目录结构中的存放位置"></a>Part2: vue-router 在项目目录结构中的存放位置</h3><p>在Vue项目内，开发人员一般将业务逻辑写在<code>/src</code>路径下，其中<code>/components</code>主要用于存放项目组件，<code>/views</code>存放整体页面视图，<code>/assets</code>存放静态资源，<code>/router</code>则主要存放路由配置。<br>注：项目结构内文件名并不是固定的，但是在行业内已经形成不成文规范，建议遵循此规范合理规划项目目录结构。</p><p>vue-router 文件夹路径：<code>/src/router</code><br>vue-router 入口文件：<code>/src/router/index.js</code><br>注：入口文件一般写为<code>index.js</code>，这是因为 webpack 在编译文件路径时，默认可以省略 <code>/index.js</code> 以及 <code>/node_modules</code>两个路径(可在webpack配置内更改)。因此引用vue-router时，一般简写为<code>/src/router</code>即可。</p><h3 id="Part3-vue-router的正式讲解"><a href="#Part3-vue-router的正式讲解" class="headerlink" title="Part3: vue-router的正式讲解"></a>Part3: vue-router的正式讲解</h3><h4 id="step1-引用-amp-插件注册-amp-挂载"><a href="#step1-引用-amp-插件注册-amp-挂载" class="headerlink" title="step1: 引用&amp;插件注册&amp;挂载"></a>step1: 引用&amp;插件注册&amp;挂载</h4><p>vue-router作为一个库，一个插件，在使用前必须被Vue项目引用和注册。<br><strong>注：所有Vue插件在使用前都需要经过<code>Vue.use()</code>注册安装</strong><br>具体步骤如下：<br><code>/src/router/index.js</code>路由入口文件下</p><ol><li>引入 vue-router</li><li><code>Vue.use()</code>注册安装插件</li><li>实例化路由 (常用参数有 routes, mode 等，属性名称均固定，不能随意设置)</li><li>导出路由</li></ol><p><code>/src/index.js</code>项目入口文件下</p><ol><li>引入创建的路由实例router</li><li>在Vue实例下挂载router路由实例</li></ol><p><strong>完整代码：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> <span class="hljs-regexp">/src/</span>router/index.js(路由入口文件)<br>import Vue from <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-regexp">//</span> step1: 引入vue-router<br>import VueRouter from <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-regexp">//</span> Vue.use() 当使用插件时都需要使用 Vue.use()<br><span class="hljs-regexp">//</span> step2：Vue.use(插件)<br>Vue.use(VueRouter)<br><br><span class="hljs-regexp">//</span> step3: 实例化router路由<br>const router = new VueRouter(&#123;<br>    routes,<br>    mode: <span class="hljs-string">&#x27;history&#x27;</span><br>&#125;)<br><br><span class="hljs-regexp">//</span> step4: 导出路由实例<br>export default router<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> <span class="hljs-regexp">/src/m</span>ain.js(项目入口文件)<br>import Vue from <span class="hljs-string">&#x27;vue&#x27;</span><br>import App from <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-regexp">//</span> step1: 导入router实例，/index.js 可以省略<br>import router from <span class="hljs-string">&#x27;./router&#x27;</span><br><br><span class="hljs-regexp">//</span> 产品提示，在发布阶段改为true<br>Vue.config.productionTip = false<br><br>new Vue(&#123;<br><span class="hljs-regexp">//</span> step2: 将router实例传入 Vue 实例进行挂载(此处用了ES6字面量增强写法)<br>  router,<br>  render: h =&gt; h(App)<br>&#125;).<span class="hljs-variable">$mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><span class="hljs-regexp">//</span> <span class="hljs-variable">$mount</span>() &lt;=&gt; el: <span class="hljs-string">&#x27;xxx&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="step2-路由数组配置"><a href="#step2-路由数组配置" class="headerlink" title="step2: 路由数组配置"></a>step2: 路由数组配置</h4><p>我们已经有了一个router实例(有且只有一个)，基础配置如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  <span class="hljs-keyword">base</span>: process.env.BASE_URL,<br>  mode: <span class="hljs-string">&#x27;history&#x27;</span>,<br>  routes,<br>&#125;)<br></code></pre></td></tr></table></figure><p>可以看到，配置参数中有一项 <code>routes</code>，我们需要在里面配置路由和组件间的映射关系。<br>由于路由和组件的映射有多组，因此 <code>routes</code> 属性接收一个 <code>Array</code> 数组类型，本文后续将其称为路由数组。</p><p>路由数组往往包含了复杂的映射关系，我们一般将其单独声明一个变量存储，然后通过ES6字面量增强的写法配置到 router 实例中。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 不要忘记引入组件<br>import Home from <span class="hljs-string">&#x27;@/components/Home.vue&#x27;</span><br><br>const routes = [<br>  <span class="hljs-regexp">//</span> 路由重定向<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    redirect: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-regexp">//</span> path 相对路径<br>    path: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-regexp">//</span> component 路径对应跳转的组件<br>    component: Home,<br>    name: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><p>路由数组接收<strong>对象</strong>表示映射关系。<br>上述代码为基本的路由数组配置，包括了路由重定向以及路由和组件的映射：</p><h5 id="路由和组件映射关系配置"><a href="#路由和组件映射关系配置" class="headerlink" title="路由和组件映射关系配置"></a>路由和组件映射关系配置</h5><p>常用属性(属性名Vue规定，不能随意更改)：</p><ol><li>path: 路由相对路径。<code>&#39;/&#39;</code>表示根路径，一般为<code>http://localhost:8080/</code></li><li>component: 路由跳转的组件</li><li>name: 路由标识名</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Home.vue&#x27;</span><br><br>//示例：路径跳转到<span class="hljs-string">&#x27;/home&#x27;</span>时，展示Home组件(要将组件导入，否则路由配置不知道Home是什么)<br>&#123;<br>    <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    component: Home,<br>    <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h5><p>路由重定向常用属性：</p><ol><li>path: 路由相对路径</li><li>redirect: 路由重定向的目标路径</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 示例：当路径为<span class="hljs-string">&#x27;/&#x27;</span>时，自动重定向(跳转)到<span class="hljs-string">&#x27;/home&#x27;</span>路径<br>&#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    redirect: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>&#125;,<br></code></pre></td></tr></table></figure><h5 id="路由进阶配置——懒加载"><a href="#路由进阶配置——懒加载" class="headerlink" title="路由进阶配置——懒加载"></a>路由进阶配置——懒加载</h5><p><strong>路由懒加载</strong><br>定义：实现了不同路由组件的分割，当路由被访问时才加载对应组件。<br>实现：当发生路由跳转时，调用箭头函数，触发import，导入文件，而非在index.js开始就import组件。</p><p>普通路由加载方式：在最开始就 import 组件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Home.vue&#x27;</span><br><br>&#123;<br>    <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    component: Home,<br>    <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>路由懒加载方式</strong>：当发生路由跳转时导入文件</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">&#123;<br>    path: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;About&#x27;</span>,<br>    <span class="hljs-regexp">//</span> route level code-splitting<br>    <span class="hljs-regexp">//</span> <span class="hljs-built_in">this</span> generates a separate chunk (about.[hash].js) <span class="hljs-keyword">for</span> <span class="hljs-built_in">this</span> route<br>    <span class="hljs-regexp">//</span> which <span class="hljs-keyword">is</span> lazy-loaded <span class="hljs-keyword">when</span> the route <span class="hljs-keyword">is</span> visited.<br>    component: <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/components/About.vue&#x27;</span>),<br>&#125;,<br></code></pre></td></tr></table></figure><p><strong>路由懒加载管理</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">建议将路由懒加载单独提取赋值，方便管理<br>const About = () =&gt; import(<span class="hljs-string">&#x27;../views/About.vue&#x27;</span>)<br>const<span class="hljs-built_in"> User </span>= () =&gt; import(<span class="hljs-string">&#x27;../components/User.vue&#x27;</span>)<br>const News = () =&gt; import(<span class="hljs-string">&#x27;../components/News.vue&#x27;</span>)<br>const <span class="hljs-builtin-name">Info</span> = () =&gt; import(<span class="hljs-string">&#x27;../components/Info.vue&#x27;</span>)<br>const<span class="hljs-built_in"> Profile </span>= () =&gt; import(<span class="hljs-string">&#x27;../components/Profile.vue&#x27;</span>)<br><br><span class="hljs-built_in">..</span>.<br><br>&#123;<br>    path: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;About&#x27;</span>,<br>    component: About,<br>&#125;,<br></code></pre></td></tr></table></figure><h5 id="动态路由配置"><a href="#动态路由配置" class="headerlink" title="动态路由配置"></a>动态路由配置</h5><p>在路由跳转过程中，我们往往需要传递某些信息给路由跳转后的组件。<br>动态路由配置可以<strong>让 url 携带一些配置参数进行传递</strong>，主要为 <code>params</code> 和 <code>query</code> 两种方式。<br>作用：路由切换时，传递参数。</p><p><strong><code>params</code>动态路由配置：</strong></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const User = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/User.vue&#x27;</span>)<br><br>...<br><br>&#123;<br>    <span class="hljs-regexp">//</span> params: path 配置时需要事先通过<span class="hljs-string">&#x27;/:xxx&#x27;</span>预留params位置<br>    path: <span class="hljs-string">&#x27;/user/:id&#x27;</span>,<br>    component: User,<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>params</code>参数接收：</strong><br>params 传递的参数可通过挂载在 Vue 实例下的全局 route 的 params 属性获取：<br><code>this.$route.parmas.id</code></p><p><strong><code>query</code>动态路由配置：</strong><br>query 配置路由时，不需要 <code>/:xxx</code> 预留位置，而是在 url 中添加 <code>xxx=aaa&amp;yyy=bbb</code> 传递参数。<br>query 传参格式参考：<br>协议头://主机名:端口号?query<br><code>http://localhost:8080?name=wjt&amp;age=18</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const Profile = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/Profile.vue&#x27;</span>)<br><br>...<br><br>&#123;<br>    <span class="hljs-regexp">//</span> query 动态传参：path 配置普通形式<br>    path: <span class="hljs-string">&#x27;/profile&#x27;</span>,<br>    component: Profile,<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>query</code>参数接收：</strong><br>query 传递的参数可通过挂载在 Vue 实例下的全局 route 的 query 属性获取：<br><code>this.$route.query</code><br>获取的是对象类型，形如<code>&#123;name:&#39;wjt&#39;,age:18&#125;</code></p><h5 id="嵌套路由配置"><a href="#嵌套路由配置" class="headerlink" title="嵌套路由配置"></a>嵌套路由配置</h5><p>当路由跳转组件内还有路由和组件的映射关系时，需要在当前路由内配置嵌套路由。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>    <span class="hljs-attribute">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;About&#x27;</span>,<br>    component: About,<br>    // 嵌套路由<br>    children: [<br>      &#123;<br>        // 此处不需要加 <span class="hljs-string">&#x27;/&#x27;</span>，加<span class="hljs-string">&#x27;/&#x27;</span>表示根路径，即 localhost 之后的路径。<br>        // 此处承接父级 <span class="hljs-string">&#x27;/about&#x27;</span>，嵌套路由会自动拼接为 <span class="hljs-string">&#x27;/about/news&#x27;</span><br>        path: <span class="hljs-string">&#x27;news&#x27;</span>,<br>        component: News,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attribute">path</span>: <span class="hljs-string">&#x27;info&#x27;</span>,<br>        component: Info,<br>      &#125;,<br>    ],<br>&#125;,<br></code></pre></td></tr></table></figure><p>嵌套路由配置同普通路由配置相同，唯一要注意的是<strong>嵌套路由在相应路由内通过<code>children</code>属性配置</strong>，由于子路由也是路由，因此**<code>children</code> 属性接收的也是数组类型，数组内为子路由对象**。</p><h4 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h4><p>导航守卫主要用于<strong>监听路由的创建/跳转等，并执行回调函数</strong>。类似于Vue的生命周期。<br>导航守卫根据作用域不同可以分为：</p><ol><li>全局导航守卫</li><li>路由独享守卫</li><li>组件守卫</li></ol><p>本文主要介绍全局导航守卫，让读者了解导航守卫大致的作用以及使用方式，具体细节以及其余守卫请参考Vue-Router官方文档。</p><p>全局导航守卫：作用于全局，内部又根据执行回调的节点不同分为前置守卫，后置守卫等等</p><p><strong>前置守卫</strong> (通过router实例的beforeEach()方法执行)<br><code>xxx.beforeEach()</code>: 在路由跳转前自动执行自定义操作。(监听全局的路由跳转)<br><code>.beforeEach()</code> 是 router 实例的方法，<strong>接收函数作为参数</strong>。其<strong>回调函数中又包含三个参数</strong>：</p><ol><li>to: 跳转的目的路由, 源码内 to 是 route 类型，取数据方法同 $route.xxx</li><li>from: 跳转前的路由, 源码内 from 是 route 类型，取数据方法同 $route.xxx</li><li>next: <strong>next()，必须要调用，否则不能执行下一步</strong>。</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br>    <span class="hljs-regexp">//</span> params: path 配置时需要事先通过<span class="hljs-string">&#x27;/:xxx&#x27;</span>预留params位置<br>    path: <span class="hljs-string">&#x27;/user/:id&#x27;</span>,<br>    <span class="hljs-regexp">//</span> component: User,<br>    component: User,<br>    meta: &#123;<br>      title: <span class="hljs-string">&#x27;用户&#x27;</span>,<br>    &#125;,<br>&#125;,<br><br>...<br><br><span class="hljs-regexp">//</span> 此处前置守卫作用是：发生路由跳转前，获取源路由(to指向的路由)的meta属性中的title值。<br><span class="hljs-regexp">//</span> 此时 to 实际上就是源路由的 route 实例(注意是route实例，不是router实例)<br>router.beforeEach((to, from, <span class="hljs-keyword">next</span>) =&gt; &#123;<br>  document.title = to.meta.title;<br>  <span class="hljs-regexp">//</span> <span class="hljs-keyword">next</span>()内部还能传入参数，具体功能参考 Vue-router 官网<br>  <span class="hljs-keyword">next</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>后置钩子(守卫)</strong><br><code>.afterEach()</code>: 在路由跳转后自动执行自定义操作。(监听全局的路由跳转)<br><code>.afterEach()</code> 是 router 实例的方法，<strong>接收函数作为参数</strong>。其<strong>回调函数中又包含两个参数</strong>：</p><ol><li>to: 跳转的目的路由, 源码内 to 是 route 类型，取数据方法同 $route.xxx</li><li>from: 跳转前的路由, 源码内 from 是 route 类型，取数据方法同 $route.xxx</li></ol><p>!!!注意 .afterEach() 没有next: 因为路由已经跳转完成，不需要进行其他操作，因此没有 next() 函数。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">router.afterEach(<span class="hljs-function"><span class="hljs-params">(to, <span class="hljs-keyword">from</span>)</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;--------------&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>vue-router</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js - vuex</title>
    <link href="/2021/03/18/Vue-vuex/"/>
    <url>/2021/03/18/Vue-vuex/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-vuex"><a href="#Vue-vuex" class="headerlink" title="Vue-vuex"></a>Vue-vuex</h1><p>本文通过练习项目来整体梳理Vue中vuex的组织结构以及使用方式。</p><h2 id="文章组织结构"><a href="#文章组织结构" class="headerlink" title="文章组织结构"></a>文章组织结构</h2><ol><li>项目结构</li><li>vuex 安装 | 引入 | 挂载</li><li>vuex</li><li>vuex 分离管理</li></ol><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs stylus">learnvuex<br>├─ .browserslistrc<br>├─ <span class="hljs-selector-class">.eslintrc</span>.js<br>├─ .gitignore<br>├─ babel<span class="hljs-selector-class">.config</span>.js<br>├─ package-lock.json<br>├─ package.json<br>├─ public<br>│  ├─ favicon.ico<br>│  └─ index.html<br>├─ README.md<br>└─ src<br>   ├─ App.vue<br>   ├─ assets<br>   │  └─ logo.png<br>   ├─ components<br>   │  ├─ OrgCounter.vue<br>   │  ├─ PCCounter.vue<br>   │  └─ VuexCounter.vue<br>   ├─ main<span class="hljs-selector-class">.js</span>  <span class="hljs-comment">//项目入口文件(Vue实例)</span><br>   └─ store  <span class="hljs-comment">//vuex文件夹</span><br>      ├─ actions.js<br>      ├─ getters.js<br>      ├─ index copy.js<br>      ├─ index<span class="hljs-selector-class">.js</span>  <span class="hljs-comment">//vuex入口文件</span><br>      ├─ modules<br>      │  └─ moduleA.js<br>      ├─ mutations-types.js<br>      └─ mutations.js<br></code></pre></td></tr></table></figure><h2 id="Vuex-安装-引入-挂载"><a href="#Vuex-安装-引入-挂载" class="headerlink" title="Vuex 安装 | 引入 | 挂载"></a>Vuex 安装 | 引入 | 挂载</h2><ol><li>npm 安装 vuex: <code>npm install vuex --save</code></li><li>引入 vuex 模块，注册vuex插件: </li></ol><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">// /store/index.js</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><br>Vue.use(Vuex);<br></code></pre></td></tr></table></figure><ol start="3"><li>vuex 实例化</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">const store = new Vuex.Store(&#123;<br>  state:&#123;&#125;,<br>  mutations: &#123;&#125;,<br>  actions: &#123;&#125;,<br>  getters: &#123;&#125;,<br>  modules: &#123;&#125;,<br>&#125;)<br><br><span class="hljs-builtin-name">export</span><span class="hljs-built_in"> default </span>store;<br></code></pre></td></tr></table></figure><ol start="4"><li>在项目入口文件的Vue实例中挂载 store 实例</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span><br><br>Vue.config.productionTip = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  store,<br>  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>作用</strong>：存放多界面共享的数据，同时将其添加到Vue的响应式系统。</p><blockquote><p>注！在 Vuex 中初始化的数据会被添加进入 Vue 的响应式系统，当其管理的数据状态发生变化时，页面也会实时渲染刷新。Vue 的响应式是十分关键和必须要重视的，有些数据更改方式若没有遵循Vue的更改规则，可能不会被响应式系统所响应。</p></blockquote><p><strong>存储路径</strong>：项目中 vuex 往往存放在名为 <code>store</code> 的文件夹内，并以 index.js 作为 vuex 的入口文件。</p><h3 id="store-实例"><a href="#store-实例" class="headerlink" title="store 实例"></a>store 实例</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> store = new Vuex.Store(&#123;<br>  <span class="hljs-keyword">state</span>:&#123;&#125;,<br>  mutations: &#123;&#125;,<br>  actions: &#123;&#125;,<br>  getters: &#123;&#125;,<br>  modules: &#123;&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>vuex 创建实例调用的是 <code>Vuex</code> 的 <code>Store</code> 方法！！！</strong>这也是为什么将vuex的存储路径文件夹取名为store的原因。<br>在 store 实例下，包含5个配置项属性(属性名由Vuex规定，不能随意修改)：</p><ol><li>state: 存放全局共享和管理的状态变量</li><li>mutations: 定义同步操作的函数。(注：mutations 内定义的函数必须为同步函数，且 mutations 往往是对 state 中状态做一系列操作，没有返回值，若在mutations的定义函数中返回值，最终调用mutations内方法时，接收的值将会是undefined)</li><li>actions: 定义异步操作的函数。所有放在 store 实例中管理的异步操作都要定义在 actions 中，并且通过<code>ctx.commit()</code>注册mutations内的方法来执行异步操作状态落定后的一系列同步处理操作。</li><li>getters: 类似vue的computed计算属性，对 state 内的状态变量做一定的预处理后再将其返回，getters 内定义函数调用时也同 computed 一样，以属性的方式调用。(mutations 内方法无法返回值，若有返回值的需求，可以考虑在 getters 内定义)</li><li>modules: Vuex 创建 state 时就指定它为单一状态树。这也决定了我们只能创建一个 store 仓库。尽管 Vuex 有且仅能存在一个 store，它内部仍能通过 modules 进行代码分离。</li></ol><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><p>作用：存储”共享变量”<br>属性值：接收 Object 对象类型，对象内声明并初始化变量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">state:</span> &#123;<br>    <span class="hljs-attr">shareCount:</span> <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">students:</span> [<br>        &#123; <span class="hljs-attr">id:</span> <span class="hljs-number">1</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">18</span> &#125;,<br>        &#123; <span class="hljs-attr">id:</span> <span class="hljs-number">2</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;lisi&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">30</span> &#125;,<br>        &#123; <span class="hljs-attr">id:</span> <span class="hljs-number">3</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;wangwu&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">22</span> &#125;,<br>    ],<br>&#125;<span class="hljs-string">,</span><br></code></pre></td></tr></table></figure><p>组件内state使用：<br>通过挂载在全局的 store 实例获取。<br><code>$store.state.shareCount</code></p><h4 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h4><p>作用：定义”处理共享变量的同步操作”<br>属性值： 接收 Object 对象类型，对象内声明同步方法。<br><strong>方法默认传参</strong>：定义方法时默认传入两个参数且只接受这两个参数：<br>在参数中，第一参数为当前store的<code>state</code>；第二参数为mutation的载荷<code>payload</code>，用于接受传递的额外数据。</p><ol><li><code>state</code> : 对应store仓库内的state，因此mutations方法内不需要通过this.state调用共享变量</li><li><code>payload</code> : 组件在注册(后续会提及mutations在组件中的使用)时，需要传递的参数通过 payload 传递。若只传一个参数，则 payload 及等价于该参数，若传递多个参数，则需要用 <code>&#123;&#125;</code> 包裹成对象赋值给 payload。</li></ol><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pf">mutations: &#123;<br>    addCount(<span class="hljs-keyword">state</span>) &#123;<br>        <span class="hljs-keyword">state</span>.shareCount++;<br>    &#125;,<br>    subCount(<span class="hljs-keyword">state</span>) &#123;<br>        <span class="hljs-keyword">state</span>.shareCount--;<br>    &#125;,<br>    // mutations 中定义的函数可以看作两部分：<br>    // <span class="hljs-number">1</span>.type(事件类型)： 即 addFiveCount<br>    // <span class="hljs-number">2</span>.回调函数：即(<span class="hljs-keyword">state</span>,payload) &#123;...&#125;<br>    [ADDFIVECOUNT](<span class="hljs-keyword">state</span>, payload) &#123;<br>        <span class="hljs-keyword">state</span>.shareCount += payload<br>    &#125;,<br>    [ADDMEMBERINFO](<span class="hljs-keyword">state</span>, payload) &#123;<br>        // Vuex 创建 <span class="hljs-keyword">state</span> 时初始化的值被添加到 Vue 的响应式系统中<br>        // 通过类似于 xx = xxx 等后续添加不能添加至响应式系统，因此页面不会更改。<br>        // 需要运用一些 Vue 支持响应式的方法或者 Vue.<span class="hljs-built_in">set</span>()  Vue.delete() 对数据进行更新操作<br><br>        // <span class="hljs-keyword">state</span>.students.push(payload)<br>        Vue.<span class="hljs-built_in">set</span>(<span class="hljs-keyword">state</span>.students, <span class="hljs-keyword">state</span>.students.length, payload)<br>        // Vue.<span class="hljs-built_in">set</span>(第一参数:传入需要改变的对象, 第二参数:(Number:传入需要发生改变的位置索引 | String: 传入key), 第三参数:(传入更新的数据))<br>    &#125;,<br>    [SUBMEMBERINFO](<span class="hljs-keyword">state</span>) &#123;<br>        Vue.delete(<span class="hljs-keyword">state</span>.students, <span class="hljs-number">1</span>)<br>    &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><h5 id="mutations-在组件内的使用"><a href="#mutations-在组件内的使用" class="headerlink" title="mutations 在组件内的使用"></a>mutations 在组件内的使用</h5><p>在组件中，需要定义一个函数，在该函数内通过<code>$store.commit(&#39;xxx&#39;, a)</code>注册 store 的 mutations 方法。<br>当存在多个传参时，通过 <code>&#123;&#125;</code> 包裹传值：<code>$store.commit(&#39;xx&#39;,&#123;a:2,b:4&#125;)</code></p><h5 id="39-string-39"><a href="#39-string-39" class="headerlink" title="[&#39;string&#39;]() {}"></a><code>[&#39;string&#39;]() &#123;&#125;</code></h5><p>在 mutations 中定义的函数可以视为两部分：</p><ol><li>type(事件类型)： 即函数名(String类型)</li><li>回调函数：即函数参数 + 函数体</li></ol><p>理解mutations内函数的这两部分后，我们可以讲下 store 中函数的一般规范写法：<br>即用 <code>[ADDFIVECOUNT](state, payload) &#123;...&#125;</code> 代替 <code>addFiveCount(state, payload) &#123;...&#125;</code><br>完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> &#123; ADDCOUNT &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mutations-types&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>  ...<br>  mutations: &#123;<br>    [ADDCOUNT](state,payload) &#123;<br>      ...<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// mutations-types.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ADDCOUNT = <span class="hljs-string">&#x27;addCount&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这么做的<strong>原因</strong>：<br>为防止书写错误引发一系列问题,通常将mutations的事件类型(type)赋给常量，后续调用 mutations 内的方法时,引用常量名而非变量名。 这样做的好处在于,若常量书写错误,可以很直观地从错误提示中找到。<br><strong>重点：</strong><br>在导出这些事件类型常量后,在使用时需要对其进行调用.<br>注: 方法可以写成如下形式:<br><code>[&#39;string-text&#39;]()&#123;...&#125;</code><br>因此,调用这些常量时, 不能直接写 ADDCOUNT() {},而应该写成 <a href>ADDCOUNT</a>{}<br>这也是之前为什么强调 mutations 方法可以分为 1.事件类型 2.回调函数  两个部分.</p><h5 id="从-mutations-理解-Vue-的响应式系统"><a href="#从-mutations-理解-Vue-的响应式系统" class="headerlink" title="从 mutations 理解 Vue 的响应式系统"></a>从 mutations 理解 Vue 的响应式系统</h5><p>本文一开始就提及，Vuex 在创建 state 时，就将所有初始化的值添加到 Vue 的响应式系统中了。在状态管理过程中，若这些初始化的值发生了变化，页面可以实时的做出相应的改变。这便是 Vue 的响应式体现。但是在某些情况下，用错误的方法改变值可能触发不了 Vue 的响应式。</p><p>以对象为例：<br>若在 state 中声明了对象<code>obj = &#123;num:2&#125;</code>，后续对该对象进行添加/删除或更改等操作时，若通过<code>obj.age = 18</code>等类似操作添加属性，Vue 的响应式系统是不会触发的。但是！若初始化的变量是个值 <code>aaa = 1</code>，那么通过<code>aaa = 4</code>是可以被响应式系统监测的！why?</p><p><a href="https://cn.vuejs.org/v2/guide/reactivity.html">Vue 官方文档</a> 解释了这点：<br><strong>检测变化的注意事项：</strong><br>由于 JavaScript 的限制，<strong>Vue 不能检测数组和对象的变化</strong>。尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。<br><strong>对于对象</strong><br>Vue 无法检测 property 的添加或移除。由于 Vue 会在初始化实例时对 property 执行 getter/setter 转化，所以 property 必须在 data 对象上存在才能让 Vue 将它转换为响应式的。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">let</span> <span class="hljs-keyword">vm</span> = <span class="hljs-keyword">new</span> Vue(&#123;<br>  dat<span class="hljs-variable">a:</span>&#123;<br>    <span class="hljs-variable">a:1</span><br>  &#125;<br>&#125;)<br>// `<span class="hljs-keyword">vm</span>.<span class="hljs-keyword">a</span>` 是响应式的<br><br><span class="hljs-keyword">vm</span>.<span class="hljs-keyword">b</span> = <span class="hljs-number">2</span><br>// `<span class="hljs-keyword">vm</span>.<span class="hljs-keyword">b</span>` 是非响应式的<br></code></pre></td></tr></table></figure><p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是，可以使用 Vue.set(object, propertyName, value) 方法向嵌套对象添加响应式 property。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">Vue.<span class="hljs-keyword">set</span>(vm.someObject, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>)<br><span class="hljs-comment">// 还可以使用 vm.$set 实例方法，这也是全局 Vue.set 方法的别名</span><br><span class="hljs-keyword">this</span>.$<span class="hljs-keyword">set</span>(<span class="hljs-keyword">this</span>.someObject,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p><strong>对于数组</strong><br>Vue 不能检测以下数组的变动：</p><ol><li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></li><li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></li></ol><p>解决方法：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// Vue.set</span><br>Vue.<span class="hljs-keyword">set</span>(vm.items, indexOfItem, <span class="hljs-keyword">new</span><span class="hljs-type">Value</span>)<br>vm.$<span class="hljs-keyword">set</span>(vm.items, indexOfItem, <span class="hljs-keyword">new</span><span class="hljs-type">Value</span>)<br><br><span class="hljs-comment">// Array.prototype.splice</span><br>vm.items.splice(indexOfItem, <span class="hljs-number">1</span>, <span class="hljs-keyword">new</span><span class="hljs-type">Value</span>)<br></code></pre></td></tr></table></figure><p>由于 Vue 不允许动态添加根级响应式 property，所以你必须在初始化实例前声明所有根级响应式 property，哪怕只是一个空值(即要提前声明和初始化变量，不能在Vue实例创建完成后添加)。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pf">[ADDMEMBERINFO](<span class="hljs-keyword">state</span>, payload) &#123;<br>    // <br>    // 通过类似于 xx = xxx 等后续添加不能添加至响应式系统，因此页面不会更改。<br>    // 需要运用一些 Vue 支持响应式的方法或者 Vue.<span class="hljs-built_in">set</span>()  Vue.delete() 对数据进行更新操作<br><br>    // <span class="hljs-keyword">state</span>.students.push(payload)<br>    Vue.<span class="hljs-built_in">set</span>(<span class="hljs-keyword">state</span>.students, <span class="hljs-keyword">state</span>.students.length, payload)<br>    // Vue.<span class="hljs-built_in">set</span>(第一参数:传入需要改变的对象, 第二参数:(Number:传入需要发生改变的位置索引 | String: 传入key), 第三参数:(传入更新的数据))<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h4><p>作用：定义”异步操作”<br>属性值： 接收 Object 对象类型，对象内声明异步方法。<br><strong>方法默认传参</strong>：定义方法时默认传入两个参数且只接受这两个参数：<br>在参数中，第一参数为<code>ctx</code>；第二参数为载荷<code>payload</code>，用于接受传递的额外数据。<br>**<code>ctx</code>**: context，意思是上下文，功能同 store 类似。<br>context 与 store 区别主要在<code>modules</code>中:<br>context 针对上下文,若在 modules 中，context 只能调用 modules 内的 state,而不能直接调用 store 的 state<br>context 和 store 都是对象,但在modules中, context 中还包括了 rootState, rootGetters等. 而在store中的 context 则不包括,这就是上下文的体现.</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">actions: &#123;<br>    asyncChangeName(context, payload) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve)</span>=&gt;</span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>                context.commit(<span class="hljs-string">&#x27;changeName&#x27;</span>,payload)<br>            &#125;,<span class="hljs-number">2000</span>)<br>            resolve()<br>        &#125;)<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h5 id="actions-在组件内的使用"><a href="#actions-在组件内的使用" class="headerlink" title="actions 在组件内的使用"></a>actions 在组件内的使用</h5><p><strong>!!! 异步操作包裹在 actions 方法内. 但异步操作中的同步操作放在 mutations 中,通过 <code>context.commit</code> 进行提交. 调用异步操作时,通过 <code>$store.dispatch()</code> 进行注册</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在组件内</span><br>methods: &#123;<br>  <span class="hljs-function"><span class="hljs-title">aaa</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&#x27;xxx&#x27;</span>,&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>&#125;)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 在store - actions内</span><br>actions: &#123;<br>  <span class="hljs-function"><span class="hljs-title">xxx</span>(<span class="hljs-params">ctx, payload</span>)</span> &#123;<br>    <span class="hljs-comment">//异步操作</span><br>    ctx.commit(<span class="hljs-string">&#x27;yyy&#x27;</span>, res)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 在store - mutations内</span><br>mutations: &#123;<br>  <span class="hljs-function"><span class="hljs-title">yyy</span>(<span class="hljs-params">state,payload</span>)</span> &#123;<br>    <span class="hljs-comment">//接收actions异步操作的返回值，执行同步操作</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="异步操作的Promise包装"><a href="#异步操作的Promise包装" class="headerlink" title="异步操作的Promise包装"></a>异步操作的Promise包装</h5><p>异步操作可以用 Promise 进行包装,进而分离异步代码和后续处理代码，将异步操作封装后返回一个Promise,后续dispatch注册时就会得到Promise对象,进而接收resolve()传递的内部值做后续处理.</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">updateInfo(context, payload) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve)</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>            context.commit(SUBMEMBERINFO);<br>            resolve(payload);<br>        &#125;, <span class="hljs-number">2000</span>)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h4><p>作用：存放”共享变量预处理操作(相似于计算属性，也以属性方式调用)”<br>属性值： 接收 Object 对象类型。<br><strong>方法默认传参</strong>：定义方法时默认传入两个参数且只接受这两个参数：<br>在参数中，第一参数为<code>state</code>；第二参数为<code>getters</code>，可以通过 getters 调用当前已有的 getters 内部属性。<br>可以发现，在getters中没有payload参数，即我们不可以像mutations和actions一样传递参数。实际上getters作为共享变量的预处理操作，本身也没有接收参数的必要。但若要实现动态预处理变量，我们也可以通过一定的方法实现：<strong>函数封装</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pf">// getters: <br>    getters: &#123;<br>        stuFilter: <span class="hljs-keyword">state</span> =&gt; &#123;<br>            return <span class="hljs-keyword">state</span>.students.filter((value) =&gt; (value.age &gt; <span class="hljs-number">20</span>));<br>        &#125;,<br>        stuNum: (<span class="hljs-keyword">state</span>, getters) =&gt; &#123;<br>            return getters.stuFilter.length;<br>        &#125;,<br>        // 若要动态传入额外数据，则要用函数进行封装。<br>        dymStuFilter: <span class="hljs-keyword">state</span> =&gt; &#123;<br>            return (age) =&gt; &#123;<br>                // 注意此处不需要传入<span class="hljs-keyword">state</span>，因为该箭头函数在 (<span class="hljs-keyword">state</span>)=&gt;&#123;&#125; 的函数作用域内。<br>                return <span class="hljs-keyword">state</span>.students.filter((value) =&gt; (value.age &gt; age))<br>            &#125;<br>        &#125;<br>    &#125;,<br></code></pre></td></tr></table></figure><h5 id="getters-在组件内的使用"><a href="#getters-在组件内的使用" class="headerlink" title="getters 在组件内的使用"></a>getters 在组件内的使用</h5><p>getters 的使用方式同 state 使用类似，通过 <code>$store.getters.xxx</code> 获取暴露出的getter。<br>若 getters 内定义了动态传参，则通过 <code>$store.getters.xxx</code> 得到的是一个函数，我们可以在函数后加入参数，例如：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">$store.getters.dymStuFilter</span>(<span class="hljs-name">18</span>)&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>其中 <code>$store.getters.dymStuFilter</code> 是 getters 的一般调用方法，此时该值实际为形如 <code>(age)=&gt;&#123;&#125;</code> 的函数，之后根据函数的使用方法 <code>xxx(18)</code>传入参数就可以了。</p><h4 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h4><p>作用：对store进一步进行分离<br>属性值： 接收 Object 对象类型，对象内定义模块属性名和属性值，属性值内部配置项同store一样。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  // modules内<span class="hljs-keyword">state</span>调用方式: <span class="hljs-variable">$store</span>.<span class="hljs-keyword">state</span>.a.xxx<br>  // 解释: modules 中的<span class="hljs-keyword">state</span>在编译后,会以对象的形式添加到 store 的 <span class="hljs-keyword">state</span> 中<br>  <span class="hljs-keyword">state</span>:&#123;&#125;,<br><br>  // modules内mutations调用方式与store内mutations调用方式相同<br>  mutations: &#123;&#125;,<br><br>  // 调用方法同store内的actions<br>  actions: &#123;&#125;,<br><br>  // modules内getters调用方式与store内getters调用方式类似<br>  // modules内getters与store内getters存在的不同在于,<br>  // modules内的getters方法存在第三个参数 rootState, 其可以访问和调用 store 内的 <span class="hljs-keyword">state</span><br>  getters: &#123;&#125;,<br><br>  modules: &#123;&#125;,<br>&#125;<br><br>modules: &#123;<br>  a: moduleA,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Vuex-抽离管理"><a href="#Vuex-抽离管理" class="headerlink" title="Vuex 抽离管理"></a>Vuex 抽离管理</h2><p>至此，我们已经学习了vuex的一些基础。在项目中，光依靠 <code>/store/index.js</code> 存放大量的代码是不易于管理的。我们通常还需要对<code>index.js</code>内的代码做一些抽离。<br>抽离原则：<br>state 抽离到变量保存，仍存放于 index.js 中<br>其余各项按照属性名建立响应的 js 文件存储，同样将主要配置抽离成变量保存。<br>抽离的目录结构如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">store  <span class="hljs-regexp">//</span>vuex文件夹<br>  ├─ actions.js <span class="hljs-regexp">//</span> 管理actions<br>  ├─ getters.js  <span class="hljs-regexp">//</span> 管理getters<br>  ├─ index.js  <span class="hljs-regexp">//</span> vuex入口文件，管理state<br>  ├─ modules  <span class="hljs-regexp">//</span>管理modules<br>  │  └─ moduleA.js<br>  ├─ mutations-types.js  <span class="hljs-regexp">//</span> 存放常量变量名<br>  └─ mutations.js  <span class="hljs-regexp">//</span> 管理mutations<br></code></pre></td></tr></table></figure><h3 id="完整代码-抽离后"><a href="#完整代码-抽离后" class="headerlink" title="完整代码(抽离后)"></a>完整代码(抽离后)</h3><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">import</span> Vue from <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> Vuex from <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><br><span class="hljs-comment">// 抽离的文件记住要导入</span><br><span class="hljs-keyword">import</span> mutations from <span class="hljs-string">&#x27;./mutations&#x27;</span><br><span class="hljs-keyword">import</span> actions from <span class="hljs-string">&#x27;./actions&#x27;</span><br><span class="hljs-keyword">import</span> getters from <span class="hljs-string">&#x27;./getters&#x27;</span><br><span class="hljs-keyword">import</span> moduleA from <span class="hljs-string">&#x27;./modules/moduleA&#x27;</span><br><br>Vue.use(Vuex);<br><br><span class="hljs-comment">// state 单独抽离成变量，放在 index.js 中管理</span><br>const state = &#123;<br>    <span class="hljs-symbol">shareCount:</span> <span class="hljs-number">0</span>,<br>    <span class="hljs-symbol">students:</span> [<br>        &#123; <span class="hljs-attr">id:</span> <span class="hljs-number">1</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">18</span> &#125;,<br>        &#123; <span class="hljs-attr">id:</span> <span class="hljs-number">2</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;lisi&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">30</span> &#125;,<br>        &#123; <span class="hljs-attr">id:</span> <span class="hljs-number">3</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;wangwu&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">22</span> &#125;,<br>    ],<br>&#125;<br><br>const store = <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    state,<br>    mutations,<br>    getters,<br>    actions,<br>    <span class="hljs-symbol">modules:</span> &#123;<br>        <span class="hljs-symbol">a:</span> moduleA,<br>    &#125;<br>&#125;);<br><br>export <span class="hljs-keyword">default</span> store;<br><br><br><span class="hljs-comment">// store文件夹通常要进行抽离</span><br><span class="hljs-comment">// 其中 store 的 state 抽离成变量保存在 index.js 中</span><br><span class="hljs-comment">// 其余部分均抽离成文件模块,并通过导出导入简化 index.js</span><br></code></pre></td></tr></table></figure><h4 id="mutations-amp-mutations-types"><a href="#mutations-amp-mutations-types" class="headerlink" title="mutations &amp; mutations-types"></a>mutations &amp; mutations-types</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ADDCOUNT = <span class="hljs-string">&#x27;addCount&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> SUBCOUNT = <span class="hljs-string">&#x27;subCount&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ADDFIVECOUNT = <span class="hljs-string">&#x27;addFiveCount&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ADDMEMBERINFO = <span class="hljs-string">&#x27;addMemberInfo&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> SUBMEMBERINFO = <span class="hljs-string">&#x27;subMemberInfo&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pf">import Vue <span class="hljs-keyword">from</span> &#x27;vue&#x27;<br>import &#123; ADDCOUNT, SUBCOUNT, ADDFIVECOUNT, ADDMEMBERINFO, SUBMEMBERINFO &#125; <span class="hljs-keyword">from</span> &#x27;./mutations-types&#x27;<br><br><br>export <span class="hljs-keyword">default</span> &#123;<br>    [ADDCOUNT](<span class="hljs-keyword">state</span>) &#123;<br>        <span class="hljs-keyword">state</span>.shareCount++;<br>    &#125;,<br>    [SUBCOUNT](<span class="hljs-keyword">state</span>) &#123;<br>        <span class="hljs-keyword">state</span>.shareCount--;<br>    &#125;,<br>    [ADDFIVECOUNT](<span class="hljs-keyword">state</span>, payload) &#123;<br>        <span class="hljs-keyword">state</span>.shareCount += payload<br>    &#125;,<br>    [ADDMEMBERINFO](<span class="hljs-keyword">state</span>, payload) &#123;<br>        Vue.<span class="hljs-built_in">set</span>(<span class="hljs-keyword">state</span>.students, <span class="hljs-keyword">state</span>.students.length, payload)<br>    &#125;,<br>    [SUBMEMBERINFO](<span class="hljs-keyword">state</span>) &#123;<br>        Vue.delete(<span class="hljs-keyword">state</span>.students, <span class="hljs-number">1</span>)<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="actions-1"><a href="#actions-1" class="headerlink" title="actions"></a>actions</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> &#123;SUBMEMBERINFO&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mutations-types&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    updateInfo(context, payload) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve)</span> =&gt;</span> &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>                context.commit(SUBMEMBERINFO);<br>                resolve(payload);<br>            &#125;, <span class="hljs-number">2000</span>)<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="modules-1"><a href="#modules-1" class="headerlink" title="modules"></a>modules</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pf">import Vue <span class="hljs-keyword">from</span> &#x27;vue&#x27;<br><br>export <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-keyword">state</span>: &#123;<br>        name: &#x27;jim&#x27;<br>    &#125;,<br>    mutations: &#123;<br>        changeName(<span class="hljs-keyword">state</span>,payload) &#123;<br>            Vue.<span class="hljs-built_in">set</span>(<span class="hljs-keyword">state</span>, &#x27;name&#x27;, payload)<br>        &#125;<br>    &#125;,<br>    getters: &#123;<br>        fullName(<span class="hljs-keyword">state</span>) &#123;<br>            return lastName =&gt; <span class="hljs-keyword">state</span>.name + lastName;<br>        &#125;,<br>        fullName2(<span class="hljs-keyword">state</span>,getters,rootState) &#123;<br>            return lastName =&gt; getters.fullName(lastName) + rootState.shareCount<br>        &#125;<br>    &#125;,<br>    actions: &#123;<br>        asyncChangeName(context, payload) &#123;<br>            return new Promise((resolve)=&gt;&#123;<br>                <span class="hljs-built_in">set</span>Timeout(()=&gt;&#123;<br>                    context.commit(&#x27;changeName&#x27;,payload)<br>                &#125;,<span class="hljs-number">2000</span>)<br>                resolve()<br>            &#125;)<br>        &#125;<br>    &#125;,<br>    modules: &#123;&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="getters-1"><a href="#getters-1" class="headerlink" title="getters"></a>getters</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pf">export <span class="hljs-keyword">default</span> &#123;<br>    stuFilter: <span class="hljs-keyword">state</span> =&gt; &#123;<br>        return <span class="hljs-keyword">state</span>.students.filter((value) =&gt; (value.age &gt; <span class="hljs-number">20</span>));<br>    &#125;,<br>    stuNum: (<span class="hljs-keyword">state</span>, getters) =&gt; &#123;<br>        return getters.stuFilter.length;<br>    &#125;,<br>    dymStuFilter: <span class="hljs-keyword">state</span> =&gt; &#123;<br>        return (age) =&gt; &#123;<br>            return <span class="hljs-keyword">state</span>.students.filter((value) =&gt; (value.age &gt; age))<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>vuex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github快速访问</title>
    <link href="/2021/03/14/github%E5%8A%A0%E9%80%9F%E6%8F%92%E4%BB%B6/"/>
    <url>/2021/03/14/github%E5%8A%A0%E9%80%9F%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 试试笔者的生日？" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a1da53eb599493872ecd1d265241d8f6de4dba60a500cb9346494d883757c1d1">bda6ad0d5f606e7055c23f770369041fc566bf063be9d0864f3ead6d04288c1b00cb2417140c65d130534ca65582eee0b1201c1c69e51008bb935c96208dea06067c461841d8db1a66ec30d3ef01ceab6e189f3811ffc9102e848efd61e71b5e6b9da11d9abcf79e7c25a42b476714aa3e03f0993ccc427830c3e9567c57eb57eee097c6af0c903b1cd8a21ec00c4658fc5d50eec27c0f556f31656fc9fb2174baca141877ef4a9efcf68a222baaccc12993ac8208312801d78d657a224d3e6cb61a7a8a60bdc60dabe975ee26b09534b288d1d298dd1797252d8c00e6edcd0c357272e4f67e7ef7c27c0ebe4e5cad0e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github链接本地与远程仓库</title>
    <link href="/2021/03/14/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <url>/2021/03/14/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 试试笔者的生日？" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f554b4bddbc413a2b4bd27eba2615880f61856a8f8819b2c1d1d50e31f90ddb3">bda6ad0d5f606e7055c23f770369041fc566bf063be9d0864f3ead6d04288c1ba42ce149d4d43abe88c7d07a07df3082b3c9f1848241aad16d61f1ab8cc94760be5b7654c10e5b2ec1d37665316a5a75787cad714dbe8381112aa94677c652f9096d42b4750797cb3f4e7e97dfe22b0016ebb9d04a2db2fbb3262e1f5455429810ae228667fb522964ff23d264fb681fa2c3fd7815a712d3424d556e7635806e2c123bdcd11f5231300f4eedc6df40337a0d7f0504255aeaa0feaecd1fca6a7cedf0aa788a66ed0835ccec95b05b4b356b0a562508ab81fd7f56da702af0809324b5257ca294dbd542d900146f5952cdebf059ebcb57fcecd1db0012c43fdf5f9a9ade76ed3e1b7187ea4129070977ac10dd19b8a831f6552bd11cddbf98d2780e85932c84062ce2b36af4cdee29d7cd4a069127b7460a0796a71375951ebc28cc2044aa32b39991b37ee98da5aebfd6ba2a24bc947f357bc41d88d28b4abe7db04aabe54cdb5adff7ce2c8fc424e8fe9e6cba01bf2708681d8989d3d56c8ba3431b708240bc650a748966ad539ab6654dd728eb6f11fbd9f78355fa7491e6f12c2187454494e65b443835c4b2236b951a9f705f1b4cbe51d841302a103c28b885eb0fe53bb75717a2f236ae248f5f6b2a96eafe3b0a757ac2d7831ec79e7ac8a16c846082c3e65d4347aef7f9771a0cf16685a3c805a5ee520b6cb1901f3dc298afe5ea37d6d3cdcf47fd588222c9ba877d861c964591944949924f0e95c6df0c9cc2468e16d5858355371b468170689780e1728184aaf7fa0b8d428c2ac5006e5023f21b3b0dba2db368067dad4b16ddd71873df2032f66df262113df5b72ddc07eb7fcc3e901f3940b4d75a3bf213bfe9f8603e6a610df8b5512b22a08f88c629cf9f05dfd4f88edc72ca26bbaf599f89f1b18f8ffc219bf24a5a2c8515ea26cc078db3d324c380eea9455c157769754c4f52f6b4e0fee98ae555bcc75e65eea45c7ab7bbce7b6d3e0ed417e786d6923b871978e084e1d62d108e1bf4001abb1919bed4175a6ebbd93f4e85d728b85bf5cdbe443fe7a528b06353c9917d9e858a5fa0fc5d49d48427bfd29634bcea9801644cb3f3d6da6c19ca6640e13d3a2ea1084a206fbd53dcc9b0188525833f9b5ae26381df3dfa7c9662d8a4addbfd708eb91859bfe78fba758d7e0eb13d0f43a9d206a0721084dd8165e29f44aa04259df05e1fa7ddbfd6c705afa2c7959c2384e2bface50f2fc02789e644963dcd82ea07992498c4767b6c0bc895257be9cb11fc5a3e310e1dbafc6a1a8853bd5043e39100fb366c6b8707bf8cb8ea62453739793761c76b71878a1ee5643a040bdd6443b225aafc1322cd295a971193ac10d4de6871f2e07d42eb7b7449595ac088227ab4dc917f4fa2916ad96edcf3832dced496eabd53d3c976f08d781671eb43b5f25cf3144902cacbe5a86b7ebadd35670cf2d62497079a14c0e9c601cab75d15fa9e77aa8b96fd3de2c98ff1f2da96a17e36e721e6a236610f32df903196df5d326b46a1d5fe9eed2746ed646c67dca6897d7964eb54b18f4b54e49ce45531975fcd2d96046f7ed5e3ec39e527287a8a688222c886f62fc03cff8ef82b191158bc0b40505730b6f70c75caf38ec665007acd30e5ea105726bf41638ce26ecce3427937e710d58832cb5d6d46c4fed468a4ab86b75ea965a40d8c78498a357d5caca3f155c5cac6e394199ba1ce9a08666bfbb8585eb7d6873c139348c4c4e4cbb8596a6b268a2d918c1b923a4e3d1574d0b9e8b115e7a1de1442f50315a5700cc10e059e39f44a3903fb792cc54d8787f60b74b182497052f95cd42aa161aa53ca524be8f39a6efbc8e4fffc9096a9de0bc0b4744af974da494caa047455f120daede0128456376dcfe37eb9bc84db80b379b71741d9b75b869f2b2c8626a48eed0d72dae69a3f757f68e9f35a550a234769b43e22c6e9714a836fef1140d063db637597d23c9459519027d59e95762e96f67c066623312558dc578a021a2566a0dbd3354d6968a2a70c13c870635af8d1700d9a0fbfbba3c0a72c94be7317655754327a0be48ea04d1e0e99ff220fa70ba417094c89aca40f59c69bd307785d187286ccb877e15aff51bcc187f5beee64de5313d510130c2094627fc5ab066977a599f7b1976e47cf3024b24610e29e1f1631bd3c8242c285304cb7cec3c3f547660fd2bcf5686ddfde9715ec85dcf04e12f4515930ecaf01692553bb26b31c4036607ec19db0191fc92457d05c1e3a8d88ac110d642d7088a7138924e1e8774bf2214df0ed0c0c309b4eb9f9415dff7a10d830640927021611f6af30da2566377b7f361df81a76f6102e939246841a516bd29270ff20fecadd59df4ac5a22f0a276bf478dad9a2cd77c4ada8c1f3e2127742180433f35f5952cfe70580850462b532684c58f232e7ed5a5e650a8b7640c2115922b696511c3b73c2b7025fc8f0ed3c696eb7e1b49b97731dd2c9ec1cc9b676a370d195f21a76a48483908881509ca0a99849328b47b8f602e6f6a482eb67e9b960c435e20a61f930043ab365320054957f6dd4b1695e05025340252a2de8119452918beadd94e0c3596173066cc792fb42a88ea839489cc0b885f6c3173357ab4ff6de5fa6dcdae0e70c123aeb7a7f65244df5343d5ded98ef877d20f3058696d6f9e1f33d8eac24e21cf8cd63c668493f6c9f02b7baf673510c3153b7b163ff05c5b0c416b67d793ef5d26226c725c981af4f94504f35aef8fa2ccde3d4e57930296107758651a428283821887a2914c541b5749c6a39e5472559d8c7e78bff2c92f886e02467c811214ea7edc5d8846c85f5fc9a1aad5451aa9d804de8e633bab5b2734b2d9c422e417f373e420bf58bca6f728ee8f8b691679245d4e4b5de38c3190271f3c518753f34f1c4cfdd0a10e6f144b429e30413c049399c8babefb0285663f0de9279294e7d552e9ae382981eac64e8bf7e14712d6adf4618734573a4e59a2261877667b02f9bb6c54b22de4524282beb1044f42eacd58c31093f9bf140295557af36fe22e84dabe81a3514ab3b19e7a4d6ed0e630a61fbb690f13fc1b10bee6ce409f4f011898a9c319faafbfe4cb76929bc982a410a72c3a7c3c1ee72a1e0f3ca66a20b26ef1e9af5ad5315412810d89d413c0b789a5bdbc28d6b6eca56012c88b97d4fff3cafe4ca5a418c7de9259a4f3c750e1b7f119133637af7370221501329ec37a997961d153baec335b2c29e01aff3a6c3770b852428ac0966d738170b1910bde09f36808a1ea9b6b8be8f5c25434785439937cc7ace350b740c70682195f38e12eeb80c268347f5b4873cb357dd6c97a905ed61540c3e9fb4621ad50708506a41d76a0be44660a94a2fcdccfc46493d1f2f48cdc2bf88a74d61293849b205339123f100a1a5f3741413317fe5cf865a88311d95ef956c8055f4889f0cbfd3f05328f2bcbbaeb7ee84770f3366ea2721c3c77f7ecd3ec373b8a53b80e6e856aa1309c322a485d91554076149f0835cf2102328470d518a13aaafeb6fc38e84cf0aebc6b500e20ece643c84a1738060ea0de2d9e7b9d405b6029b4dbd860d82570b980136d3139cd6c2c707792c011e7eb272f2e635826794369834ec2b5b9bd05106bda0e8a786afbed995ad77cd8754f7d14475c11d187e5cefaad27ac79a0895a8e22dc83860b50f7a567159e47b9772a67161404783f77ccdf5ac48211e0f23eb6b38514999feadc76487483aeaa1b2c8f98b1fc1c8c51e9a3942b90308ed1390b00f1bd546cbc8b86c96f77c9a7d45706f7ab92692777e17b97cf506f7aca131e5906fb684d46e0b3eede53d38a3804db14f27a615bb305eea27c859bdaddba5aaf7768c4b9b6ed1ff96c55799133ad5ad5711f5b4f26449348860a46cb7a63f40f17c469b3603ffe01ae28756094b5a0f4e2aa47bea359d2b6f2d54312655fb2bcc772e39e33739c7bd798844250d6a9a092c7f7dcbb079f5a9098ec7aca85b8e9668d50514b7d98664af2de1d904233e23cf2707c6dfdb188b766bbc046290c50ae49de8fe7ed47d850070d00bfd1311929ed44e16bc7d2e4f26c2a98ca5342224a763848986169ee95508a9167db3b7f5ba0d531f5022d17defe551b47324fb92296f3a8cc54e76459fa807326eee4fc83b80eea21115bf3aa40fddfbc9c0294af905f36fee6dc65312355e7c7eac316eb22740032494408051de50d935a7d57d54f093d87637efb16c7c7fefc0a84888756c0ff66cfbadf9088aa8e6bf247a7fdca3089975c66616a654a357e83208443c1742ae8c25b441c3f0f12fcaeef3e5547c71ea35516cc958355de90fb57d36f451bb19f0b42293487cde5242ceca1a78c8a9633b4eedadc25eb7c5994ae4cdc9679f1bb846d952dd9b88dffcb0a1671379ab5d4790d7aea721e00c66bf47a7085cb8464a3672ae2417da9bdb4c374768ff92b8e8999917f1fbc72dc9d9eaa887bc4f400d1ece4f8c31f61c79de5fb6a285ab89609c30a45304f560c601e2663112cd57dfad48b0f849c75026c4a2511141b36dca5e5fe9af07f91f5efb0017f010fa348814030bef27420d7f16dcc90f0629faacb7e80cb7e3abb3fcb6d1feed3b2b711585dd67129ad38ce07f9d10fd4f82e765bb06af0164dc68e643d1eed8c5254e557085bb23657949fe1d51e436db3d442922dd1718366cd1fd029947361b84a499b3b9467f2d239760c990ac74d82c4a59072a251d03ce5d0fb64d7b31a0c894c3bbbb96849c357f5af62080ecbe6c87274b6096714efcc35c5c11dc59a677ba1cec1483df395d20706ff42e3b9b88fe583748eb1430eb52cad7f486ac5d7e41991135c85548eac0d84e423839846c1915aed37b731254cd519d6c112300075b224698a431e552de47fd44762c9d31e7314d5f11e990853aa6bfb921d27642d5131dc51096d39cb389e040074c16cd0370869e44d878682d5d46627499bf5eff9e394b735d320b05d5b8e49ac7941cc14c496edb6794afe3d3667c05bcaf604496b17fd0dd8354195748ca0b588dcf2be91fcacd78aea24414bfba75d444a7ec8634fcfc40c6d7979cc25aaeee777ec1ba085fae0219fa2677daedb1290412e066e0246a3ed402adfb594c93a9aeeef6f18cd4c9e4c59f25212d836709c754b1686cf63875455ffd3a1f78525b93d5c0ed024908820a1fa7a9e413f19bb214dcf3837f0adc18dc11e5e7b9addf6d008a9f7bbde573aad4d588a2891f0798aa1b06a3b120aa6a81cca1ad4e5a3e55ce5c32c0873a15b76196c2de64c8858f30a6dcfd3e2b7559fb0d7a127007ac55979235956ce0cd9cb4c19f514d1734b1d297a82172b5ad59e3668b8d7459ed552f73b8fb88c3aedb684424e7717c720f317e17c3ee3b871564bbc33baf478d4f1c6396d9bdbeaf8aa73da2181b4cc8d4985dce6257ac23ebfe6a73e1376a05e85b2654f95b77cb028acbb72b762007eba0e2ac8f4ac8de7341f69d93cbabddc8430427822a1648cb69c16a193eeae70adfec5db4b8e50046077f3163d52ce583c351345680791c42fa4a2ee7b8886fc6a52701ba8d182d11273a1f71cad89f6f22df8e49945385edb430c2ad3ab05c2e1a77f88a7848f36a8aa8980690919ab503006fc15c0c87a2c0395f09df0da16c967f8fa2fe9afa5bb6ae9251fc01bf506a5b8e6505f00452107d3fe6b75cd99904b8861a485fc765b02534dac8dac19c4dad8d4e1ace25f4bd57c245b480953a1cfec2ea8c0ea64dd234de219f5e67a2df4f55e14047e0e0760ce19a5807d6a4a2c1081e575ef396f4548f281b3cd3ab0b094d48d0413167e727da98f34bd02841146d25548a60467374786c0124f85341ce971b5b2e240239c2adf1c561758a4e1a5b35fecacd57f93987d30cc0d502bf4b0f1670198113b565193b6923e7691b45493c369d7f0f16f4d1bbb81d3542437c06e5807684b8fe8d25253d83f3a943a7c8ad31fd8375c0a86e8c31152d5ebd09e460d385a71d60ecc55523e2d6349351ff4b122b5e799100796e278cfc303b668335b6e9fc0fdc39f3139b5b2cfef239925519a3c8551ae2f01f34d34ed7e958558be39bda9797ce0ce3eee48c06bfe4f44b62b1faad1d923c79ad881f5edc2e1cdfb7308f853954945b91b633b8aac4d2955486569ea4920ab296789716a3da5dad4e41d85e8095224757bfc56dee1b5f14aa1efb57e053740cad286cd7191fedd3cb8c965cf0fd1e66045c1497910c5a9cd1676154fbf5a7e50de85c4571a6f9d9df087be2231fd04313f16a2fa1949e114c24bd60d547bc8585f49dc2f09870237022452f87766e7793020556dcb442265a2b2a4e7caf7bbc197ade03904e6d2856a0e64d28d22f9cd9e1900ef8de0f698c17644e450a9a728990e27c38011f12be1da97623be1f023e8fcbec32f3ccac67f171467ae433f85d2d1c639de4df3cf97eb57245d449de97d0a16c4ff8d6c091f3d979ec2ddf38665c6ed84d1133d6ea78a419df25ad5ad2b8091f83cfffb4ba58c786427b0349be2dac5550d63c74688ce67b4a9357e82af343414b58aa40e387d9edd1ba9e50ccdb9990c96ac4a8faf7eaf41cff44de3b6d0ec41c04a89c1f07c48eec4773f9789db4c009a5d6dffdd6ff205fd3b50e8d6a06b3f24d58f3d62723ab3279087afd0eeaf992ccffafc9665d114bf21635290a0206a2374d0c7d2f3593c8ab54c72751e6a6f421e7e36092f08c3f3bdb73bc36afd06684ec4d8779e7089c08a681a5add590bdc7e8bf34e9842cf491c2cdd79cdcd1837d7d06f4b971927300cfe2a663bc51eeb7a84856b2ebcdfd70b14b4c56cd63aea0d2a7b274c1442fd89b10381e7e169f564b0869b49f8ca367764026f756292c1949bba173dd9510c72277db7d0e8a3e8327e7749a882c9b40515dbc85cd43e0e350ddcf7577bb3d3978be144e24150711f60649fbc673a7120d0e62619e7d09b751c72b1772f9b54704fbb4a041cdba242baceee05a43a82edcfbb61a960cd79a9635df8008459d474537cf25f93d0068a6721e4eb037844221d883d389865962752c6b1127eae708879b4d2f4fc599e4ae3c1b20b2fbe6d24a56a5946a8fa83efcf926e4459bb1a5fb837bbef57038cb6e9bfc32c7e9f3a79dc871481f543f744e3ef96935a1b1cff42d5758723f575dfc6b4642eb08fad3b638fa7f057574237126874c478bb02f885a1d71b527d97c7169e738ff826226b9ee541bb97266079493526e4f576160f8e01def59266e55d20ded405127665a22c65f428cce5d6b98f137c2e09067ab3f04b37ad8bc8cc20f63b9f38a67a86a16be98b38623d8d7c1bebbf885cc5e34a47891783934f66a8cbe2ceeaceb8c1f2f75b2f6f80da249821a62a0d2049a370981e84b9ff9332288c25b55dba1e17b6bf0f4b450e45b31867d42e5792b75b621d54cc76141bb7c7469aa4910489971bbbd3c37aef0234d2f9017ed732ecd7e18f28d03e048ecfd2190b436a87421303eece6da0046dcc800a78b59a5140d61252b03a8e07161784f2c31196ff2b119463fcb008aa69e786b8a2a65e867513563696220cf4d72c05c768a25652bdbca219e2598cd358c647a7eb9fd4484a28b9865ada1edc09291f54e3d6bd604b6bf60ede83a39b835c9ad93d82a745b1df75201949157a7b7e1f2bae2a4368521c78cddbec133e5afdd79a3c915a2fa4b2079c25e4968743921ebf6c486734b1384ef619f6fa4290b07e7459dd6198344a6ffe621aef81e1ce727e0a1d049e0343c1970b074124d3776e41c652ba09a56600de0d161190792cc24b989e1f3ec3859e05b6c50aaa9b508fcb8e3a3ab125cf2fecf721c55d232a1d483d95bf796ef50a9eef959aec7c27986e0caf19c5324db4a69bee178fb586a596a3d576b6005dd5e5214d58f11a9c149a579136e81ed27f5633f96321e33ffa32bf49c0b6e460c6f9959b63c0615c5bb230ba849cec82de1c78457ba94f1c7f167daec8e5085e611721f3a36153a3d79b423e2b2ab63e41d9bda8b3003a9efccb10ac4308493853a4ad3553469809af9e859724046dd01158aa83219bf9e361f62f67bd5c6ba2e12de8482950d617eb633d8f96c528f5c3f47da13168e0c2222d18d3dfda1682ae1d4bac214f0aac4c627395a3891c1e0786b8c4c146ea5f18ecdb9f3173f6de49f999545f9f3c782f35fb65a2c2b8f4a98dd2ec929e53a50af97797f0565e93de2b9a7286933b3fdcf2389c291ae4156575eba351ccff627480696fa7a7c81909d06453a442275bdd5a0d3a6c95bf927660a265a8b0d0adb416011db45fb04187e27b61b71fd4c2f892cecd047cba263e048d7dc8ddefcea0de9b0c6534a2e13d62061e32c1d40316147bce2d8d1cb21ef5687609ae9219c91b9c825bbf1d5d3a2332568e2689fc69e6df4c72045c547579ceeba4ca725cb3d97e92dec2210bd9d603b1a2ac0d277269cc7aedd4ec474918d537595a89e3183eea7f86719b38bd1e9764a4bb25ccbd05443b38a5a136c9f8b5ca5b16654a396fe67264648092b8e41d31e7750c1e0aa514d243c2c7493297dbd6624be096dc5a430f5bfa65988e4a0b84142ecbcdc5ba1824e0edfc754b9ca715a837304b29b43511ca1b0862b4565c9e6e49cc0d7d7918487b5a7a4f0113319ac0b98f629f0c007417cd4b3d10a4800f169163736cdc249fa23be74d57e91e53615d68f1f59b7de7daeb8651103aabaefabf0955c7b89e1827fc55f384007570dd702b8a5ee803c49253573f6216182d9bc7e92c415e624792be8a7dcb888d5a0a30fc1c8efdfb7e8c37ad4b73fd131cada6e64a9413d9c8f88cd47e1a6503a46409b259bdcb57c14f170837ec5300d89dffc7f79c2758d3f944f56e7ec1d2aab939d6a2c79454ef85440d28bd9dfad4cc03444701be60688db54dfbf641124437f2a62b290bd145653ba9d2ab45231d6d478f3fe28a9a0a55a0a6d5b0f011d943c6f931bb8d64aad8603cecbefe0d6a11375bf531f87760a172d5bb4ca8aff341269f912c1505c0d8532f1525ef5b3c3a747f951e7b80d73e2aec6ecd0578165c00c1dce644bb44a9c765427da18c72a37e1f3305aca8da0ae540acde49ed1ccae85ff346f4ae12c9c23bfa35f5332f0a967558090daa2a9ed506da74f3b01eec685e15cf72a44c8eaab07bef4b4b4f0cb546ca386f005c7c8abcb0b49a184cefef3139f8c6794d8c2fe00d4eab9b0f9780e4643e988b827205203cf1bc6d88b8cd9accfc000df3f49f190d79c17cef0c256d82602219be3d1b9ce7ad408ee00cf4d309cd53b4cebf8c62823a855b4a44659986ee3b491b27f3ffc07942bf069b4e88437a786e2a877f621589c3091298f07db5f6331eb95ff21491130628adc8c846f46af5c72da65592d8164123361ab0806869e90fb8093822efe850b6e6ad318d32d1672f86219f1374b227565518b2f2bf49d8b8660659fd57ba912e27e4e6cfe2838813718bb3a66ea8471a3130295ad1feeee196b86112c3cb25519036604cc17cffda72101cc28ba15d95a8d5c979dc268961e02a83049b6b289b638841a7e5f094d5fa8756290cd2c195adae189e40970ac42b51af17b1b28e3b7a414ddb2655bbbe4b87896cd4f68fdc6c0d98e3d42c05528f624f198b4abad9b3fceb617f34ece9425b73ecab69bfc29dea8c1f661131ca6a28d2249b76781e3eb58ee5fc361d8b18006a39acca45aae0d01d233815b851607fbf6e2afb986d0ef3628e0b02c2cf43f2abf449e97d51a5deb393bad549967f4222a1d2942d26f0b0fb852589c1f5caa8a53ad645589082bc4ea09ec000e9e69424444da42bd046366c3e4e162d1a99193b2c02e57f6aea47de049b24cb94ecc93179f3f6efe0ed549f5a66c8cc89d0069558219a638149718f144db3a4859c693e790fdcd9dabe5b76591c4209c2c3f3f5478bd510fd533562ba5145d86bba3fa93a95d4696b2b4c8e6f4a8868a00f3faf67b899a091aae9a08e43f96fa7e4fca0486b2a2b64ed29cc429f350c03d03e6d1207d7a40d7131704b6760f608704f296153dfa09c3670b3e0ad8b8039a1143a7d79040f2de0dc922603a8cbaf923c46907d6f8c9c69cbb4c9bbebbbf5f56e8726d99e6781790d8884daabe01dcf00388ee51193763ed53616d4d1d5949cc7d936b99b74ccf424ee7f6400472f59b924cb8616a46e21f6d3bd279e2a7e330cdb830431f9dd0e8f4464c95ebf58839b3489f7c2656c28f1813937b20076be50bef1aeebd8eaee50e4dfeadf374dad68136f905f1ebc0ab3b94b710075317d1e15bd33ed6061345583a18af9b497f0dae99f0575d6c90790ebe4b931f419877ecfedca71a35235de16eefa02efbe4596f87f00f8a196dede31867c0d10e3821c6fae789a82bf89c2083ca9f23fe2e6bc7b3da0eb847f573aa84d3faf0035b1a65815359948c8c59670d9a97a93a1e7afa6019d521b025bc2491dfc5b362fea66548eca4a719b95fcfc2cac14cb2d1f4d2373421f3c6cc7ab339dc7f9a6a3982075e4b4a0d3669c315ff353a988f94f794441760b35a88e726ebb883d37af077f8da4769f7eec7d54f00e6098b1c5a5bcaad71b1c86b88e7accdd6aedada027e7912601b444f4bf728ecf40d478936c7dcff7deba6819dd065b2bef410d974213b6532d6cc9981ae8ca48a63fc59105df1f10a12014f2e96aec882f378f8889b908065a778c5a3f2ed7072016bc825b43ce09ab046ac6f492185f27a7f304f4d1ad03f3e1b6b563d616960fc8559de0762ccedc096f0051ef3f46257fb7911906097a019b0b3ce737899b05153f35bd4e9cd7573b02aa9f6a973c64a9330731a1ca41052a8a2bae087eb92a08d82882c44fcaf773de250dc0998459e3e232ce358636f28d57884f329d4ed3dcab007812f8fe5c9fb7c578743dc3c355071b5c0677f1eaf8a6554e7a7b7ba13f615c5d48e85e973ffb35f11aa2726a93c783c436075bbe763526c8cfba2b54b860eff95981af86fe768165143e366fae7546881717c41d4c9c18c3cd597e79f69a9a537dcbc8de9afcdd1b3a9e390f14026fd39e7e2a7421fb6b54a19ad46b141c04a71485417d9aa725662792b03a40eff7f1c5e0c5d0f70e5d6e93b7eef698130535e3d24d5aba57a3c3094ba840ba1aa02cf301e377da47f3190cdca5304590693a9a39147232b4671b906502d805d15d5751b9475606c5f5ce1b3aa54da04eb90a5999d1193e1706602d6dcf0a0c64d3ff3834a1c7babd5bcec3a9da4ee1c78b86e2e2545943a85368f847e04f16e6b6488e350d08633dacbb83ab321f3d6aab7786974bea5fd2f473699ddacabe4e22c4c3c81f78007072adda507747b8d7ec43fccd0e55e2cdf7504d68a6f36f051efb3cc55e25ef30cb1e8435ea3b6d97efaf315876098ee90b72a938c3e9fea6f1ba83a86ee8fb8699751c83fe5d0da14ed75c893a58415e5e50ac0cefeb2a0f4e989473ebc1eee5bee9cfe488680cac75e1876224f3c1fe9ed009bf6d15f166319523f0bd3dcdfc544f1e6b760bb7340c1f6674a1a626e6c654264a8315593ecd4374b819c9ed3b9344932efb690ce4620d488e04aa442c663ecd610067656a5199827019a773bac4fd102e956fe39e133c0f7fc472b40a98b309f493b3ae11fb0037a18823a2b61767f59a64e0678e8a6a1fdcdda0ec155b44386877478f369a4a654788bfd852a4a4069ed4c3f478b2fb50bae9193807d9e6e635a8bf704d8e068178c378e9dfd8e0ff684b40ee5dd22cb4adb61f6b6ed7d6c4dc1c80c6022331950d0ae357a168a171155e08288733b0c293ba8667e359000622c1256b0fbb5c14827092683b7aab0955370a2a68769e40353365d28798a01b55ca11b49023c64b2cd2305aff90a5f489583105404ba631d09bc155b8296a5c822e151b02c2f6cbf932a71ebf42e5a0dd17e8e2bded263002f6772427439deddda4695c623a1a35f8179ecc30edf677739a6964c062e515c4cbb5f076283b13234bee51463251ad78cebbc9afef5ed3ce24e4c770ce51f989b08fe72dbd8c83e528df847870baf70bcd0c6d6323f7a52d517a62a5c4e22ffdccad93e00a35316bc0c115ae6ce7e3eac09086cbe50c4a05115f20e3994ad6c22f9086b8ad22d4bdeb009d619034976c7d2300bc4b98b42078f6c45f889d3adc5c143b234aa9e2afaca81e00865bfa627d1ca59eb2698cdd9b0eddd4a398b32bd33a9a4a52c32a65b284a4be297d0ac9178757766b956c4a4807e0255e5403c1f9e054edd7b5389f568cd6dd8aadbaf0378f108f39ded64219ebc75953bff08a6e4689f5ecba53804165d77a4f6d0fa01ed3febd27c73b466a5b1f380a6d63fd6eb480ee3bd622aa85fa4066ec8677cd706e152e5e06dc3068fc94d39db9df5f026b67ed0a1e41a086abc3ce09fa655a91a46161f7aa895af671ae11d99fd0c66869460bf38281103db35110769891d6a456ba28394d3063bb1d8041d9b3f7abe48e0ad37193d6463f59af55225065981158df501057cf1c87b4e530c57f4aeb8d3f4ac1f1db1001c3dae2f11bda6f5ea522381cee95adc71508d4868049620bab0f8357470b239d239413dc12b3676276b14d7123bf1752288dbfde49ff6fd4127ad4c78c4859d7476a265e468b05664300ceeb250b4a197ad629f6442ab28740750a41b4df081cd2b065f0abdffe60b69b73ce5ca559e770050759bb5dc9882222a7b4c9a0deba31688b72686f8951d49be1249ddff89dc5b6576a5ea6b6238a89f286bcd4cb337ee2bf8f6ef75779098a84a50735844fb5efc8df84eab4c34bc7cd03a52d1ac4dae7e6de58747c742b2ac037404c8998109eaf86b87f96ea41b2a82fe05c0d3ab768a883e0e6085b07c8dcd2770f83477f198855cbb338bbaacd0b2249b5d3d24e79e48a11b209478fe21c7915765f23f8aefb06e5f99a82b6fef21a2e82cd26043ec205bc0c83a72ed50ffc9ecefee29159aa7d7e7f82032fa2701d226aed19dd3a1c5aadf64db064d5bce1b53271a2dbb2c4df1aaad684551c0d7ba999ee917a4f549423f0c6cba46764ccfb5646ef1d3793d9275191afb153472323f4d8326ccb20164083cb119e547f5607897c28b961ca01e15b1f61022e3eaa56d89724109ecf58953661948925a4e12b32726c1353a64ff6b20a0da718632ebbb61d2cb637bb1fe000ac93edf4a08b198347bcbb96b6d154846224ee0f3ff5cd4bcec87f7498a61728d32e6f9a323abc84e9eb2d3a060649b11a3908ce7543a4c89e1088f90dcbdf3143dc3731466bcc8a422f88549a07aaa840b016763439847c86335b49ea686cb98f4ff2b1a17c6c468be086f8550b7ca5f972b2595427755e214aed54b0fe59d95189fa74cdb20e6f4baec2b76a4aa5d88bf6d72c2072e65c4a218abb0bc02af94c686d9a1033494fb304f09ec3ce3385249aa2c3d13881626c347d99a4473ee9ea86afde7d51c71d07eac874826e062563f0e32a68290a786c123d27da782b4dfaba6b3d8b075a823c61f31b08355aee4ab239a9bf04915327afd3fbfd5e1ba83df0326721f8d06ecb2feae8f92a86751f23ae3430e6a321d727bb03c779311e3f34133e7f674aa52ae968168feb7cf004f6fe48023ea71512d9145494dfbb51b490f251c3a3dde36a330d138a5c7016c184a5d4935f3f322179106943c00d17366270d0327fcb53a05c49c0b5bf62cd16352a616d32efbefe762525992348c82e46751c203f0a664903c09064fb814d45fdb5a049a395ef3307addce74a662ed35054268c2043c1bf9267e4b9109d833d0ba37cf35108d50ed98cf18a66e727b945fb7ea5b3bd6efcbb8f5cae340f5f9ab54d46e0c3aad8d3d52cf991b8aad324f3b2938d2da94d7162d42986e1ffc943953869d8adf2992af2537a5f8053029921ed32e0dfbad483c5d0bcf3555f070f1339a065f0e60a90f6c279ccdc57ee0ef8fcf1d96be96e7015015ca309b66e510bee627e7874156fe7bc1e918251b65b091ee5b9b6c3d7f55cb5fc2ecf7548c4185e8628f035a5b898f3145781c65bcdd00f361d7b58515b1e36bbfdaaa1d644126a3dae20bafc837785e611fbc1381cf5057cf4f0889c3677ebc899a5f4dda9bcb698fc27a0be92c7d878522a3cdc1d095fd1102cec207bcc2fc45839b4ded946656063f54f8708d2a7dbc09f0d446bec16fe666a3860703397d91d7455f1dda04c92d76268a2718b2a551cda047f0a9d3ab8401f3acbce4d218e69ca92cbb2e3d9301d4a5377a45f134e09eed1301f1a2cacc87c14118ca7c2781848bb3e78bcf0daedd97f0bc553c88923df2fef92fb514d8652e48a561bf80e82dd2c387a7f4380017c525da91075dd9a984acc99cfb4cf2a1ec7cd087367f6d7274ae9de74ac85098a0fcf77343ebf58e26d2b5393a7c7669d547bc10ae2e5650218960f8712ce573fe1abaa004361f654d92f6d9c3cbc3065942a5e4799811a76440624e9e6a469bc9c052e20a8fab801273f6c0559b4b833b1f74724000a555c7f8c9912aa8b70aa6309a723e3235bb020980d3736a6dec44507c8753849c0f697aeed341643195103c0d9043dc400107d605806dd7c65421eb8981af232c4d1b941400ef60e77cfc092b47d9210cb2439d7913237d21ff45ee8ee9f6e53492a9c4dad238705051ab7e1a71321e97ebc1a29f23465c55bd5c577e2f5b42676485bb59f446f286149fe0181144caa1ce4dc61ccd756cad714005fda377b5bae1360abcd1b4d17d48c0a19f3dd45d5ed4d700db344cd2ba48c381b18f2bbee1354b23b076e0a1fac48605f570d7e40dab9126cabe3ff7f265bd1e9555fa15ed0cf9a3863a6c87c493a6816d667a05a38e9f965bfd3dbb2cb16148b98be2a6822e384a6bc4e39c6258c33805bc44fbd03a019aaac96028d3992ea0ef24a171f6ebd6da93eb692e0b4087c17fcce736238039a4e8ac6de427475b7d6a06da8741a687cba26f7d4d3b7ba4fec684477256c0d80e663ff4577499f8150a3faecdd2c59f946a33f4e886328321c815ec3bd243f2f23418cb5774fefd0cd0c8aeaa7c1d208423cd12967bde5c42b976a20119808f2932fa3f4c2ffde1b26a6109b2a83b5104dbab35b0d4b5b671adbb1d9510e2a3612541f0410efbe55f4a51841072dabb5aca0c730bd08a7a6f13828b48bbd4bbf8a9026de350b53aeaa82bbee5fb178fc6e1e5d2d910e22ab9bb57b64a973970b9140e9a31668dd928823f84399912c95a5aa02458ebc069e48c287d229a4fab66d55c75ec7b3b794c25b4986b61d1ec14ea9c270dce58fe99c7ec3ae2d312772f14ee0600a14c3747ff7f404078502bc5dc97d897da9f2709eaf6799c702781a56305de107e13501188c63653df1939c52156f1206723b872020dfa921fc71a07d69020b310e06be9b94c26776d8cf779731d3a42c8954c1aa88bd87495da387d514b55ea93ee77a6ffb370fbf2a76de03a6fcb697b7f05df8a17fc7ef865c4ac4e000a1eb47c8c2c6544bba605a6f64777db35614aed0c69ebff79e2f6ae73daf9a88004ddfde564e59c2b2344ff4e4f733cee3df2b0df35134ffcd1162f8a4d33b93be1395ab1f8beed5ef03503e3cc57606169a925ae9650363100fbce08910804912905eef940c80c4d91033d53e8aff9fcd153a9a8c056ca359a41750d8b8dff0dbb11cb1e3dd476495786eaffc28543c6e217f80bd54bc093961fb6369269e20d90c8679355be207c1ef0cd9174d32123cbfec6248ee1055a7ccfc28148ea832c50ed798047a7f0b1b09964b04397bd27b4e7c21e6f3887920d62c347bba85dc9be38771a15ba6ba03e0ac5991b830bf6fdeac2652ba84f8dcbcae6e0fd18888fd71ada6977e9905ecc1ec6583f16afbcb24fe4e5507ab294530bc0c2078198e17adb75d6384dced19ce21983248a97165509b665f333c6b1872f913218f4ec07d560bcefcbc41b6872e252d7a7c3884172e46f51f355fbe05d8384d8f3b12d51f12044acb1dd974c3737e5a7902d2a8c5da5049877b4a7243bb122fdba9dbc29551495ca09d102783465780b91ffa1915f570337eb8c3a419de11ac28f1f2d0c38189fd0d5425ff6504e1915be93616e8c27fefa96790ff00083adfc80a3ed0226d82bdf8e2ba3ffaac70e82f73e5404645c871bd597423d2484e06f467abbc8729b37317e7a8fa7e67b40e437567f5c36abee96cc604246b8f14528d16135ea600be2d3eef74b1ed76aebca5a980acc803a8a6e6ffee9d31329c922761e7a75c2bd4fbe211a06cf11d8733c48de33a4c0e0fbeccf50223555de4b8643762fcac7915b1ec02bc0f54efec6ad7845e7a1b43fcca71925819df74b74fbd1a6a813b6b78f45e1268342eef7c8037637c60fddce2e367b83e172ec80037bd09afdbd0341a40883daf8e5188555fb3b3f9af2aea9c119057f07238f3764623b8b2b87f318e9cee96c5fe335047c4376553bc1f98e186f1636b25857cd22313536c8ce31489923e1e07e003903b95ef658bbfec9e67f9514eb8f2b84e233b1ac56345cc8b72335eef24ab32ad9a3ae4c03af966939c185b432d3398120cf2e3f6eb506b3fcb6246e2b088577b34768024a00d7b45e678a6ce80fa25ab9493ef7c308fcbb4329a9a4598acfc648093824c09671a486e105a78ac1712797f56149381c0cbd032729a51ca69d628a023f4eb8f81311ec9d223061522c1e03b7a723a4f39f9c6ed0d8b6d4accbe556aadea48111057d7aa7326ca8560b50cdd9a0f6ae822b35c6b9c633ef9d0673ed76b78de132f3c14efb2dc2db4805b258518ccf21dd183d71876ca3de027388dfe41bcb1784bb66bac51cf2b2c5af585cc517d1dad9a0a4ad27ec229e7f55fcc7bd5e38f38a191f43ad4fce1d8e2199c3640e3fdbd84bf52278f7d97267a35c721135549303422838d225191b7f8ae5be99ce55f6ea8535ce</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客提交失败</title>
    <link href="/2021/03/13/Hexo%E5%8D%9A%E5%AE%A2deploy%E9%81%87%E5%88%B0%E9%93%BE%E6%8E%A5github%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/13/Hexo%E5%8D%9A%E5%AE%A2deploy%E9%81%87%E5%88%B0%E9%93%BE%E6%8E%A5github%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客deploy遇到链接github失败的问题"><a href="#Hexo博客deploy遇到链接github失败的问题" class="headerlink" title="Hexo博客deploy遇到链接github失败的问题"></a>Hexo博客deploy遇到链接github失败的问题</h1><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> http<span class="hljs-variable">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:1080</span><br><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> https<span class="hljs-variable">.proxy</span> https:<span class="hljs-comment">//127.0.0.1:1080</span><br><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> --unset http<span class="hljs-variable">.proxy</span><br><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> --unset https<span class="hljs-variable">.proxy</span><br></code></pre></td></tr></table></figure><p>执行一遍上述代码<br>接着执行如下代码</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">clean</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure><p>完成！</p><h2 id="2021-3-16-更新"><a href="#2021-3-16-更新" class="headerlink" title="2021/3/16 更新"></a>2021/3/16 更新</h2><p>通过DevSidecar插件代理git：<br>从gitee下载DevSidecar: <a href="https://gitee.com/docmirror/dev-sidecar/releases">DevSidecar</a><br>安装插件<br>启动所有服务</p><p>记住你的代理端口：<br>加速服务 - 基本设置 - 代理端口</p><p>git 下运行下述两行代码：记得将代理端口(我为1181)换为你的代理端口<br>git config –global http.proxy <a href="http://127.0.0.1:1181/">http://127.0.0.1:1181</a></p><p>git config –global https.proxy <a href="https://127.0.0.1:1181/">https://127.0.0.1:1181</a></p><p>然后就可快乐的 git push 了</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Egg官方文档阅读笔记：Egg.js内置基础对象</title>
    <link href="/2021/03/13/Egg%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%EF%BC%9AEgg%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/03/13/Egg%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%EF%BC%9AEgg%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Egg官方文档阅读笔记：Egg内置对象"><a href="#Egg官方文档阅读笔记：Egg内置对象" class="headerlink" title="Egg官方文档阅读笔记：Egg内置对象"></a>Egg官方文档阅读笔记：Egg内置对象</h1><h2 id="Egg-js-框架内的内置基础对象"><a href="#Egg-js-框架内的内置基础对象" class="headerlink" title="Egg.js 框架内的内置基础对象"></a>Egg.js 框架内的内置基础对象</h2><ol><li>Application</li><li>Context</li><li>Request</li><li>Response</li><li>Controller</li><li>Service</li><li>Helper</li><li>Config</li><li>Logger</li></ol><p>1-4的内置对象继承于Koa，5-9为Egg.js框架扩展封装的一些对象<br>本文介绍常用的内置对象，其余内置对象可参考<a href="https://eggjs.org/zh-cn/basics/objects.html">Egg.js官方文档(框架内置基础对象)</a></p><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>Application 继承自 Koa.Application，是<strong>全局应用对象</strong>，其意味着：<br><strong>在一个应用中，只会实例化一个</strong>，在它上面<strong>可以挂载全局的方法和对象</strong>，同时可以在插件或者应用中<strong>扩展 Application 对象</strong>。(全局/唯一/可操作)</p><h3 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h3><p>Application 对象几乎可以在编写应用时的<strong>任何一个地方获取</strong><br>常用的获取方式：</p><ol><li>export 暴露函数时获取 Application 对象<br>被框架<strong>Loader加载</strong>的文件(一般常用路径下的文件，例如Controller，Service，Schedule 等路径文件都被Loader加载)在<strong>暴露函数</strong>时，其函数被 Loader 调用，此时就会<strong>传入 app 对象作为参数</strong>：<br><code>module.exports = app =&gt; &#123;...&#125;</code></li><li>通过继承类的实例访问 Application 对象<br>在继承于 Controller, Service 等基类的实例中，可以通过 <code>this.app</code> 访问到 Application 对象。<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// app/controller/user.js</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>  async fetch() &#123;<br>    <span class="hljs-keyword">this</span>.ctx.body = <span class="hljs-keyword">this</span>.app.cache.get(<span class="hljs-keyword">this</span>.ctx.query.id);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>在 Context 对象上，可以通过 <code>ctx.app</code> 访问 Application 对象<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// app/controller/user.js</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>  async fetch() &#123;<br>    <span class="hljs-keyword">this</span>.ctx.body = <span class="hljs-keyword">this</span>.ctx.app.cache.get(<span class="hljs-keyword">this</span>.ctx.query.id);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>Context 继承自 Koa.Context，是一个<strong>请求级别的对象</strong>，其意味着：<br>框架将会在<strong>每次发生用户请求时实例化一个 Context 对象</strong>，对象<strong>封装</strong>这次用户请求的信息，同时提供(暴露)许多方法来获取请求参数或者设置响应信息。<br>此外，框架内的 Service 会全部挂载到 Context 实例上，一些插件也会将一些其他的方法和对象挂载到它上面（egg-sequelize 会将所有的 model 挂载在 Context 上）。</p><h3 id="获取方式-1"><a href="#获取方式-1" class="headerlink" title="获取方式"></a>获取方式</h3><p>Context 实例获取方式一般是在 Middleware, Controller 以及 Service 中。此外还有一些 Context 实例的获取(如在未发生请求时，匿名创建Context实例等)不做详述。</p><ol><li>Controller 中获取 Context 实例<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// app/controller/user.js</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>  async fetch() &#123;<br>    <span class="hljs-keyword">this</span>.ctx.body = <span class="hljs-keyword">this</span>.ctx.app.cache.get(<span class="hljs-keyword">this</span>.ctx.query.id);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Service 中获取 Context 实例 (同在 Controller 中获取)</li><li>Middleware 中获取 Context 实例 (同Koa框架在中间件中获取 Context 对象的方式)<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali">// Koa v2<br>async function middleware(ctx, next) &#123;<br>  // ctx is<span class="hljs-built_in"> instance </span>of Context<br>  console.log(ctx.query);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="Request-amp-Response"><a href="#Request-amp-Response" class="headerlink" title="Request &amp; Response"></a>Request &amp; Response</h2><p>Request 继承自 Koa.Request ，是一个请求级别的对象。封装了 Node.js 原生的 HTTP Request 对象，同时提供(暴露)了一些方法，用于获取 HTTP 请求常用参数。</p><p>Response 继承自 Koa.Response ，是一个请求级别的对象。封装了 Node.js 原生的 HTTP Response 对象，同时提供(暴露)了一些方法，用于设置 HTTP 响应。</p><h3 id="获取方式-2"><a href="#获取方式-2" class="headerlink" title="获取方式"></a>获取方式</h3><p>在 Context 实例上获取当前请求的 Request(ctx.request) 和 Response(ctx.response) 实例。(因为 Context 本身也是请求发生时被框架实例化的)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// app/controller/user.js</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>  async fetch() &#123;<br>    const &#123; app, ctx &#125; = <span class="hljs-keyword">this</span>;<br>    const id = ctx.request.query.id;<br>    ctx.response.body = app.cache.get(id);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>Controller 对象是 Egg.js 框架提供的一个基类，该基类有以下属性(注意基类中有ctx,app等，这也解释了ctx,app等实例可以从基类中获取的原因)：</p><ol><li>ctx - 当前请求的 Context 实例。</li><li>app - 应用的 Application 实例。</li><li>config - 应用的配置。</li><li>service - 应用所有的 service。</li><li>logger - 为当前 controller 封装的 logger 对象。</li></ol><h3 id="Controller-基类的继承与引用"><a href="#Controller-基类的继承与引用" class="headerlink" title="Controller 基类的继承与引用"></a>Controller 基类的继承与引用</h3><p><strong>方法一：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// 从 egg 上获取（推荐）</span><br>const <span class="hljs-type">Controller</span> = require(<span class="hljs-symbol">&#x27;eg</span>g&#x27;).<span class="hljs-type">Controller</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>  <span class="hljs-comment">// implement</span><br>&#125;<br>module.exports = <span class="hljs-type">UserController</span>;<br></code></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// 从 app 实例上获取</span><br>module.exports = app =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">app</span>.<span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-comment">// implement</span><br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>Service 对象是 Egg.js 框架提供的一个基类，其基类属性和访问方式和 Controller 基类一致：</p><ol><li>ctx - 当前请求的 Context 实例。</li><li>app - 应用的 Application 实例。</li><li>config - 应用的配置。</li><li>service - 应用所有的 service。</li><li>logger - 为当前 controller 封装的 logger 对象。</li></ol><h3 id="Service-基类的继承与引用"><a href="#Service-基类的继承与引用" class="headerlink" title="Service 基类的继承与引用"></a>Service 基类的继承与引用</h3><p><strong>方式一：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// 从 egg 上获取（推荐）</span><br>const <span class="hljs-type">Service</span> = require(<span class="hljs-symbol">&#x27;eg</span>g&#x27;).<span class="hljs-type">Service</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Service</span> </span>&#123;<br>  <span class="hljs-comment">// implement</span><br>&#125;<br>module.exports = <span class="hljs-type">UserService</span>;<br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// 从 app 实例上获取</span><br>module.exports = app =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">app</span>.<span class="hljs-title">Service</span> </span>&#123;<br>    <span class="hljs-comment">// implement</span><br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Helper"><a href="#Helper" class="headerlink" title="Helper"></a>Helper</h2><p>Helper 作用: 将一些可复用的函数抽离在 helper.js 里面成为一个独立的函数。<br>Helper 自身是一个类，有和 Controller 基类一样的属性，它也会在每次请求时进行实例化，因此 <strong>Helper 上的所有函数也能获取到当前请求相关的上下文信息</strong>。</p><h3 id="获取方式-3"><a href="#获取方式-3" class="headerlink" title="获取方式"></a>获取方式</h3><p>在 Context 的实例上获取到当前请求的 Helper(ctx.helper) 实例。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// app/controller/user.js</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>  async fetch() &#123;<br>    const &#123; app, ctx &#125; = <span class="hljs-keyword">this</span>;<br>    const id = ctx.query.id;<br>    const user = app.cache.get(id);<br>    ctx.body = ctx.helper.formatUser(user);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="helper-js-中方法定义"><a href="#helper-js-中方法定义" class="headerlink" title="helper.js 中方法定义"></a>helper.js 中方法定义</h3><p>通过框架扩展的形式来自定义 helper 方法，例如上述<code>ctx.helper.formatUser()</code><br>框架拓展：框架会把 <code>app/extend/helper.js</code> 中定义的对象与内置 helper 的 prototype 对象进行合并，在处理请求时会基于扩展后的 prototype 生成 helper 对象。(即将自定义 helper 对象合并到框架内置 helper 对象内，生成新的扩展 helper 对象)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// app/extend/helper.js</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-function"><span class="hljs-title">formatUser</span>(<span class="hljs-params">user</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> only(user, [ <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;phone&#x27;</span> ]);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>注意：Helper 是个类，我们抽离的可复用方法是通过<code>app/extend/helper.js</code> 中的模块打包为对象导出后，遵循框架扩展的原则与内置helper对象合并得到的。需要通过 helper 对象访问内部自定义方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>内置对象间的引用看似复杂，实际上都大同小异：<br>从<strong>获取方式</strong>上对它们做了相应的总结</p><p><strong>通过类内this获取：</strong></p><ol><li>对于从Koa继承的对象(app,ctx)，Egg的扩展内置对象均对其做了封装，即在类内都能直接通过this获取。</li><li>从Koa继承的(request,response)请求级别对象，本身就被Koa的(ctx)对象调用，因此在Egg的其他内置对象类也可以通过ctx调用request,response。</li></ol><p><strong>各内置对象间的调用：</strong></p><ol><li>ctx 可以通过 <code>ctx.app</code> 返回 app 对象的引用</li><li>ctx 上可挂载 service 和一些插件即配置信息</li></ol><p><strong>其他方式：</strong></p><ol><li>exports暴露函数时传参：所有被Loader加载的文件暴露函数时，均会默认传入 app 对象作为参数</li><li>中间件定义时，默认传入ctx对象作为参数</li></ol><p>总体来说，app(全局对象) 和 ctx(每次请求均被实例化) 几乎是全局存在的，在其他内置对象内可通过this调用，app 可被 ctx 返回，app 可在exports函数时作为参数传入，ctx 可作为中间件参数传入。request/response 通过 ctx 调用。Controller 和 Service 均包含五大属性(ctx,app,config,service,logger)，此外Service全部会被挂载在 ctx 对象上，通过 ctx 对象也可以访问 service。</p>]]></content>
    
    
    <categories>
      
      <category>Egg</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Egg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识 Egg.js</title>
    <link href="/2021/03/13/Egg%E5%88%9D%E7%BA%A7%E5%85%A5%E9%97%A8/"/>
    <url>/2021/03/13/Egg%E5%88%9D%E7%BA%A7%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Egg初级入门"><a href="#Egg初级入门" class="headerlink" title="Egg初级入门"></a>Egg初级入门</h1><p>参考文章：</p><ol><li><a href="https://juejin.cn/post/6844903718106693646">Egg.js 基本使用</a></li><li><a href="https://juejin.cn/post/6844903716777099278">Egg.js 源码分析-项目启动</a></li><li><a href="https://juejin.cn/post/6844904081689952269">Egg.js 项目结构</a></li></ol><h2 id="Egg-js-安装"><a href="#Egg-js-安装" class="headerlink" title="Egg.js 安装"></a>Egg.js 安装</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>根据<a href="https://eggjs.org/zh-cn/intro/quickstart.html">Egg.js官方文档</a>快速创建项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> mkdir 自定义项目名 &amp;&amp; <span class="hljs-built_in">cd</span> 自定义项目名</span><br><span class="hljs-meta">$</span><span class="bash"> npm init egg --<span class="hljs-built_in">type</span>=simple</span><br><span class="hljs-meta">$</span><span class="bash"> npm i</span><br></code></pre></td></tr></table></figure><p>项目创建完成后可进行初步测试，检测是否安装成功：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ npm <span class="hljs-built_in">run</span> dev<br>$ <span class="hljs-built_in">open</span> http:<span class="hljs-comment">//localhost:7001</span><br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>通过<code>egg-init</code>脚手架初始化项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm i egg-init -g</span><br><span class="hljs-meta">$</span><span class="bash"> egg-init 自定义项目名 --<span class="hljs-built_in">type</span>=simple</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> 自定义项目名</span><br><span class="hljs-meta">$</span><span class="bash"> npm i</span><br><span class="hljs-meta">$</span><span class="bash"> npm run dev</span><br></code></pre></td></tr></table></figure><h2 id="Egg-js-项目目录结构"><a href="#Egg-js-项目目录结构" class="headerlink" title="Egg.js 项目目录结构"></a>Egg.js 项目目录结构</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs stylus">egg-project<br>├── package.json<br>├── app<span class="hljs-selector-class">.js</span> (可选)<br>├── agent<span class="hljs-selector-class">.js</span> (可选)<br>├── app<br>│   ├── router<span class="hljs-selector-class">.js</span> <span class="hljs-comment">// 配置路由</span><br>│   ├── controller <span class="hljs-comment">// 控制器</span><br>│        └── home.js<br>│   ├── service (可选) <span class="hljs-comment">// 服务</span><br>│        └── user.js<br>│   ├── middleware (可选) <span class="hljs-comment">// 中间件</span><br>│        └── response_time.js<br>│   ├── schedule (可选) <span class="hljs-comment">// 用于定时任务</span><br>│        └── my_task.js<br>│   ├── public (可选) <span class="hljs-comment">// 静态资源文件</span><br>│        └── reset.css<br>│   ├── view (可选) <span class="hljs-comment">// 模板视图</span><br>│        └── home.tpl<br>│   └── extend (可选) <span class="hljs-comment">// 集成功能插件</span><br>│       ├── helper<span class="hljs-selector-class">.js</span> (可选)<br>│       ├── request<span class="hljs-selector-class">.js</span> (可选)<br>│       ├── response<span class="hljs-selector-class">.js</span> (可选)<br>│       ├── context<span class="hljs-selector-class">.js</span> (可选)<br>│       ├── application<span class="hljs-selector-class">.js</span> (可选)<br>│       └── agent<span class="hljs-selector-class">.js</span> (可选)<br>├── config <span class="hljs-comment">// 必要的核心配置</span><br>│   ├── plugin<span class="hljs-selector-class">.js</span> <span class="hljs-comment">// 插件配置</span><br>│   ├── config<span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.js</span> <span class="hljs-comment">// 默认基础配置</span><br>│   ├── config<span class="hljs-selector-class">.prod</span><span class="hljs-selector-class">.js</span> <span class="hljs-comment">// 生产环境</span><br>│   ├── config<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.js</span> (可选) <span class="hljs-comment">// 测试配置</span><br>│   ├── config<span class="hljs-selector-class">.local</span><span class="hljs-selector-class">.js</span> (可选) <span class="hljs-comment">// 本地配置</span><br>│   └── config<span class="hljs-selector-class">.unittest</span><span class="hljs-selector-class">.js</span> (可选) <span class="hljs-comment">// 待定 </span><br>└── test <span class="hljs-comment">// 测试需要</span><br>    ├── middleware<br>        └── response_time<span class="hljs-selector-class">.test</span>.js<br>    └── controller<br>        └── home<span class="hljs-selector-class">.test</span>.js<br></code></pre></td></tr></table></figure><p><code>app/router.js</code> 用于配置 URL 路由规则<br><code>app/controller/**</code> 用于解析用户的输入，处理后返回相应的结果(管理服务器与用户交互行为)<br><code>app/service/**</code> 用于编写业务逻辑层(操作数据库)<br><code>app/middleware/**</code> 用于编写中间件<br><code>app/public/**</code> 用于放置静态资源<br><code>app/extend/**</code> 用于框架的扩展<br><code>config/config.&#123;env&#125;.js</code> 用于编写配置文件(配置环境)<br><code>config/plugin.js</code> 用于配置需要加载的插件<br><code>test/**</code> 用于单元测试<br><code>app.js</code> 和 <code>agent.js</code> 用于自定义启动时的初始化工作</p><h2 id="Egg-路由配置"><a href="#Egg-路由配置" class="headerlink" title="Egg 路由配置"></a>Egg 路由配置</h2><p>Egg Router: 描述请求 URL 和具体承担执行动作的 Controller 的对应关系。(一个route对应Controller中的执行方法)<br>Egg 框架约定了 <code>app/router.js</code> 文件用于<strong>统一所有路由规则</strong>。通过统一的配置，可以避免路由规则逻辑散落在多个地方，从而出现未知的冲突，集中在一起我们可以更方便的来查看全局的路由规则。</p><h3 id="Router-定义和使用"><a href="#Router-定义和使用" class="headerlink" title="Router 定义和使用"></a>Router 定义和使用</h3><h4 id="app-router-js"><a href="#app-router-js" class="headerlink" title="app/router.js"></a>app/router.js</h4><p>定义 URL 路由规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// app/router.js</span><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; router, controller &#125; = app;<br>    router.get(<span class="hljs-string">&#x27;/user/:id&#x27;</span>, controller.user.info);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>controller.user.info</code>是Router回调函数所指向的app的controller下面的对象。该路径可以解析为：<code>controller</code> 是<code>app</code>的一个属性对象， eggjs 会在启动的时候调用<code>this.loadController();</code>方法，去加载整个应用<code>app/controller</code>文件下的所有的js 文件， 会将文件名作为属性名称，挂载在<code>app.controller</code> 对象上，分析 <code>/controller</code> 目录下js文件，其都将继承类作为借口export(暴露)出来了，因此，可以通过<strong>类.方法名</strong>的方式使用类内方法了，连在一起就写为了形如 <code>controller.user.findAll</code> 的方式来引用Controller 下面的方法了。</p><h4 id="app-controller"><a href="#app-controller" class="headerlink" title="app/controller/**"></a>app/controller/**</h4><p>在 controller 目录下实现对应的 Controller 方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// app/controller/user.js</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    async info() &#123;<br>        const &#123;ctx&#125; = <span class="hljs-keyword">this</span>;<br>        ctx.body = &#123;<br>            name: `hello $&#123;ctx.params.id&#125;`,<br>        &#125;<br>    &#125;<br>&#125;<br><br>module.exports = <span class="hljs-type">UserController</span>;<br></code></pre></td></tr></table></figure><p>定义完路由规则和对应方法后，我们就算完成了一个最简单的Router定义。效果：用户向<code>/user/xxx</code>执行 GET 请求时，user.js 内的相应方法就会执行。</p><h4 id="组织和管理路由映射"><a href="#组织和管理路由映射" class="headerlink" title="组织和管理路由映射"></a>组织和管理路由映射</h4><p>项目中会涉及很多路由映射，若全写在 <code>app/router.js</code> 中会难以管理。我们可以根据需求做如下拆分：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">// app/router.js</span><br>module.exports = <span class="hljs-keyword">app</span> =&gt; &#123;<br>    <span class="hljs-comment">// require()引入函数，接收参数。因为/router/xx.js内不自带Application对象，因此通过参数传递</span><br>    require(&#x27;./router/<span class="hljs-keyword">news</span>&#x27;)(<span class="hljs-keyword">app</span>);<br>    require(&#x27;./router/admin&#x27;)(<span class="hljs-keyword">app</span>);<br>&#125;<br><br><span class="hljs-comment">// app/router/news.js</span><br>module.exports = <span class="hljs-keyword">app</span> =&gt; &#123;<br>    <span class="hljs-keyword">app</span>.router.<span class="hljs-built_in">get</span>(&#x27;/<span class="hljs-keyword">news</span>/<span class="hljs-keyword">list</span>&#x27;, <span class="hljs-keyword">app</span>.controller.<span class="hljs-keyword">news</span>.<span class="hljs-keyword">list</span>);<br>    <span class="hljs-keyword">app</span>.router.<span class="hljs-built_in">get</span>(&#x27;/<span class="hljs-keyword">news</span>/detail&#x27;, <span class="hljs-keyword">app</span>.controller.<span class="hljs-keyword">news</span>.detail);<br>&#125;<br><br><span class="hljs-comment">// app/router/admin.js</span><br>module.exports = <span class="hljs-keyword">app</span> =&gt; &#123;<br>    <span class="hljs-keyword">app</span>.router.<span class="hljs-built_in">get</span>(&#x27;/admin/user&#x27;, <span class="hljs-keyword">app</span>.controller.admin.user);<br>    <span class="hljs-keyword">app</span>.router.<span class="hljs-built_in">get</span>(&#x27;/admin/<span class="hljs-keyword">log</span>&#x27;, <span class="hljs-keyword">app</span>.controller.admin.<span class="hljs-keyword">log</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Service-操作数据库"><a href="#Service-操作数据库" class="headerlink" title="Service 操作数据库"></a>Service 操作数据库</h3><p>若你实现好了上述代码，则已经开发好了Router 和Controller , 但是在我们的controller 中，都是静态的内容,例如上述代码中只给<code>ctx.body</code>放入了一个对象。<br>在项目中我们需要跟数据库交互，实现前后端分离，我们一般将跟数据库交互的内容，都放在Service 层。Service 的目录一般为<code>app/service</code>，在该路径下我们可以创建多个 js 文件管理不同的数据库操作。</p><h4 id="定义-Service"><a href="#定义-Service" class="headerlink" title="定义 Service"></a>定义 Service</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// app/service/user.js</span><br><br><span class="hljs-comment">// 引入egg内置的Service对象</span><br>const <span class="hljs-type">Service</span> = require(<span class="hljs-symbol">&#x27;eg</span>g&#x27;).<span class="hljs-type">Service</span>;<br><br><span class="hljs-comment">// 继承Service类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Service</span> </span>&#123;<br>  async find(uid) &#123;<br>    const user = await <span class="hljs-keyword">this</span>.ctx.db.query(<span class="hljs-symbol">&#x27;select</span> * from user where uid = ?&#x27;, uid);<br>    <span class="hljs-keyword">return</span> user;<br>  &#125;<br>&#125;<br><br>module.exports = <span class="hljs-type">UserService</span>;<br></code></pre></td></tr></table></figure><h4 id="在-Controller-中使用"><a href="#在-Controller-中使用" class="headerlink" title="在 Controller 中使用"></a>在 Controller 中使用</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// app/controller/user.js</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    async info() &#123;<br>        const &#123;ctx&#125; = <span class="hljs-keyword">this</span>;<br>        ctx.body = <span class="hljs-keyword">this</span>.service.user.find();<br>    &#125;<br>&#125;<br><br>module.exports = <span class="hljs-type">UserController</span>;<br></code></pre></td></tr></table></figure><p>在Controller中调用Service类内的方法和路由调用Controller类内方法类似：<code>this.service.home.index();</code><br>注：此处也可以用 <code>this.ctx.service</code> 代替 <code>this.service</code> ，两者是等价的</p><h3 id="egg-mysql-插件访问-MySQL-数据库"><a href="#egg-mysql-插件访问-MySQL-数据库" class="headerlink" title="egg-mysql 插件访问 MySQL 数据库"></a>egg-mysql 插件访问 MySQL 数据库</h3><p>Egg.js 提供了 egg-mysql 插件来访问 MySQL 数据库。<br><strong>插件安装：</strong><br><code>$ npm i --save egg-mysql</code><br><strong>插件配置：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// config/plugin.js</span><br><span class="hljs-keyword">exports</span>.mysql = &#123;<br>  enable: <span class="hljs-keyword">true</span>,<br>  <span class="hljs-keyword">package</span>: <span class="hljs-string">&#x27;egg-mysql&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>在当前版本中，<code>plugin.js</code>文件统一以对象导出，因此可以写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>  mysql: &#123;<br>    enable: <span class="hljs-keyword">true</span>,<br>    <span class="hljs-keyword">package</span>: <span class="hljs-string">&#x27;egg-mysql&#x27;</span>,<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>环境配置(数据库连接信息)：</strong><br>单数据源(只访问一个MySQL数据库实例)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> config/config.default.js<br>exports.mysql = &#123;<br>  <span class="hljs-regexp">//</span> 单数据库信息配置<br>  client: &#123;<br>    <span class="hljs-regexp">//</span> host<br>    host: <span class="hljs-string">&#x27;mysql.com&#x27;</span>,<br>    <span class="hljs-regexp">//</span> 端口号<br>    port: <span class="hljs-string">&#x27;3306&#x27;</span>,<br>    <span class="hljs-regexp">//</span> 用户名<br>    user: <span class="hljs-string">&#x27;test_user&#x27;</span>,<br>    <span class="hljs-regexp">//</span> 密码<br>    password: <span class="hljs-string">&#x27;test_password&#x27;</span>,<br>    <span class="hljs-regexp">//</span> 数据库名<br>    database: <span class="hljs-string">&#x27;test&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-regexp">//</span> 是否加载到 app 上，默认开启<br>  app: true,<br>  <span class="hljs-regexp">//</span> 是否加载到 agent 上，默认关闭<br>  agent: false,<br>&#125;;<br></code></pre></td></tr></table></figure><p>当前 config.default.js 配置文件中，统一用 <code>module.exports</code> 导出对象，因此也可以写在 config 中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">appInfo</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> config = <span class="hljs-built_in">exports</span> = &#123;<br>    mysql: &#123;<br>      client: &#123;<br>        <span class="hljs-comment">// host</span><br>        host: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>        <span class="hljs-comment">// 端口号</span><br>        port: <span class="hljs-string">&#x27;3306&#x27;</span>,<br>        <span class="hljs-comment">// 用户名</span><br>        user: <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-comment">// 密码</span><br>        password: <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-comment">// 数据库名</span><br>        database: <span class="hljs-string">&#x27;trajsystem&#x27;</span>,<br>      &#125;,<br>      <span class="hljs-comment">// 是否加载到 app 上，默认开启</span><br>      app: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 是否加载到 agent 上，默认关闭</span><br>      agent: <span class="hljs-literal">false</span>,<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">// use for cookie sign key, should change to your own and keep security</span><br>  config.keys = appInfo.name + <span class="hljs-string">&#x27;_1615607271496_3440&#x27;</span>;<br><br>  <span class="hljs-comment">// add your middleware config here</span><br>  config.middleware = [];<br><br>  <span class="hljs-comment">// add your user config here</span><br>  <span class="hljs-keyword">const</span> userConfig = &#123;<br>    <span class="hljs-comment">// myAppName: &#x27;egg&#x27;,</span><br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    ...config,<br>    ...userConfig,<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>注意此处的写法，<code>=</code>从右向左赋值，因此配置对象首先赋值给<code>exports(exports=&#123;mysql:&#123;...&#125;, ...&#125;)</code>，之后 config 在获得 exports 对象。在最后返回值的时候，用了ES6的展开语法<code>...</code>将 config 展开后抛出。按照我的理解，config 展开后应该抛出形如<code>exports.mysql</code>的形式。因此上述写法和之前将环境配置单独导出类似。</p><p><strong>单实例使用方式：</strong> <code>await app.mysql.query(sql, values);</code></p><p>多数据源(应用需要访问多个MySQL数据源)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs awk">exports.mysql = &#123;<br>  clients: &#123;<br>    <span class="hljs-regexp">//</span> clientId, 获取client实例，需要通过 app.mysql.get(<span class="hljs-string">&#x27;clientId&#x27;</span>) 获取<br>    db1: &#123;<br>      <span class="hljs-regexp">//</span> host<br>      host: <span class="hljs-string">&#x27;mysql.com&#x27;</span>,<br>      <span class="hljs-regexp">//</span> 端口号<br>      port: <span class="hljs-string">&#x27;3306&#x27;</span>,<br>      <span class="hljs-regexp">//</span> 用户名<br>      user: <span class="hljs-string">&#x27;test_user&#x27;</span>,<br>      <span class="hljs-regexp">//</span> 密码<br>      password: <span class="hljs-string">&#x27;test_password&#x27;</span>,<br>      <span class="hljs-regexp">//</span> 数据库名<br>      database: <span class="hljs-string">&#x27;test&#x27;</span>,<br>    &#125;,<br>    db2: &#123;<br>      <span class="hljs-regexp">//</span> host<br>      host: <span class="hljs-string">&#x27;mysql2.com&#x27;</span>,<br>      <span class="hljs-regexp">//</span> 端口号<br>      port: <span class="hljs-string">&#x27;3307&#x27;</span>,<br>      <span class="hljs-regexp">//</span> 用户名<br>      user: <span class="hljs-string">&#x27;test_user&#x27;</span>,<br>      <span class="hljs-regexp">//</span> 密码<br>      password: <span class="hljs-string">&#x27;test_password&#x27;</span>,<br>      <span class="hljs-regexp">//</span> 数据库名<br>      database: <span class="hljs-string">&#x27;test&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-regexp">//</span> ...<br>  &#125;,<br>  <span class="hljs-regexp">//</span> 所有数据库配置的默认值<br>  default: &#123;<br><br>  &#125;,<br><br>  <span class="hljs-regexp">//</span> 是否加载到 app 上，默认开启<br>  app: true,<br>  <span class="hljs-regexp">//</span> 是否加载到 agent 上，默认关闭<br>  agent: false,<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>多实例使用方式：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cosnt client1 = app.mysql.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;db1&#x27;</span>);<br>await client1.query(<span class="hljs-keyword">sql</span>, <span class="hljs-keyword">values</span>);<br><br>const client2 = app.mysql.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;db2&#x27;</span>);<br>await client2.query(<span class="hljs-keyword">sql</span>, <span class="hljs-keyword">values</span>);<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，我们完成了由Egg.js制作接口，连接数据库，并实现接口的暴露以及前后端通过接口实现数据库交互的一系列简单的操作。<br>现总结如下：</p><ol><li>定义 Router , 在 <code>app/router.js</code> 中构建路由映射</li><li>定义 Controller，在 <code>app/controller</code> 目录下，编写路由跳转后需要执行的方法。</li><li>安装 egg-mysql 插件，在 <code>config/plugin.js</code> 文件中配置插件，在环境中配置数据库的连接信息等</li><li>定义 Service，在 <code>app/service</code> 目录下维护一些与数据库有关的操作，例如 CRUD 语句等。</li><li>将 Service 中的继承类暴露，并在 Controller 中调用其内部方法。</li></ol><p>整体可概括为： Router – Controller – Service(MySQL)</p>]]></content>
    
    
    <categories>
      
      <category>Egg</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Egg</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js - axios</title>
    <link href="/2021/03/12/Vue-axios/"/>
    <url>/2021/03/12/Vue-axios/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-axios"><a href="#Vue-axios" class="headerlink" title="Vue-axios"></a>Vue-axios</h1><h2 id="Part1-axios库安装和引用"><a href="#Part1-axios库安装和引用" class="headerlink" title="Part1: axios库安装和引用"></a>Part1: axios库安装和引用</h2><p>Vue框架内不包含axios库，因为axios库本身就作为一个独立的第三方库存在并长期维护。因此，Vue框架内使用axios就有必须引入axios第三方库。<br>安装：<code>npm install --save axios</code><br>引用：<br>ES6 - <code>import axios from &#39;axios&#39;</code><br>CommonJs - <code>const axios = require(&#39;axios&#39;)</code><br><strong>注意：axios在开发和发布使用时均会使用，为了在<code>package.json</code>中添加相应的依赖，安装时请务必加上<code>--save</code></strong><br><a href="https://www.npmjs.com/package/axios">axios-npm文档</a></p><h2 id="Part2-全局axios"><a href="#Part2-全局axios" class="headerlink" title="Part2: 全局axios"></a>Part2: 全局axios</h2><p>全局axios: 未创建实例的axios对象称为全局axios</p><p><strong>测试网站：(练习时可用以下网址测试)</strong><br><code>httpbin.org</code><br><code>123.207.32.32:8000/home/multidata</code><br><code>123.207.32.32:8000/home/data?type=sell&amp;page=3</code></p><h3 id="axios-config"><a href="#axios-config" class="headerlink" title="axios({config})"></a>axios({config})</h3><p>A. axios 接收<strong>对象</strong>作为参数,<strong>在参数内做相应的配置</strong>.<br>参数配置项可参考axios官方文档，以下列出几个常用的属性：</p><ol><li>url: url地址</li><li>method: 请求方式(get | post | …) //默认值 get</li><li>params: 接收对象类型, 专门针对get请求的参数拼接(query部分)</li><li>timeout: 设定超时阈值</li><li>baseURL: 设定基础url,若设定了则 url 属性传入相对路径即可</li></ol><p>B. axios 支持 Promise, 其<strong>本身包裹并执行了网络请求(异步操作)</strong>, 通过 .then() | .catch() 等获取传递的数据进行进一步处理.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// 向httpbin.org发送get请求，并对请求成功的传递值做相应的打印</span><br><span class="hljs-selector-tag">axios</span>(&#123;<br>    <span class="hljs-attribute">url</span>: <span class="hljs-string">&#x27;http://httpbin.org/get&#x27;</span>,<br>    <span class="hljs-attribute">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>&#125;)<span class="hljs-selector-class">.then</span>(<br>    (res) =&gt; &#123;<br>        <span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(res)<br>    &#125;<br>)<br><br><span class="hljs-comment">// url带有query传递参数的请求，query通过params传递</span><br><span class="hljs-selector-tag">axios</span>(&#123;<br>    <span class="hljs-attribute">baseURL</span>: <span class="hljs-string">&#x27;http://123.207.32.32:8000&#x27;</span>,<br>    <span class="hljs-attribute">url</span>: <span class="hljs-string">&#x27;/home/data&#x27;</span>,<br>    <span class="hljs-attribute">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>    <span class="hljs-attribute">params</span>: &#123;<br>        <span class="hljs-attribute">type</span>: <span class="hljs-string">&#x27;sell&#x27;</span>,<br>        <span class="hljs-attribute">page</span>: <span class="hljs-number">3</span>,<br>    &#125;<br>&#125;)<span class="hljs-selector-class">.then</span>(<br>    res =&gt; console.log(<span class="hljs-string">&#x27;baseURL&#x27;</span>,res)<br>)<br></code></pre></td></tr></table></figure><h3 id="axios-get-url-config"><a href="#axios-get-url-config" class="headerlink" title="axios.get(url, {config})"></a>axios.get(url, {config})</h3><p>axios 除了所有参数都在config对象内定义之外，还有其他的写法，例如本例指定以get方式发送网络请求。此时参数包括了 url 和其他剩余配置参数(以对象包裹)。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim">// axios.<span class="hljs-built_in">get</span>(url,&#123;config&#125;)<br>axios.<span class="hljs-built_in">get</span>(<br>    <span class="hljs-string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span>,<br>    &#123;timeou<span class="hljs-variable">t:</span> <span class="hljs-number">5000</span>&#125;,<br>).then(<br>    <span class="hljs-keyword">res</span> =&gt; &#123;<br>        console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">res</span>)<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><h3 id="axios-all"><a href="#axios-all" class="headerlink" title="axios.all()"></a>axios.all()</h3><p>有些网络请求是需要合并发送的，当请求存在多个且需要等待所有请求结果均返回后才落定状态(resolve | reject)，那么需要用到 axios 的 all() 方法。<br>作用：发送并发请求,所有请求均完成后执行处理程序<br>参数：接收数组作为参数,数组内接收多个请求. 与 Promise.all() 类似.<br>返回值：数组类型,包含多个请求结果对象. 若期望将数组展开,可调用 axios.spread 方法(ES6数组解构方法也可以)</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">axios</span><span class="hljs-selector-class">.all</span>([<br>    axios(&#123;<br>        <span class="hljs-attribute">url</span>: <span class="hljs-string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span>,<br>    &#125;),<br>    axios(&#123;<br>        <span class="hljs-attribute">url</span>: <span class="hljs-string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,<br>        <span class="hljs-attribute">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>        <span class="hljs-attribute">params</span>: &#123;<br>            <span class="hljs-attribute">type</span>: <span class="hljs-string">&#x27;sell&#x27;</span>,<br>            <span class="hljs-attribute">page</span>: <span class="hljs-number">3</span>,<br>        &#125;<br>    &#125;)<br>])<span class="hljs-selector-class">.then</span>(<br>    results =&gt; console.log(results)<br>)<br><br><span class="hljs-selector-tag">axios</span><span class="hljs-selector-class">.all</span>([<br>    axios(&#123;<br>        <span class="hljs-attribute">url</span>: <span class="hljs-string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span>,<br>    &#125;),<br>    axios(&#123;<br>        <span class="hljs-attribute">url</span>: <span class="hljs-string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,<br>        <span class="hljs-attribute">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>        <span class="hljs-attribute">params</span>: &#123;<br>            <span class="hljs-attribute">type</span>: <span class="hljs-string">&#x27;sell&#x27;</span>,<br>            <span class="hljs-attribute">page</span>: <span class="hljs-number">3</span>,<br>        &#125;<br>    &#125;)<br>])<span class="hljs-selector-class">.then</span>(<br>    <span class="hljs-comment">// axios.spread 使用</span><br>    axios.spread((res1, res2) =&gt; &#123;<br>        console.log(<span class="hljs-string">&#x27;spread&#x27;</span>, res1);<br>        console.log(<span class="hljs-string">&#x27;spread&#x27;</span>, res2);<br>    &#125;)<br>)<br><br><span class="hljs-selector-tag">axios</span><span class="hljs-selector-class">.all</span>([<br>    axios(&#123;<br>        <span class="hljs-attribute">url</span>: <span class="hljs-string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span>,<br>    &#125;),<br>    axios(&#123;<br>        <span class="hljs-attribute">url</span>: <span class="hljs-string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,<br>        <span class="hljs-attribute">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>        <span class="hljs-attribute">params</span>: &#123;<br>            <span class="hljs-attribute">type</span>: <span class="hljs-string">&#x27;sell&#x27;</span>,<br>            <span class="hljs-attribute">page</span>: <span class="hljs-number">3</span>,<br>        &#125;<br>    &#125;)<br>])<span class="hljs-selector-class">.then</span>(<br>    <span class="hljs-comment">// 数组解构</span><br>    ([res1, res2]) =&gt; &#123;<br>        <span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;array&#x27;</span>, res1);<br>        <span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;array&#x27;</span>, res2);<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><h3 id="axios-全局配置"><a href="#axios-全局配置" class="headerlink" title="axios 全局配置"></a>axios 全局配置</h3><p>语法：<code>axios.defaults.xxx = yyy</code><br>xxx 为axios的配置参数<br>举例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">axios.defaults.timeout</span> = <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><h2 id="Part3-axios实例"><a href="#Part3-axios实例" class="headerlink" title="Part3: axios实例"></a>Part3: axios实例</h2><p><strong>axios 实例创建:</strong>  <code>let aaa = axios.create(&#123;config&#125;)</code><br>局部axios实例创建时配置的 config 为初始化参数配置. 后续还可以通过给实例传递参数进行配置.<br>举例： <code>aaa(&#123;timeout:5000&#125;)</code> 在axios实例基础上，额外配置超时阈值参数。<br><strong>注意：尽量不要用全局axios, 要根据不同应用场景创建局部axios实例.</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> request = (<span class="hljs-keyword">config</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">instance</span> = axios<span class="hljs-variable">.create</span>(&#123;<br>        baseURL: &#x27;http:<span class="hljs-comment">//123.207.32.32:8000&#x27;,</span><br>        method: &#x27;get&#x27;,<br>        timeout: <span class="hljs-number">5000</span>,<br>    &#125;)<br>    <span class="hljs-comment">// 创建的实例返回 Promise 对象</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">instance</span>(<span class="hljs-keyword">config</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Part4-axios-拦截器"><a href="#Part4-axios-拦截器" class="headerlink" title="Part4: axios 拦截器"></a>Part4: axios 拦截器</h2><p>axios 拦截器又分为<strong>请求拦截器<code>(success/failure)</code>和响应拦截器<code>(success/failure)</code></strong><br>拦截器内又细分为成功拦截和失败拦截两个状态。</p><h3 id="request请求拦截器"><a href="#request请求拦截器" class="headerlink" title="request请求拦截器"></a>request请求拦截器</h3><p>语法：<code>axios实例.interceptors.request.use()</code>   (看源码还有<code>axios实例.interceptors.request.eject()</code>，但暂时没碰到，后续补充)<br>作用：请求拦截器拦截的是网络请求的配置信息(config)<br>参数：<code>.use((config)=&gt;&#123;&#125;,(err)=&gt;&#123;&#125;)</code> 接收两个回调函数作为参数，第一个回调函数传入截获的网络请求配置参数config，第二个回调函数在拦截失败时执行，传入err错误对象。<br><strong>在请求拦截器中，通常执行以下业务需求：</strong></p><ol><li>对config信息预处理</li><li>发送网络请求时,都希望在界面中显示请求图标</li><li>某些网络请求(比如登录(token)),必须携带一些特殊信息.可在请求时拦截,进行判断,若不符合要求则展示相应的错误提示.</li></ol><p><strong>特别注意！！！</strong>：拦截的config对象必须被手动返回，否则config会因为被拦截器拦截，导致无法向后传递。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua">instance.interceptors.request.use(<br>    // 请求拦截器拦截网络请求的配置信息(<span class="hljs-built_in">config</span>),此处<span class="hljs-built_in">config</span>可以随便命名,但最好命名为<span class="hljs-built_in">config</span>,含义更清晰<br>    <span class="hljs-built_in">config</span> =&gt; &#123;<br>        console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">config</span>);<br>        // <span class="hljs-built_in">config</span> 必须被返回,因为拦截器将其拦截,我们做了相应操作后要返回<span class="hljs-built_in">config</span>.<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">config</span><br>    &#125;,<br>    err =&gt; &#123;<br>        console.<span class="hljs-built_in">log</span>(err);<br>    &#125;,<br>)<br></code></pre></td></tr></table></figure><h3 id="response响应拦截器"><a href="#response响应拦截器" class="headerlink" title="response响应拦截器"></a>response响应拦截器</h3><p>语法：<code>axios实例.interceptors.response.use()</code>   (看源码还有<code>axios实例.interceptors.response.eject()</code>，但暂时没碰到，后续补充)<br>作用：响应拦截器拦截网络响应后传递回来的结果对象(result)<br>参数：<code>.use((res)=&gt;&#123;&#125;,(err)=&gt;&#123;&#125;)</code> 接收两个回调函数作为参数，第一个回调函数传入截获的响应结果对象res，第二个回调函数在拦截失败时执行，传入err错误对象。<br><strong>在响应拦截器中，最常执行的是对响应结果的过滤：</strong><br>axios通常会对响应结果做一层自己的包装,包装成一个对象<br>对象内包含(config,data,headers,…)属性,其中真正的网络请求响应数据在 data 中<br>因此平时调用时通常需要 res.data.data 获取,在响应拦截中可对此做一个过滤<br><strong>特别注意！！！</strong>：拦截的res对象必须被手动返回，否则res会因为被拦截器拦截，导致无法向后传递。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">instance.interceptors.response.use(<br>    <span class="hljs-comment">// 响应拦截器拦截网络响应后传递回来的结果对象(result)</span><br>    res =&gt; &#123;<br>        <span class="hljs-built_in">console</span>.log(res);<br>        res = res.data;<br>        <span class="hljs-comment">// 同样需要返回被拦截的 res</span><br>        <span class="hljs-keyword">return</span> res<br>    &#125;,<br>    err =&gt; &#123;<br>        <span class="hljs-built_in">console</span>.log(err);<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><h3 id="拦截器练习的完整代码"><a href="#拦截器练习的完整代码" class="headerlink" title="拦截器练习的完整代码"></a>拦截器练习的完整代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> requestInter = <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> instance = axios.create(&#123;<br>        baseURL: <span class="hljs-string">&#x27;http://123.207.32.32:8000&#x27;</span>,<br>        method: <span class="hljs-string">&#x27;get&#x27;</span>,<br>        timeout: <span class="hljs-number">5000</span>,<br>    &#125;)<br><br>    <span class="hljs-comment">// request拦截器: axios实例.interceptors.request.use()</span><br>    instance.interceptors.request.use(<br>        config =&gt; &#123;<br>            <span class="hljs-built_in">console</span>.log(config);<br>            <span class="hljs-comment">// config 必须被返回,因为拦截器将其拦截,我们做了相应操作后要返回config.</span><br>            <span class="hljs-keyword">return</span> config<br>        &#125;,<br>        err =&gt; &#123;<br>            <span class="hljs-built_in">console</span>.log(err);<br>        &#125;,<br>    )<br><br>    <span class="hljs-comment">// response拦截器: axios实例.interceptors.response.use()</span><br>    instance.interceptors.response.use(<br>        <span class="hljs-comment">// 响应拦截器拦截网络响应后传递回来的结果对象(result)</span><br>        res =&gt; &#123;<br>            <span class="hljs-built_in">console</span>.log(res);<br>            res = res.data;<br>            <span class="hljs-comment">// 同样需要返回被拦截的 res</span><br>            <span class="hljs-keyword">return</span> res<br>        &#125;,<br>        err =&gt; &#123;<br>            <span class="hljs-built_in">console</span>.log(err);<br>        &#125;<br>    )<br><br>    <span class="hljs-keyword">return</span> instance(config)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Part5-网络请求结果封装"><a href="#Part5-网络请求结果封装" class="headerlink" title="Part5: 网络请求结果封装"></a>Part5: 网络请求结果封装</h2><p>实际项目中, 通常对所有网络请求进行封装, 有以下几点好处:</p><ol><li>方便管理</li><li>便于维护</li><li>减少项目对第三方框架的依赖(例如axios)</li></ol><p>项目中通常新建 <code>/network</code> 存储网络请求的封装, 不同网络请求方式进行不同的封装</p><p><strong>用函数封装网络请求并导出,项目文件以该函数为入口,传入各项目文件自定义的参数即可.</strong><br>函数封装的要点:</p><ol><li>封装的内容要有复用性, 一些特殊需求用参数代替, 期望调用者自定义传值, 增加代码灵活性</li><li>函数内封装一些公共且固定的配置信息</li><li><strong>函数封装本质上就是通过函数包裹执行代码,以函数名为入口,以函数返回值为出口.</strong></li><li><strong>函数封装过程类似于模块化自定义实现</strong>(开发者调用函数时,不需要知道函数内部操作,只需要配置相应的参数,接收返回值即可).</li></ol><p>举例：<br>封装了一个基础地址为 <a href="http://123.207.32.32:8000/">http://123.207.32.32:8000</a> 的axios实例，并将该实例向外界暴露</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> request = <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> instance = axios.create(&#123;<br>        baseURL: <span class="hljs-string">&#x27;http://123.207.32.32:8000&#x27;</span>,<br>        method: <span class="hljs-string">&#x27;get&#x27;</span>,<br>        timeout: <span class="hljs-number">5000</span>,<br>    &#125;)<br><br>    instance.interceptors.response.use(<br>        res =&gt; res.data,<br>        err =&gt; <span class="hljs-built_in">console</span>.log(err)<br>    )<br><br>    <span class="hljs-keyword">return</span> instance(config)<br>&#125;<br></code></pre></td></tr></table></figure><p>此处又做了进一步的封装，将所有项目用到的自定义网络请求(上面是通用网络请求的封装)封装在一个文件内管理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//引入了通用的网络请求</span><br><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getHomeMultidata = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 通用请求的使用</span><br>    <span class="hljs-keyword">return</span> request(&#123;<br>        url: <span class="hljs-string">&#x27;/home/multidata&#x27;</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>axios</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里DIN(Deep Interest Network)阅读笔记</title>
    <link href="/2021/03/12/DeepInterestNetwork/"/>
    <url>/2021/03/12/DeepInterestNetwork/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 试试笔者的生日？" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0753ae5a3ff94c191d804eb756493e8cd6fcce99793b5719bea92779ea5b6c05"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo发布文章报错问题记录</title>
    <link href="/2021/03/10/hexo%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/10/hexo%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo发布文章报错问题记录"><a href="#hexo发布文章报错问题记录" class="headerlink" title="hexo发布文章报错问题记录"></a>hexo发布文章报错问题记录</h1><p>hexo g 生成博客时报错，报错原因如下：<br><code>can not read a block mapping entry; a multiline key may not be an implicit key at ...</code></p><p>原因记录：<br>没有严格按照 yaml 语法编辑博客头部配置</p><p><strong>注意：</strong> 博客头部配置中，</p><ol><li>变量和值中间必须有空格，如<code>title: xxxxx</code></li><li>不能出现英文 <code>&quot;&quot;</code>，用中文双引号或者尽量避免使用双引号</li><li>多标签配置：<code>- xxx</code> 或者 <code>[xx,xx,xx]</code> 。 <code>-</code> 后面要加空格，按回车会自动生成 <code>-</code> 表示书写正确。</li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue全局注册与异步加载</title>
    <link href="/2021/03/10/Vue%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/"/>
    <url>/2021/03/10/Vue%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue全局注册与异步加载"><a href="#Vue全局注册与异步加载" class="headerlink" title="Vue全局注册与异步加载"></a>Vue全局注册与异步加载</h1><h2 id="应用需求描述"><a href="#应用需求描述" class="headerlink" title="应用需求描述"></a>应用需求描述</h2><p>单独封装一个地图控件，实现开关控制地图插件的显示。当开关状态为ON时，在地图上显示相应的地图插件，当开关状态为OFF时，隐藏地图插件。<br><img src="/img/posts_img/20210310215211593_26729.png"></p><h2 id="Vue-代码"><a href="#Vue-代码" class="headerlink" title="Vue 代码"></a>Vue 代码</h2><p><strong>MapPlugin.vue:</strong> 整体插件框封装</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;map-plugin&quot;</span>&gt;</span><br>    //预留插槽，开发者可向内插入任意数目插件<br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&quot;MapPlugin&quot;</span>,</span><br>  <br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-id">#map-plugin</span> &#123;</span><br>  width: 180px;<br>  min-height: 100px;<br><br>  padding: 0 20px;<br>  margin-left: 10px;<br><br><span class="css">  <span class="hljs-selector-tag">border</span>: 3<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">ridge</span> <span class="hljs-selector-id">#515a6ece</span>;</span><br>  border-radius: 5px 25px;<br><br>  display: flex;<br>  flex-direction: column;<br><br>  position: fixed;<br>  bottom: 40px;<br>  left: 0;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>PluginItem.vue:</strong> 单个插件封装</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;plugin-item&quot;</span>&gt;</span></span><br><span class="xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">text</span> &#125;&#125;</span><br><span class="xml">    //使用了iView UI的 i-switch 封装组件</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">i-switch</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;switch1&quot;</span> @<span class="hljs-attr">on-change</span>=<span class="hljs-string">&quot;change&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;large&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;open&quot;</span>&gt;</span>ON<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span>OFF<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">i-switch</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">export default &#123;</span><br><span class="xml">  name: &quot;PluginItem&quot;,</span><br><span class="xml">  props: &#123;</span><br><span class="xml">    text: &#123;</span><br><span class="xml">      type: String,</span><br><span class="xml">      default: &quot;&quot;,</span><br><span class="xml">    &#125;,</span><br><span class="xml">    callback: Function,</span><br><span class="xml">  &#125;,</span><br><span class="xml">  data() &#123;</span><br><span class="xml">    return &#123;</span><br><span class="xml">      switch1: false,</span><br><span class="xml">    &#125;;</span><br><span class="xml">  &#125;,</span><br><span class="xml">  methods: &#123;</span><br><span class="xml">    change(status) &#123;</span><br><span class="xml">      //   console.log(status);</span><br><span class="xml">      let cn = &quot;&quot;;</span><br><span class="xml">      if (status) &#123;</span><br><span class="xml">        cn = &quot;开&quot;;</span><br><span class="xml">      &#125; else &#123;</span><br><span class="xml">        cn = &quot;关&quot;;</span><br><span class="xml">      &#125;</span><br><span class="xml">      this.$Message.info(&quot;开关状态：&quot; + cn);</span><br><span class="xml">    &#125;,</span><br><span class="xml">  &#125;,</span><br><span class="xml">  //watch 侦听 switch1 变量状态变化，发生变化时调用函数 callback</span><br><span class="xml">  //callback 函数外部传入</span><br><span class="xml">  //watch 使用细节参考 Vue.js 官网</span><br><span class="xml">  watch: &#123;</span><br><span class="xml">    switch1: function (newValue, oldValue) &#123;</span><br><span class="xml">      this.callback(newValue);</span><br><span class="xml">    &#125;,</span><br><span class="xml">  &#125;,</span><br><span class="xml">&#125;;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml">.plugin-item &#123;</span><br><span class="xml">  display: flex;</span><br><span class="xml">  justify-content: space-between;</span><br><span class="xml">  padding: 10px 10px;</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="定制封装个性化插件组件"><a href="#定制封装个性化插件组件" class="headerlink" title="定制封装个性化插件组件"></a>定制封装个性化插件组件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">MapPlugin</span>&gt;</span><br>    //向预留插槽内插入PluginItem.vue封装的插件<br>    <span class="hljs-tag">&lt;<span class="hljs-name">PluginItem</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;比例尺&quot;</span> <span class="hljs-attr">:callback</span>=<span class="hljs-string">&quot;getScale&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">PluginItem</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;鹰眼控件&quot;</span> <span class="hljs-attr">:callback</span>=<span class="hljs-string">&quot;getOverView&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">PluginItem</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;工具条&quot;</span> <span class="hljs-attr">:callback</span>=<span class="hljs-string">&quot;getToolBar&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">MapPlugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; MapPlugin, PluginItem &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;components/common/plugin&quot;</span>;</span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; getPlugin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./getPlugin&quot;</span>;</span><br><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&quot;ModelOnePlugin&quot;</span>,</span><br>  components: &#123;<br>    MapPlugin,<br>    PluginItem,<br>  &#125;,<br>  methods: &#123;<br><span class="javascript">    <span class="hljs-comment">// 填坑1：this.$plugin 在页面挂在完成前没有创建，需要用异步方法，等待 this.$plugin 赋值后获取值并执行</span></span><br>    /**填坑2：<br><span class="javascript">     * <span class="hljs-built_in">this</span> 指向问题. Vue 方法等定义中，若用箭头函数，<span class="hljs-built_in">this</span> 指向上级父作用域，因此值为 <span class="hljs-literal">undefined</span> (打印可知)</span><br><span class="javascript">     * 获取 Vue 实例的 <span class="hljs-built_in">this</span>，需要通过 <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125; 声明函数。同理在 getPlugin.js 中定义的箭头函数，<span class="hljs-built_in">this</span> =&gt; <span class="hljs-literal">undefined</span></span><br><span class="javascript">     * 解决 <span class="hljs-built_in">this</span> 指向：最有效的办法就是获取正确的 <span class="hljs-built_in">this</span> 指向并将它保存到变量内使用。</span><br>     */<br><span class="javascript">    getScale: <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">active</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);</span><br><span class="javascript">      <span class="hljs-keyword">let</span> vueinstance = <span class="hljs-built_in">this</span>;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">await</span> getPlugin(vueinstance);</span><br>      if (active) &#123;<br><span class="javascript">        <span class="hljs-comment">// .show() 插件展示</span></span><br>        obj.scale.show();<br><span class="javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">        <span class="hljs-comment">// .hide() 插件隐藏</span></span><br>        obj.scale.hide();<br>      &#125;<br>    &#125;,<br><span class="javascript">    getOverView: <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">active</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> vueinstance = <span class="hljs-built_in">this</span>;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">await</span> getPlugin(vueinstance);</span><br>      if (active) &#123;<br><span class="javascript">        <span class="hljs-comment">// .show() 插件展示</span></span><br>        obj.overview.show();<br><span class="javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">        <span class="hljs-comment">// .hide() 插件隐藏</span></span><br>        obj.overview.hide();<br>      &#125;<br>    &#125;,<br><span class="javascript">    getToolBar: <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">active</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> vueinstance = <span class="hljs-built_in">this</span>;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">await</span> getPlugin(vueinstance);</span><br>      if (active) &#123;<br><span class="javascript">        <span class="hljs-comment">// .show() 插件展示</span></span><br>        obj.toolbar.show();<br><span class="javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">        <span class="hljs-comment">// .hide() 插件隐藏</span></span><br>        obj.toolbar.hide();<br>      &#125;<br>    &#125;,<br>  &#125;,<br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>getPlugin 函数单独封装</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const getPlugin = <span class="hljs-function"><span class="hljs-params">(vueinstance)</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(vueinstance);<br>    <span class="hljs-regexp">//</span> 此处箭头函数内 <span class="hljs-built_in">this</span> 上级作用域仍为一个箭头函数，值为 <span class="hljs-literal">undefined</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (vueinstance.$plugin) &#123;<br>            resolve(vueinstance.$plugin)<br>        &#125;<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">export</span> &#123;<br>    getPlugin,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><p>MapPlugin.vue 和 PluginItem.vue 两个组件封装了通用的插件框和插件<br>主要细节在于插件组件的使用：<br><strong>问题描述一：</strong><br>由于我们采用自己封装的通用插件组件，因此在定制特定功能的插件时，我们需要传入相对应的插件对象，这些插件对象为高德地图创建出来的插件实例。<strong>注意：</strong> 在挂载高德地图实例的时候，我们就提到过，外部实例挂载在Vue实例上，需要等待Vue实例完全挂载。在地图实例挂载时，在mounted中回调创建实例的函数是为了防止Vue实例未挂载完全就执行实例的创建，从而地图实例缺少挂载容器而挂在失败的问题。而在插件实例挂载中，我们本意是在创建通用插件时，传入相应的插件实例从而完成插件个性化定制。但是此时插件实例还未被创建(只有在mounted后执行)，因此用同步方法传递实例自然是失败了。<br><strong>解决方法：</strong><br>用异步方法传递插件实例，插件实例创建后，本文方法将插件实例统一放到对象内并通过<code>Vue.prototype.$xxx</code>全局注册，在插件中通过异步方法获取该全局对象，即用<code>Promise</code>对象包裹异步操作，当检测到<code>$plugin</code>(本文注册的全局对象)时，通过<code>resolve()</code>落定Promise状态为fulFilled，这样我们就能获得包含有插件实例的全局对象，然后对通用插件进行个性化配置。</p><p><strong>问题描述二：</strong><br>上述代码中，我们要特别注意 this 的指向问题，在 Vue 的 methods 定义中，使用箭头函数，由于 this 会指向最近外层作用域<code>&#123;&#125;</code>，因为methods并没有 this，所以值为 undefined。我们需要用 <code>function() &#123;&#125;</code> 来定义，这样定义的函数的 this 会指向 Vue 实例。同理，单独封装的 <code>getPlugin.js</code> 中的箭头函数 this 经过判断也是 undefined，需要做进一步处理保证其获得的是 Vue 实例。<br><strong>解决方法：</strong><br>为了避免多次判断 this 指向，我们可以在明确 this 指向的地方，用变量保存 this 值，然后通过参数传递该变量，用该变量来作为 this 使用。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>ES6</tag>
      
      <tag>async</tag>
      
      <tag>Promise</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js挂载(高德)地图服务API</title>
    <link href="/2021/03/10/Vue%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E9%AB%98%E5%BE%B7API/"/>
    <url>/2021/03/10/Vue%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E9%AB%98%E5%BE%B7API/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue异步加载高德API"><a href="#Vue异步加载高德API" class="headerlink" title="Vue异步加载高德API"></a>Vue异步加载高德API</h1><h2 id="高德地图服务JS-API异步加载"><a href="#高德地图服务JS-API异步加载" class="headerlink" title="高德地图服务JS API异步加载"></a>高德地图服务JS API异步加载</h2><p><a href="https://developer.amap.com/api/javascript-api/guide/abc/prepare">高德地图服务JS API官方文档</a></p><h3 id="Step1-创建挂载容器"><a href="#Step1-创建挂载容器" class="headerlink" title="Step1: 创建挂载容器"></a>Step1: 创建挂载容器</h3><p>官方文档-&gt;准备-&gt;注册并申请Key值<br>添加div标签作为地图容器，同时为该div指定id属性：</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-comment">//后续AMap创建的地图实例将挂载在container地图容器上</span><br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-symbol">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt; <br></code></pre></td></tr></table></figure><p>为地图容器指定高度、宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#container</span> &#123;<span class="hljs-attribute">width</span>:<span class="hljs-number">300px</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">180px</span>; &#125; <br></code></pre></td></tr></table></figure><h3 id="Step2-获取异步加载代码"><a href="#Step2-获取异步加载代码" class="headerlink" title="Step2: 获取异步加载代码"></a>Step2: 获取异步加载代码</h3><p>参考文档：获取异步加载API的相关代码</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-built_in">window</span>.onLoad  = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> AMap.Map(<span class="hljs-string">&#x27;container&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">url</span> = <span class="hljs-string">&#x27;https://webapi.amap.com/maps?v=1.4.15&amp;key=您申请的key值&amp;callback=onLoad&#x27;</span>;<br><span class="hljs-keyword">var</span> jsapi = doc.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>jsapi.charset = <span class="hljs-string">&#x27;utf-8&#x27;</span>;<br>jsapi.src = <span class="hljs-built_in">url</span>;<br><span class="hljs-built_in">document</span>.head.appendChild(jsapi);<br></code></pre></td></tr></table></figure><h3 id="Step3-挂载实例"><a href="#Step3-挂载实例" class="headerlink" title="Step3: 挂载实例"></a>Step3: 挂载实例</h3><p>先挂完整的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs xml">//TMap.vue<br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  //用于挂载实例的容器<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&quot;TMap&quot;</span>,</span><br>  methods: &#123;<br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">initMap</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-comment">// 高德异步加载地图相关代码</span></span><br><span class="javascript">      <span class="hljs-built_in">window</span>.onLoad = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// new AMap.Map(&quot;container&quot;,...) 创建高德实例并挂载在container上</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> AMap.Map(<span class="hljs-string">&quot;container&quot;</span>, &#123;</span><br><span class="javascript">          zoom: <span class="hljs-number">11</span>, <span class="hljs-comment">//级别</span></span><br><span class="javascript">          center: [<span class="hljs-number">116.397428</span>, <span class="hljs-number">39.90923</span>], <span class="hljs-comment">//中心点坐标</span></span><br><span class="javascript">          viewMode: <span class="hljs-string">&quot;3D&quot;</span>, <span class="hljs-comment">//使用3D视图</span></span><br>        &#125;);<br><span class="javascript">        <span class="hljs-comment">//将地图实例map注册到全局，方便在其他组件作用域内使用(调用$map即可)</span></span><br>        Vue.prototype.$map = map;<br><br><span class="javascript">        <span class="hljs-comment">//高德地图插件注册(可暂时忽略)</span></span><br>        AMap.plugin(<br><span class="javascript">          [<span class="hljs-string">&quot;AMap.Scale&quot;</span>, <span class="hljs-string">&quot;AMap.ToolBar&quot;</span>, <span class="hljs-string">&quot;AMap.OverView&quot;</span>],</span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//异步加载插件</span></span><br><span class="javascript">            <span class="hljs-keyword">let</span> scale = <span class="hljs-keyword">new</span> AMap.Scale(&#123;</span><br><span class="javascript">              visible: <span class="hljs-literal">false</span>,</span><br>            &#125;);<br><span class="javascript">            <span class="hljs-keyword">let</span> toolbar = <span class="hljs-keyword">new</span> AMap.ToolBar(&#123;</span><br><span class="javascript">              visible: <span class="hljs-literal">false</span>,</span><br>            &#125;);<br><span class="javascript">            <span class="hljs-keyword">let</span> overview = <span class="hljs-keyword">new</span> AMap.OverView(&#123;</span><br><span class="javascript">              visible: <span class="hljs-literal">false</span>,</span><br><span class="javascript">              isOpen: <span class="hljs-literal">true</span>,</span><br>            &#125;);<br>            map.addControl(scale);<br>            map.addControl(toolbar);<br>            map.addControl(overview);<br><span class="javascript">            <span class="hljs-comment">// 全局注册</span></span><br><span class="javascript">            <span class="hljs-keyword">let</span> obj = &#123;</span><br>              scale,<br>              toolbar,<br>              overview,<br>            &#125;;<br>            Vue.prototype.$plugin = obj;<br>          &#125;<br>        );<br>      &#125;;<br><span class="javascript">      <span class="hljs-keyword">var</span> url =</span><br><span class="javascript">        <span class="hljs-string">&quot;https://webapi.amap.com/maps?v=1.4.15&amp;key=此处填申领的Key值&amp;callback=onLoad&quot;</span>;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> jsapi = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;script&quot;</span>);</span><br><span class="javascript">      jsapi.charset = <span class="hljs-string">&quot;utf-8&quot;</span>;</span><br>      jsapi.src = url;<br><span class="javascript">      <span class="hljs-built_in">document</span>.head.appendChild(jsapi);</span><br>    &#125;,<br>  &#125;,<br><span class="javascript">  <span class="hljs-comment">// 最关键的一步：在组件挂载完成后(mounted)挂载高德实例</span></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-built_in">this</span>.initMap();</span><br>  &#125;,<br>&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-id">#container</span> &#123;</span><br>  height: 100%;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>重点：</strong><br>高德JS API异步加载代码，会通过<code>new AMap.Map(&quot;容器id&quot;,...)</code>创建高德实例并挂载在指定容器上。<br>值得注意的是，我们需要将整个异步加载的过程放在 Vue 挂载完成后执行。<br>原因：<br>在 Vue 实例没有完全挂载完成前，我们无法保证组件内 <code>&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</code> 已经被创建。<br>若容器未被创建，异步加载代码就已经被执行，地图是无法挂载到 Vue 实例上的。<br>因此，我们需要借助 Vue 的生命周期 mounted (在Vue实例挂载完成后执行内部函数)。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS基础</title>
    <link href="/2021/03/06/CSS%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/03/06/CSS%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><p>参考资料：<a href="https://www.w3school.com.cn/css/index.asp">W3School–CSS</a></p><hr><h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><p>**CSS规则集(rule-set)**：选择器 + 声明块<br><img src="/img/posts_img/20210306111858285_13158.png"><br>实例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重点：</strong></p><ol><li>选择器概念</li><li>声明块内可包含多条声明语句，用 <code>;</code> 分隔。(区别于对象)</li><li>声明语句以键值对(key-value)形式书写，值不需要指定为字符串形式。(区别于对象)</li></ol><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>概念：指定设置样式的 HTML 元素<br>CSS选择器类型包括：</p><ol><li>简单选择器（根据名称、id、类来选取元素）</li><li>组合器选择器（根据它们之间的特定关系来选取元素）</li><li>伪类选择器（根据特定状态选取元素）</li><li>伪元素选择器（选取元素的一部分并设置其样式）</li><li>属性选择器（根据属性或属性值来选取元素）</li></ol><h4 id="简单选择器"><a href="#简单选择器" class="headerlink" title="简单选择器"></a>简单选择器</h4><h5 id="css元素选择器"><a href="#css元素选择器" class="headerlink" title="css元素选择器"></a>css元素选择器</h5><p>作用：根据元素名称(HTML标签)选择 HTML 元素，所有指定的标签样式均会被更改。<br>实例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="css-id选择器"><a href="#css-id选择器" class="headerlink" title="css id选择器"></a>css id选择器</h5><p>作用：根据 HTML 元素的 id 属性来选择特定元素。元素的 id 在页面中是唯一的，因此 id 选择器用于选择一个唯一的元素。<br>语法：<code>#idname &#123;css style;...&#125;</code><br>实例：(id 为 myidname 的标签被选中并修改样式)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#myidname</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="css类选择器"><a href="#css类选择器" class="headerlink" title="css类选择器"></a>css类选择器</h5><p>作用：根据 HTML 元素的 class 属性来选择特定元素。<br>语法： <code>.classname &#123;css style;...&#125;</code><br>实例1：(所有class名为myclassname的标签均被选中并修改样式)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.myclassname</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例2：(h2标签中class名为myclassname的标签被选中并修改样式)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span><span class="hljs-selector-class">.myclassname</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="css通用选择器"><a href="#css通用选择器" class="headerlink" title="css通用选择器"></a>css通用选择器</h5><p>作用：选择页面上的所有的 HTML 元素。<br>语法：<code>* &#123;css style;...&#125;</code><br>实例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="css分组选择器"><a href="#css分组选择器" class="headerlink" title="css分组选择器"></a>css分组选择器</h5><p>作用：将样式相同的 HTML 元素写在一起，缩减代码量。<br>语法：<code>name1, name2, ... &#123;css style;...&#125;</code><br>实例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-id">#idname</span>, <span class="hljs-selector-class">.classname</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后续补充，敬请期待"><a href="#后续补充，敬请期待" class="headerlink" title="后续补充，敬请期待"></a>后续补充，敬请期待</h4><h2 id="CSS使用"><a href="#CSS使用" class="headerlink" title="CSS使用"></a>CSS使用</h2><h3 id="外部CSS"><a href="#外部CSS" class="headerlink" title="外部CSS"></a>外部CSS</h3><p>外部样式表可以在任何文本编辑器中编写，并且必须以 <code>.css</code> 扩展名保存。<br>可在所引入的页面下使用表内样式。<br>引用：</p><ol><li>HTML 页面：在 <code>&lt;head&gt;</code> 部分的 <code>&lt;link&gt;</code> 元素内包含对外部样式表文件的引用。</li><li>框架内：在 <code>&lt;script&gt;</code> 部分通过模块化导入 <code>.css</code> 文件</li></ol><p>实例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">HTML：<br>&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;mystyle.css&quot;</span>&gt;<br><br>框架：<br>import <span class="hljs-string">&quot;./xxx/xx/mystle.css&quot;</span>;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>外部 <code>.css</code> 文件不应包含任何 HTML 标签。</li><li>请勿在属性值和单位之间添加空格（例如 <code>margin-left: 20 px;</code>）。正确的写法是：<code>margin-left: 20px;</code></li></ol><h3 id="内部CSS"><a href="#内部CSS" class="headerlink" title="内部CSS"></a>内部CSS</h3><p>仅在某一页面内使用定义的样式。<br>引用：</p><ol><li>HTML 页面：在 <code>&lt;head&gt;</code> 部分的 <code>&lt;style&gt;</code> 元素中进行定义。</li><li>框架内(以Vue为例)：在组件的 <code>&lt;style&gt;</code> 部分定义样式。</li></ol><p>实例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>body &#123;<br>  background-color: linen;<br>&#125;<br><br>h1 &#123;<br>  color: maroon;<br>  margin-left: 40px;<br>&#125; <br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="行内CSS-内联样式"><a href="#行内CSS-内联样式" class="headerlink" title="行内CSS(内联样式)"></a>行内CSS(内联样式)</h3><p>为单个元素应用唯一的样式。<br>引用：行内样式在相关元素的 <code>style</code> 属性中定义<br>实例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:blue;text-align:center;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>提示：</p><ol><li>行内样式失去了样式表的许多优点（通过将内容与呈现混合在一起）。请谨慎使用此方法。</li><li>标签内属性值均用 <code>&quot;&quot;</code> 包裹，内联样式传递给 <code>style</code> 属性时不需要 <code>&#123;&#125;</code> 包裹。</li></ol><h3 id="CSS样式层叠优先级"><a href="#CSS样式层叠优先级" class="headerlink" title="CSS样式层叠优先级"></a>CSS样式层叠优先级</h3><p>优先级从高到低依次为：</p><ol><li>行内样式（在 HTML 元素中）</li><li>外部和内部样式表（在 head 部分）</li><li>浏览器默认样式</li></ol><p>行内样式具有最高优先级，并且将覆盖外部和内部样式以及浏览器默认样式。</p><h2 id="CSS颜色"><a href="#CSS颜色" class="headerlink" title="CSS颜色"></a>CSS颜色</h2><h2 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h2><h2 id="CSS边框"><a href="#CSS边框" class="headerlink" title="CSS边框"></a>CSS边框</h2><h2 id="CSS边距"><a href="#CSS边距" class="headerlink" title="CSS边距"></a>CSS边距</h2><h3 id="外边距-margin"><a href="#外边距-margin" class="headerlink" title="外边距(margin)"></a>外边距(margin)</h3><p>CSS margin 属性用于在任何定义的边框(包括没有定义边框)之外，为元素周围创建空间。<br><strong>margin 属性</strong>：</p><ol><li>margin-top</li><li>margin-right</li><li>margin-bottom</li><li>margin-left</li></ol><p>**margin 属性值(允许负值)**：</p><ol><li><code>auto</code> - 浏览器来计算外边距</li><li><code>length</code> - 以 px、pt、cm 等单位指定外边距</li><li><code>%</code> - 指定以包含元素宽度的百分比计的外边距</li><li><code>inherit</code> - 指定应从父元素继承外边距</li></ol><p>margin 属性简写：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">margin:</span> 上 右 下 左<br><span class="hljs-symbol">margin:</span> 上 右左 下<br><span class="hljs-symbol">margin:</span> 上下 右左<br><span class="hljs-symbol">margin:</span> 上下左右<br></code></pre></td></tr></table></figure><p>auto 属性值的特殊用途(水平居中)：<br><code>margin: auto</code><br>元素将占据指定的宽度，并且剩余空间将在左右边界之间平均分配。</p><h4 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h4><p>当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。<br>具体参照：<a href="https://www.w3school.com.cn/css/css_margin_collapse.asp">外边距合并</a> ，此处不做细致讲解</p><h3 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距(padding)"></a>内边距(padding)</h3><p>CSS padding 属性用于在任何定义的边界内的元素内容周围生成空间。即向内填充。<br><strong>padding 属性</strong>：</p><ol><li>padding-top</li><li>padding-right</li><li>padding-bottom</li><li>padding-left</li></ol><p>**padding 属性值(允许负值 | 没有 auto 属性值)**：</p><ol><li><code>length</code> - 以 px、pt、cm 等单位指定外边距</li><li><code>%</code> - 指定以包含元素宽度的百分比计的外边距</li><li><code>inherit</code> - 指定应从父元素继承外边距</li></ol><p>padding 属性简写：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">padding:</span> 上 右 下 左<br><span class="hljs-symbol">padding:</span> 上 右左 下<br><span class="hljs-symbol">padding:</span> 上下 右左<br><span class="hljs-symbol">padding:</span> 上下左右<br></code></pre></td></tr></table></figure><h2 id="CSS高度-宽度"><a href="#CSS高度-宽度" class="headerlink" title="CSS高度/宽度"></a>CSS高度/宽度</h2><p>height 和 width 属性用于设置元素的高度和宽度。height 和 width 属性不包括内边距、边框或外边距。<br>标准盒子模型：<br><img src="/img/posts_img/20210306140343369_9779.png"></p><p>IE盒子模型：<br><img src="/img/posts_img/20210306140404202_28129.png"></p><p><strong>height | width 属性</strong>：</p><ol><li><code>auto</code> - 默认。浏览器计算高度和宽度。</li><li><code>length</code> - 以 px、cm 等定义高度/宽度。</li><li><code>%</code> - 以包含块的百分比定义高度/宽度。</li><li><code>initial</code> - 将高度/宽度设置为默认值。</li><li><code>inherit</code> - 从其父值继承高度/宽度</li></ol><p><strong>注意</strong>：<br>在标准盒子模型中，height 和 width 属性不包括内边距、边框或外边距！它们设置的是元素的内边距、边框和外边距内的区域的高度/宽度！</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>页面设计</title>
    <link href="/2020/12/12/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/"/>
    <url>/2020/12/12/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="页面设计"><a href="#页面设计" class="headerlink" title="页面设计"></a>页面设计</h1><p>项目 GitHub 地址：<a href="https://github.com/jtwang7/group_website.git">group_website</a></p><h2 id="方法-重难点"><a href="#方法-重难点" class="headerlink" title="方法+重难点"></a>方法+重难点</h2><h3 id="CSS脱离文档流后同级元素上移问题"><a href="#CSS脱离文档流后同级元素上移问题" class="headerlink" title="CSS脱离文档流后同级元素上移问题"></a>CSS脱离文档流后同级元素上移问题</h3><p>参考链接：<a href="https://www.html.cn/qa/css3/18193.html">css固定定位脱离文档流怎么解决？</a><br>某元素脱离文档流后，同级元素位置上移的原因是因为没有给父级层设置相应的高度。当子级元素没有脱离文档流时，父DIV会因为子DIV的高度而被撑起来，然而当子DIV设置绝对定位或固定定位时，父DIV不会再根据子DIV的高度撑起来，也就是我们常说的脱离文档流。<br>解决方法1：强行给父级DIV设置相应的高度，这个方案的缺点是不够灵活，需要自己计算要设置的高度</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.parent</span>&#123;<br><span class="hljs-comment">/*解决方法1：css强制设置父模块宽度高度*/</span><br><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>...<br>&#125;<br><span class="hljs-selector-class">.son</span>&#123;<br><span class="hljs-comment">/*设置固定定位*/</span><br><span class="hljs-attribute">position</span>:fixed;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解决方法2：在合适的位置设置占位元素。没有在父元素设置元素高度直观，不建议采用。<br><strong>解决方法3：使用JS设置父级DIV的高度等于子DIV (推荐)</strong></p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-built_in">window</span>.onload = ()=&gt;(<br>    <span class="hljs-keyword">let</span> son = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;son&#x27;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-built_in">parent</span> = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;parent&#x27;</span>);<br>    <span class="hljs-comment">//不兼容IE9以前的浏览器，IE9 以前用 son.currentStyle 获取</span><br>    <span class="hljs-built_in">parent</span>.style.height = <span class="hljs-built_in">window</span>.getComputedStyle(<span class="hljs-string">&#x27;son&#x27;</span>).height;<br>)<br></code></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle">window.getComputedStyle()</a>: 以对象形式返回目标的所有CSS样式值<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload">window.onload()</a>: MDN文档中说明，onload 事件触发发生在所有 DOM 资源加载完成后，此时所有元素在DOM中均已完成挂载，不用担心 onload 事件触发后调用函数无作用对象的问题。<br><strong>在 React 中用 ref 属性来获取 dom 元素进行操作</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">//在组件完成挂载时，添加 window.onload 监听事件，它在所有 DOM 资源加载完成后调用函数执行。</span><br><span class="xml">componentDidMount() &#123;</span><br><span class="xml">    window.onload = ()=&gt;&#123;</span><br><span class="xml">        this.parent.style.height = window.getComputedStyle(this.son).height</span><br><span class="xml">    &#125;</span><br><span class="xml">&#125;</span><br><span class="xml">...</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="xml">    style=</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">position:</span> <span class="hljs-string">&quot;relative&quot;</span> &#125;&#125;</span><br><span class="xml">    //获取DOM元素</span><br><span class="xml">    ref=&#123;(parent) =&gt; &#123; this.parent = parent &#125;&#125;</span><br><span class="xml">&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="xml">        style=</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">position:</span> <span class="hljs-string">&quot;absolute&quot;</span>, zIndex: -1, width: <span class="hljs-string">&quot;100vw&quot;</span>, height: <span class="hljs-string">&quot;1080px&quot;</span> &#125;&#125;</span><br><span class="xml">        src=&#123;headerPng&#125;</span><br><span class="xml">        alt=&quot;&quot;</span><br><span class="xml">        //获取DOM元素</span><br><span class="xml">        ref=&#123;(son) =&gt; &#123; this.son = son &#125;&#125;</span><br><span class="xml">    /&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Titles</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">DropdownMenu</span> <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;this.state.isActive&#125;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">position:</span> <span class="hljs-string">&quot;relative&quot;</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&gt;</span></span><br><span class="xml">    //去除了占位元素： - <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;titlePlaceHolder&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">PageOne</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>渲染结果：<br><img src="/img/posts_img/20201213093355087_31820.png"></p><h3 id="this-指向问题"><a href="#this-指向问题" class="headerlink" title="this 指向问题"></a>this 指向问题</h3><p>参考链接：<br><a href="https://www.cnblogs.com/felearn/p/this-zhi-xiang-wen-ti.html">this 指向问题</a><br><a href="https://www.cnblogs.com/dongcanliang/p/7054176.html">this 指向详细解析</a><br>这里只对实战中遇到的 this 做简要分析，具体的需要详细学习。<br><strong>DOM事件处理函数</strong><br>(1)当函数被当做监听事件处理函数时， 其 this 指向触发该事件的元素 （针对于addEventListener事件）<br>(2)代码被内联处理函数调用时，它的this指向监听器所在的DOM元素,当代码被包括在函数内部执行时，其this指向等同于函数直接调用的情况</p><p><strong>setTimeout &amp; setInterval</strong><br>对于延时函数内部的回调函数的this指向全局对象window</p><p><strong>箭头函数中的 this</strong><br>(1)由于箭头函数不绑定this， 它会捕获其所在上下文的this值， 作为自己的this值。<strong>因此常被用于调用函数，改变函数的this指向，不容易出错。</strong><br>(2)方法的箭头函数this指向全局window对象，而普通函数则指向调用它的对象,箭头函数没有this</p><p>举例：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; dispatch(&#123; type: <span class="hljs-string">&quot;close_isActive_delay&quot;</span> &#125;) &#125;, <span class="hljs-number">300</span>)<br></code></pre></td></tr></table></figure><p>上述例子中，不能直接使用dispatch函数，因为在setTimeout中this指向全局对象window，使用箭头函数后自动关联上下文，this最终指向监听事件的DOM元素。(正确性有待商榷，对this不是很了解)</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">├─ group_website<br>│  └─ src<br>│     ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">App</span>.</span></span>css<br>│     ├─ components<br>│     │  ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DropdownMenu</span>.</span></span>js<br>│     │  ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DropdownSubTitle</span>.</span></span>js<br>│     │  ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DropdownTitle</span>.</span></span>js<br>│     │  ├─ page1<br>│     │  │  ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PageOne</span>.</span></span>js<br>│     │  │  └─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PageOneText</span>.</span></span>js<br>│     │  ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SubTitle</span>.</span></span>js<br>│     │  └─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Titles</span>.</span></span>js<br>│     ├─ images<br>│     │  ├─ header.png<br>│     │  ├─ pgoneBackground.png<br>│     │  └─ testImg.jpg<br>│     ├─ index.js<br>│     ├─ store<br>│     │  ├─ index.js<br>│     │  └─ reducer.js<br>│     ├─ style<br>│     │  ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DropdownMenu</span>.</span></span>css<br>│     │  ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DropdownTitle</span>.</span></span>css<br>│     │  ├─ page1<br>│     │  │  └─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PageOne</span>.</span></span>css<br>│     │  ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SubTitle</span>.</span></span>css<br>│     │  └─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Titles</span>.</span></span>css<br>│     └─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Website</span>.</span></span>js<br>└─ package-lock.json<br></code></pre></td></tr></table></figure><p>项目入口 js 文件为 <code>Website.js</code>，CSS样式存储于 <code>/store</code>文件夹下，页面组件存储于<code>/components</code>文件夹中。</p><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><h3 id="Website-js"><a href="#Website-js" class="headerlink" title="Website.js"></a>Website.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> DropdownMenu <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/DropdownMenu&#x27;</span><br><span class="hljs-keyword">import</span> Titles <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Titles&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./App.css&quot;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span><br><span class="hljs-keyword">import</span> headerPng <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./images/header.png&#x27;</span><br><span class="hljs-keyword">import</span> PageOne <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/page1/PageOne&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Website</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = store.getState()<br>        <span class="hljs-built_in">this</span>.storeChange = <span class="hljs-built_in">this</span>.storeChange.bind(<span class="hljs-built_in">this</span>)<br>        store.subscribe(<span class="hljs-built_in">this</span>.storeChange)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">storeChange</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(store.getState())<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div&gt;<br>                    &lt;div style=&#123;&#123; <span class="hljs-attr">position</span>: <span class="hljs-string">&quot;relative&quot;</span> &#125;&#125;&gt;<br>                        &lt;img style=&#123;&#123;<span class="hljs-attr">position</span>:<span class="hljs-string">&quot;absolute&quot;</span>,<span class="hljs-attr">zIndex</span>:-<span class="hljs-number">1</span>,<span class="hljs-attr">width</span>:<span class="hljs-string">&quot;100vw&quot;</span>,<span class="hljs-attr">height</span>:<span class="hljs-string">&quot;1080px&quot;</span>&#125;&#125; src=&#123;headerPng&#125; alt=<span class="hljs-string">&quot;&quot;</span> /&gt;<br>                        &lt;Titles /&gt;<br>                        &lt;DropdownMenu isActive=&#123;<span class="hljs-built_in">this</span>.state.isActive&#125; /&gt;<br>                    &lt;/div&gt;<br>                    &lt;div style=&#123;&#123;<span class="hljs-attr">position</span>:<span class="hljs-string">&quot;relative&quot;</span>&#125;&#125;&gt;<br>                        &lt;div className=<span class="hljs-string">&quot;titlePlaceHolder&quot;</span>&gt;&lt;/div&gt;<br>                        &lt;PageOne /&gt;<br>                    &lt;/div&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Website;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">z-index设置：</span><br><span class="hljs-comment">1. 设置z-index的元素必须设置position:(relative/fixed/absolute)，若不对位置有调整或特殊要求，可以单设一个relative。</span><br><span class="hljs-comment">2. 将要在z轴排序的元素用&lt;div&gt;包裹，同时在父级元素上也要设position。</span><br><span class="hljs-comment">3. 根据需要对不同的子元素设置z-index，排序。</span><br><span class="hljs-comment">***关键：所有参与的元素(包括父元素)都要设置position</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">脱离文档流后元素上移问题：</span><br><span class="hljs-comment">1. 同级元素脱离文档流后，在整体布局上不占位置。</span><br><span class="hljs-comment">2. 若要保证其他元素原有布局，用&lt;div&gt;创建一个具有原同级元素大小的元素充当占位元素。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="重难点分析"><a href="#重难点分析" class="headerlink" title="重难点分析"></a>重难点分析</h4><p><strong>页面布局</strong></p><ol><li>如何让组件脱离文档流？方法一：设置<code>position:(&quot;fixed&quot;/&quot;absolute&quot;)</code>，方法二：设置<code>display:float</code>，不过目前常用的是 flex 布局，一般用不到 float 浮动布局。</li><li>脱离文档流的好处和坏处？好处：脱离文档流可以释放元素占据的空间，让同级以及子级元素浮动到顶部，在设置图片背景的时候常用，如实战代码中的<code>&lt;img style=&#123;&#123;position:"absolute",zIndex:-1,width:"100vw",height:"1080px"&#125;&#125; src=&#123;headerPng&#125; alt=&quot;&quot; /&gt;</code>。坏处：脱离文档流后后续的布局会被打乱，很难调整。</li><li>如何克服脱离文档流后后续元素上移问题：用<code>&lt;div&gt;</code>创建一个具有原同级元素大小的元素充当占位元素，或者给父级元素设置相应的高度。实战中代码使用如下：<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">//设置position:&quot;absolute&quot;后脱离文档流</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">position:</span> <span class="hljs-string">&quot;relative&quot;</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">position:&quot;absolute&quot;</span>,zIndex:-1,width:&quot;100vw&quot;,height:&quot;1080px&quot;&#125;&#125;</span><span class="xml"><span class="hljs-tag"> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;headerPng&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Titles</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">DropdownMenu</span> <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;this.state.isActive&#125;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">position:&quot;relative&quot;</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&gt;</span></span><br><span class="xml">    //设置一个div元素，大小与上述div最大尺寸相同，占据原有位置</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;titlePlaceHolder&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">PageOne</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li>脱离文档流的元素位置设置：<code>position:(&quot;fixed&quot;/&quot;absolute&quot;)</code>属性都是相对于父级的<code>position:&quot;relative&quot;</code>进行定位的。若要进行位置定位，在父级元素单独设置<code>position:&quot;relative&quot;</code>即可。</li><li>关于 z-index 属性设置：在设置背景的时候，往往会遇到背景遮盖了优先需要显示的部分，这就需要调整 z-index 的属性，z-index 越大，显示的优先级越高。<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fortran">z-<span class="hljs-built_in">index</span>设置：<br>设置z-<span class="hljs-built_in">index</span>的(每一个)元素必须设置<span class="hljs-keyword">position</span>:(relative/fixed/absolute)，若不对位置有调整或特殊要求，可以单设一个relative。<br>将要在z轴排序的元素用&lt;div&gt;包裹，同时在父级元素上也要设<span class="hljs-keyword">position</span>。<br>根据需要对不同的子元素设置z-<span class="hljs-built_in">index</span>，排序。<br>***关键：所有参与的元素(包括父元素)都要设置<span class="hljs-keyword">position</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="Title-js"><a href="#Title-js" class="headerlink" title="Title.js"></a>Title.js</h3><p><img src="/img/posts_img/20201213093805783_19881.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;../style/Titles.css&quot;</span><br><span class="hljs-keyword">import</span> SubTitle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./SubTitle&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Titles</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;&#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> titleInfo = [<br>            &#123;<br>                titleText: <span class="hljs-string">&quot;Title1&quot;</span>,<br>                id:<span class="hljs-number">1</span>,<br>                subTitleProps: [<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;百度&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>, &#125;,<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;搜狗&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://www.sogou.com/&quot;</span>, &#125;,<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;360搜索&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://www.so.com/&quot;</span>, &#125;,<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;火狐&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://start.firefoxchina.cn/&quot;</span>, &#125;,<br>                ],<br>            &#125;,<br>            &#123;<br>                titleText: <span class="hljs-string">&quot;Title2&quot;</span>,<br>                id:<span class="hljs-number">2</span>,<br>                subTitleProps: [<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;百度&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>, &#125;,<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;搜狗&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://www.sogou.com/&quot;</span>, &#125;,<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;360搜索&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://www.so.com/&quot;</span>, &#125;,<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;火狐&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://start.firefoxchina.cn/&quot;</span>, &#125;,<br>                ],<br>            &#125;,<br>            &#123;<br>                titleText: <span class="hljs-string">&quot;Title3&quot;</span>,<br>                id:<span class="hljs-number">3</span>,<br>                subTitleProps: [<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;百度&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>, &#125;,<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;搜狗&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://www.sogou.com/&quot;</span>, &#125;,<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;360搜索&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://www.so.com/&quot;</span>, &#125;,<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;火狐&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://start.firefoxchina.cn/&quot;</span>, &#125;,<br>                ],<br>            &#125;,<br>            &#123;<br>                titleText: <span class="hljs-string">&quot;Title4&quot;</span>,<br>                id:<span class="hljs-number">4</span>,<br>                subTitleProps: [<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;百度&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>, &#125;,<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;搜狗&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://www.sogou.com/&quot;</span>, &#125;,<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;360搜索&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://www.so.com/&quot;</span>, &#125;,<br>                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;火狐&quot;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://start.firefoxchina.cn/&quot;</span>, &#125;,<br>                ],<br>            &#125;,<br>        ]<br><br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div className=<span class="hljs-string">&quot;titleContainer&quot;</span>&gt;<br>                    &lt;div className=<span class="hljs-string">&quot;leftPlaceHolder&quot;</span>&gt;&lt;/div&gt;<br>                    &lt;div className=<span class="hljs-string">&quot;rightPlaceHolder&quot;</span>&gt;<br>                        &#123;<br>                            titleInfo.map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>                                <span class="hljs-keyword">return</span> (<br>                                    &lt;SubTitle<br>                                        key=&#123;index&#125;<br>                                        titleText=&#123;item.titleText&#125;<br>                                        params=&#123;item.subTitleProps&#125;<br>                                        index=&#123;item.id&#125;<br>                                        /&gt;)<br>                            &#125;)<br>                        &#125;<br>                    &lt;/div&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Titles;<br></code></pre></td></tr></table></figure><h4 id="重难点分析-1"><a href="#重难点分析-1" class="headerlink" title="重难点分析"></a>重难点分析</h4><p><strong>组件使用思想</strong><br>React 尽量将具有相同功能的组件单独编写，一些内容变化可以通过传参的方式，事先声明存储内容的参数数组进行遍历，如上述代码所示。若功能完全一致的组件可以声明为高阶组件进行复用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">titleInfo.map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;SubTitle<br>            key=&#123;index&#125;<br>            titleText=&#123;item.titleText&#125;<br>            params=&#123;item.subTitleProps&#125;<br>            index=&#123;item.id&#125;<br>            /&gt;)<br>&#125;)<br></code></pre></td></tr></table></figure><ol><li>注意 <code>&#123;&#125;</code>是需要用<code>return()</code>返回内容的，这里也可以用<code>()=&gt;()</code>的ES6写法，默认省略<code>return</code>，自动返回括号内的内容。</li><li>通过传递<code>props</code>的方式修改通用组件<code>&lt;SubTitle /&gt;</code>中的部分内容，实现组件的高度复用。</li><li>页面布局的小技巧：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;div <span class="hljs-attribute">className</span>=<span class="hljs-string">&quot;leftPlaceHolder&quot;</span>&gt;&lt;/div&gt;<br>&lt;div <span class="hljs-attribute">className</span>=<span class="hljs-string">&quot;rightPlaceHolder&quot;</span>&gt;<br></code></pre></td></tr></table></figure>布局前实现用空<code>&lt;div&gt;</code>进行空间分配，再在相应空间内进行布局。</li></ol><h3 id="SubTitle-js"><a href="#SubTitle-js" class="headerlink" title="SubTitle.js"></a>SubTitle.js</h3><p><img src="/img/posts_img/20201213093842983_11703.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> React, &#123; Component &#125; from <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> DropdownTitle from <span class="hljs-string">&#x27;./DropdownTitle&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;../style/SubTitle.css&quot;</span><br><span class="hljs-keyword">import</span> store from <span class="hljs-string">&#x27;../store/index&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubTitle</span> <span class="hljs-title">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-keyword">constructor</span>(props) &#123;<br>        <span class="hljs-keyword">super</span>(props);<br>        <span class="hljs-keyword">this</span>.state = store.getState()<br>        <span class="hljs-keyword">this</span>.storeChange = <span class="hljs-keyword">this</span>.storeChange.bind(<span class="hljs-keyword">this</span>)<br>        store.subscribe(<span class="hljs-keyword">this</span>.storeChange)<br><br>        <span class="hljs-keyword">this</span>.handleMouseOver = <span class="hljs-keyword">this</span>.handleMouseOver.bind(<span class="hljs-keyword">this</span>)<br>        <span class="hljs-keyword">this</span>.handleMouseOut = <span class="hljs-keyword">this</span>.handleMouseOut.bind(<span class="hljs-keyword">this</span>)<br>    &#125;<br><br>    handleMouseOver() &#123;<br>        <span class="hljs-keyword">const</span> action = &#123;<br>            type: <span class="hljs-string">&quot;open_isActive_delay&quot;</span>,<br>            id: <span class="hljs-keyword">this</span>.props.index,<br>        &#125;<br>        store.dispatch(action)<br>    &#125;<br><br>    handleMouseOut() &#123;<br>        <span class="hljs-keyword">const</span> delayAction = () =&gt; (dispatch, getState) =&gt; &#123;<br>            <span class="hljs-comment">// setTimeout里用箭头函数调用dispatch函数，目的是绑定this，这里不能用bind方法，因为这样绑定的this是全局的，无效</span><br>            let timer = setTimeout(() =&gt; &#123; dispatch(&#123; type: <span class="hljs-string">&quot;close_isActive_delay&quot;</span> &#125;) &#125;, <span class="hljs-number">300</span>)<br>            console.log(<span class="hljs-keyword">this</span>.state.isActive)<br>            dispatch(&#123; type: <span class="hljs-string">&quot;add_timer&quot;</span>, timer &#125;)<br>        &#125;<br>        store.dispatch(delayAction())<br>    &#125;<br><br>    storeChange() &#123;<br>        <span class="hljs-keyword">this</span>.setState(store.getState())<br>    &#125;<br><br>    render() &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div className=<span class="hljs-string">&quot;subTitleContainer&quot;</span>&gt;<br>                &lt;div&gt;<br>                    &lt;a<br>                        className=<span class="hljs-string">&quot;textFont&quot;</span><br>                        onMouseOver=&#123;(e) =&gt; &#123;<br>                            <span class="hljs-keyword">this</span>.handleMouseOver()<br>                        &#125;&#125;<br>                        onMouseOut=&#123;(e) =&gt; &#123;<br>                            <span class="hljs-keyword">this</span>.handleMouseOut()<br>                        &#125;&#125;<br>                        <span class="hljs-comment">//this.state.id是鼠标移动到某一title时传递的id</span><br>                        <span class="hljs-comment">//this.props.index是组件遍历渲染时分配的id</span><br>                        <span class="hljs-comment">//即当两者相匹配时，证明该title被鼠标激活，此时修改样式</span><br>                        <span class="hljs-comment">//将其他title从白色设为灰色，同时将激活的title设为天蓝色</span><br>                        style=&#123;<br>                            <span class="hljs-keyword">this</span>.state.isActive ?<br>                                ((<span class="hljs-keyword">this</span>.state.id === <span class="hljs-keyword">this</span>.props.index) ?&#123; color: <span class="hljs-string">&quot;#44DAFF&quot;</span> &#125; : &#123; color: <span class="hljs-string">&quot;#666666&quot;</span> &#125;)<br>                                : &#123; color: <span class="hljs-string">&quot;white&quot;</span> &#125;<br>                        &#125;<br>                    &gt;&#123;<span class="hljs-keyword">this</span>.props.titleText&#125;&lt;/a&gt;<br>                &lt;/div&gt;<br>                &lt;DropdownTitle<br>                    params=&#123;<span class="hljs-keyword">this</span>.props.params&#125;<br>                    index=&#123;<span class="hljs-keyword">this</span>.props.index&#125;<br>                /&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br>export default SubTitle;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">redux中怎么使用setTimeout? redux-thunk中间件</span><br><span class="hljs-comment">此处用setTimeout()做延迟操作，使用户有足够时间移动到子选项</span><br><span class="hljs-comment">注意omMouseOut里面的异步操作，setTimeout执行时，会执行this.setState()，而非等待setTimeout执行完。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="重难点分析-2"><a href="#重难点分析-2" class="headerlink" title="重难点分析"></a>重难点分析</h4><p><strong>Redux-thunk</strong><br>在导航栏设计时需要考虑用户拖动鼠标的时间，假设不设置 setTimeout 延时，会导致用户鼠标离开标题后，直接触发 onMouseOut 事件，将导航栏关闭，无法点击导航栏的子选项。因此我们要给用户一定的时间从主标题移动到子标题，当用户移动到子标题时，触发子标题上的 onMouseOver 事件，清除 setTimeout 延时并维持 isActive 状态为 true。<br>由于涉及到多级的状态管理，因此使用了 Redux ，但是在 Redux 中<code>const action = &#123;type:&quot;...&quot;,...&#125;</code>只能传递对象，无法加入 <code>setTimeout()</code> 异步函数，因此我们又需要引入中间件Redux-thunk。thunk 中间件主要处理一些状态的异步操作问题：例如 setTimeout 延时, axios 请求等。<br><strong>thunk 的基础和原理在这里不过多的介绍，可以参考：</strong><br><a href="https://zhuanlan.zhihu.com/p/152237565">redux-thunk最简单的讲解，7行代码用就完事了</a><br>精炼：<br><strong>执行同步action：</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decrement</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;INCREMENT&#x27;</span>, <span class="hljs-attr">payload</span>: <span class="hljs-number">1</span> &#125;<br>&#125;<br>const mapDispatchToProps = <span class="hljs-function">(<span class="hljs-params">dispatch</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>     increment: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> dispatch(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;INCREMENT&#x27;</span>, <span class="hljs-attr">payload</span>: <span class="hljs-number">1</span>&#125;),<br>     decrement: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> dispatch( decrement() )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>执行异步action：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const delayAction =<span class="hljs-function"> <span class="hljs-params">()</span> =&gt;</span><span class="hljs-function"> (<span class="hljs-params">dispatch</span>, <span class="hljs-params">getState</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> timer = set<span class="hljs-constructor">Timeout(()</span> =&gt; &#123; dispatch(&#123; <span class="hljs-keyword">type</span>: <span class="hljs-string">&quot;close_isActive_delay&quot;</span> &#125;) &#125;, <span class="hljs-number">300</span>)<br>    dispatch(&#123; <span class="hljs-keyword">type</span>: <span class="hljs-string">&quot;add_timer&quot;</span>, timer &#125;)<br>&#125;<br>store.dispatch(delay<span class="hljs-constructor">Action()</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意事项<br>dispatch内必须是一个扁平化的object，或者是能直接返回一个{type:’REDUCERS’,payload:data}的函数</p></blockquote><hr><p><a href="https://www.zhihu.com/question/290001259/answer/467650797">在什么场景下需要用到redux的middleware,thunk？</a><br>精炼：<br>thunk 函数接收两个参数，其都是 Redux 的方法名</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">(dispatch, getState) =&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><p>thunk 可以通过 getState 方法获取 store 仓库中的所有状态，并可以在执行完自定义函数操作后将结果 dispatch 到 store 仓库中。</p><hr><p><a href="https://zhuanlan.zhihu.com/p/85403048">理解redux-thunk</a><br><a href="https://jspang.com/detailed?id=48#toc264">技术胖-Redux-thunk</a><br>thunk 的使用方法：</p><ol><li>安装 redux-thunk<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save redux-thunk</span><br></code></pre></td></tr></table></figure></li><li>配置 redux-thunk<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//在redux中使用中间件，首先要引入applyMiddleware</span><br><span class="hljs-keyword">import</span> &#123; createStore , applyMiddleware &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span> <br><span class="hljs-comment">//引入redux-thunk库</span><br><span class="hljs-keyword">import</span> thunk <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-thunk&#x27;</span><br><span class="hljs-comment">//创建数据存储仓库</span><br><span class="hljs-keyword">const</span> store = createStore( reducer, applyMiddleware(thunk))<br></code></pre></td></tr></table></figure></li><li>使用 thunk<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const func1 = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> (dispatch, getState) =&gt; &#123;<br>    let timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; dispatch(&#123; type: <span class="hljs-string">&quot;close_isActive_delay&quot;</span> &#125;) &#125;, <span class="hljs-number">300</span>)<br>    dispatch(&#123; type: <span class="hljs-string">&quot;add_timer&quot;</span>, timer &#125;)<br>&#125;<br>store.dispatch(func1())<br></code></pre></td></tr></table></figure>这里创建一个func1的函数，其返回一个 <strong>thunk 函数</strong>，thunk 函数接收两个参数，并在内部写业务逻辑，得到的 action 对象通过 dispatch 注入，并最后将 thunk 函数通过 dispatch 注入到 store 中。这里有一个点需要注意：即为什么要在 thunk 函数外嵌套一层函数，而不是直接将 thunk 函数注入到 store 中？这是因为外层嵌套函数后可以传入一些自定义的参数，由于 thunk 函数接收的两个参数是固定的，因此就有必要嵌套一层函数使得 thunk 函数可以使用用户自定义的一些业务逻辑参数，例如<code>const func1 = (myname) =&gt; (dispatch, getState) =&gt; &#123;...&#125;</code></li></ol><p><strong>注意<code>store.dispatch(func1())</code>中注入的是函数的调用而非函数名。</strong><br>当然上述函数定义也可以写为：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const func1 = <span class="hljs-function"><span class="hljs-params">(xxx)</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        (dispatch, getState) =&gt; &#123;<br>            let timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; dispatch(&#123; type: <span class="hljs-string">&quot;close_isActive_delay&quot;</span> &#125;) &#125;, <span class="hljs-number">300</span>)<br>            dispatch(&#123; type: <span class="hljs-string">&quot;add_timer&quot;</span>, timer &#125;)<br>        &#125;<br>    )<br>&#125;<br>store.dispatch(func1())<br></code></pre></td></tr></table></figure><h3 id="DropdownMenu-js"><a href="#DropdownMenu-js" class="headerlink" title="DropdownMenu.js"></a>DropdownMenu.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createPortal &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;../style/DropdownMenu.css&quot;</span><br><span class="hljs-keyword">import</span> &#123; CSSTransition &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-transition-group&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../store/index&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DropdownMenu</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;&#125;<br>        <span class="hljs-keyword">const</span> dom = <span class="hljs-built_in">window</span>.document<br>        <span class="hljs-built_in">this</span>.node = dom.createElement(<span class="hljs-string">&quot;div&quot;</span>)<br>        dom.body.appendChild(<span class="hljs-built_in">this</span>.node)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">componentWillUnmount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">window</span>.document.body.removeChild(<span class="hljs-built_in">this</span>.node)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> createPortal((<br>            &lt;div<br>                className=<span class="hljs-string">&quot;menuContainer&quot;</span><br>            &gt;<br>                &lt;CSSTransition<br>                    <span class="hljs-keyword">in</span>=&#123;<span class="hljs-built_in">this</span>.props.isActive&#125;<br>                    timeout=&#123;<span class="hljs-number">200</span>&#125;<br>                    classNames=&#123;&#123;<br>                        enter: <span class="hljs-string">&quot;menuEnter&quot;</span>,<br>                        enterActive: <span class="hljs-string">&quot;menuEnterActive&quot;</span>,<br>                        enterDone: <span class="hljs-string">&quot;menuEnterDone&quot;</span>,<br>                        exit: <span class="hljs-string">&quot;menuExit&quot;</span>,<br>                        exitActive: <span class="hljs-string">&quot;menuExitActive&quot;</span>,<br>                        exitDone: <span class="hljs-string">&quot;menuExitDone&quot;</span>,<br>                    &#125;&#125;<br>                &gt;<br>                    &lt;div className=<span class="hljs-string">&quot;dropDownMenu&quot;</span>&gt;&lt;/div&gt;<br>                &lt;/CSSTransition&gt;<br>            &lt;/div&gt;<br>        ), <span class="hljs-built_in">this</span>.node);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> DropdownMenu;<br></code></pre></td></tr></table></figure><h4 id="重难点分析-3"><a href="#重难点分析-3" class="headerlink" title="重难点分析"></a>重难点分析</h4><p>主要实践了 React-Portal，其实这里可以用脱离文档流加定位的方式实现，只是单纯的为练习而使用，React-Portal 具体使用可以参考先前的文章。</p><h2 id="页面滚动动画"><a href="#页面滚动动画" class="headerlink" title="页面滚动动画"></a>页面滚动动画</h2><h3 id="PageOneText-js"><a href="#PageOneText-js" class="headerlink" title="PageOneText.js"></a>PageOneText.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;../../style/page1/PageOne.css&quot;</span><br><span class="hljs-keyword">import</span> &#123; Typography &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../store&#x27;</span>; <span class="hljs-comment">//可省略index.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;../../style/page1/PageOne.css&quot;</span><br><span class="hljs-keyword">import</span> testImg <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../images/testImg.jpg&#x27;</span><br><br><span class="hljs-keyword">const</span> &#123; Title &#125; = Typography;<br><span class="hljs-keyword">const</span> &#123; Paragraph &#125; = Typography;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageOneText</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = store.getState()<br>        <span class="hljs-built_in">this</span>.storeChange = <span class="hljs-built_in">this</span>.storeChange.bind(<span class="hljs-built_in">this</span>)<br>        store.subscribe(<span class="hljs-built_in">this</span>.storeChange)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">handleScroll</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.documentElement.scrollTop &gt; <span class="hljs-number">900</span>) &#123;<br>            <span class="hljs-keyword">const</span> action = &#123;<br>                type: <span class="hljs-string">&quot;handle_scroll&quot;</span>,<br>            &#125;<br>            store.dispatch(action)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.documentElement.scrollTop &lt; <span class="hljs-number">550</span>) &#123;<br>            <span class="hljs-keyword">const</span> action = &#123;<br>                type: <span class="hljs-string">&quot;handle_noscroll&quot;</span>,<br>            &#125;<br>            store.dispatch(action)<br>        &#125;<br>        <span class="hljs-comment">// console.log(document.documentElement.scrollTop)</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">storeChange</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(store.getState())<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-comment">// 挂载 onscroll 监听事件，object.onscroll = function()</span><br>        <span class="hljs-built_in">window</span>.onscroll = <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-built_in">this</span>.handleScroll() &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div className=<span class="hljs-string">&quot;textContainer&quot;</span>&gt;<br>                &lt;img className=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.state.pgoneClassNames.img&#125;</span>`</span>&#125; src=&#123;testImg&#125; alt=<span class="hljs-string">&quot;&quot;</span> /&gt;<br>                &lt;Title className=&#123;<span class="hljs-string">`title <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.state.pgoneClassNames.title&#125;</span>`</span>&#125;&gt;&#123;<span class="hljs-built_in">this</span>.props.title&#125;&lt;/Title&gt;<br>                &lt;Paragraph<br>                    ellipsis=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">expandable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">symbol</span>: <span class="hljs-string">&#x27;more&#x27;</span> &#125;&#125;<br>                    className=&#123;<span class="hljs-string">`texts paragraph <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.state.pgoneClassNames.text&#125;</span>`</span>&#125;<br>                &gt;<br>                    &#123;<span class="hljs-built_in">this</span>.props.text&#125;<br>                &lt;/Paragraph&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> PageOneText;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">页面滚动动画机制：</span><br><span class="hljs-comment">页面滚动时界面会不断渲染，因此在componentDidMount生命周期中可以监听scrollTop页面位置，作为动画入场条件。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="重难点分析-4"><a href="#重难点分析-4" class="headerlink" title="重难点分析"></a>重难点分析</h4><p><strong>页面滚动事件</strong></p><ol><li>处理页面滚动的函数<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">handleScroll</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">if</span> (document<span class="hljs-selector-class">.documentElement</span><span class="hljs-selector-class">.scrollTop</span> &gt; <span class="hljs-number">900</span>) &#123;<br>        const action = &#123;<br>            type: <span class="hljs-string">&quot;handle_scroll&quot;</span>,<br>        &#125;<br>        store.dispatch(action)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (document<span class="hljs-selector-class">.documentElement</span><span class="hljs-selector-class">.scrollTop</span> &lt; <span class="hljs-number">550</span>) &#123;<br>        const action = &#123;<br>            type: <span class="hljs-string">&quot;handle_noscroll&quot;</span>,<br>        &#125;<br>        store.dispatch(action)<br>    &#125;<br>    <span class="hljs-comment">// console.log(document.documentElement.scrollTop)</span><br>&#125;<br></code></pre></td></tr></table></figure><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement">document.documentElement</a>返回document文档的根节点元素，例如HTML文档则返回<code>&lt;html&gt;</code>元素节点。<br>通过<code>document.documentElement.scrollTop</code>可以获得HTML文档滚动条距离其顶部的高度，由于显示分辨率的不同，scrollTop也不同，具体调试滚动阈值的时候可以通过<code>console.log(document.documentElement.scrollTop)</code>来实时打印确定。</li></ol><blockquote><p>题外话：document.documentElement和document.body区别<br>body是DOM对象里的body子节点，即body标签<br>documentElement 是整个节点树的根节点root</p></blockquote><ol start="2"><li>挂载监听事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 挂载 onscroll 监听事件，object.onscroll = function()</span><br>    <span class="hljs-built_in">window</span>.onscroll = <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-built_in">this</span>.handleScroll() &#125;<br>&#125;<br></code></pre></td></tr></table></figure>上述<code>handleScroll()</code>只定义了监听事件的处理函数，我们还需要在合适的位置将监听函数挂载。通常用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/onscroll">window.onScroll</a>为当前页面的页面滚动事件添加事件处理函数。<br>我们将页面滚动监听放在<code>componentDidMount</code>中，在页面组件渲染完成后挂载监听事件，当用户滚动页面时会不断触发监听事件所添加的事件处理函数<code>handleScroll</code>，当滚动距离超过阈值时，执行动画操作。</li></ol><h3 id="PageOne-js"><a href="#PageOne-js" class="headerlink" title="PageOne.js"></a>PageOne.js</h3><p>用于包裹<code>&lt;PageOneText /&gt;</code>组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;../../style/page1/PageOne.css&quot;</span><br><span class="hljs-keyword">import</span> PageOneText <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./PageOneText&#x27;</span><br><span class="hljs-keyword">import</span> testImg <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../images/testImg.jpg&#x27;</span><br><span class="hljs-keyword">import</span> pgoneBackground <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../images/pgoneBackground.png&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageOne</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> itemList = [<br>            &#123;<br>                title: <span class="hljs-string">&quot;h1. Title1&quot;</span>,<br>                text: <span class="hljs-string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\</span><br><span class="hljs-string">                XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\</span><br><span class="hljs-string">                XXXXXXXXXXXXXXXXXXxxxxxxxxxxxxxxx\</span><br><span class="hljs-string">                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\</span><br><span class="hljs-string">                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>,<br>                imgSrc: testImg,<br>            &#125;,<br>            &#123;<br>                title: <span class="hljs-string">&quot;h2. Title2&quot;</span>,<br>                text: <span class="hljs-string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\</span><br><span class="hljs-string">                XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\</span><br><span class="hljs-string">                XXXXXXXXXXXXXXXXXXxxxxxxxxxxxxxxx\</span><br><span class="hljs-string">                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\</span><br><span class="hljs-string">                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>,<br>                imgSrc: testImg,<br>            &#125;,<br>            &#123;<br>                title: <span class="hljs-string">&quot;h3. Title3&quot;</span>,<br>                text: <span class="hljs-string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\</span><br><span class="hljs-string">                XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\</span><br><span class="hljs-string">                XXXXXXXXXXXXXXXXXXxxxxxxxxxxxxxxx\</span><br><span class="hljs-string">                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\</span><br><span class="hljs-string">                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>,<br>                imgSrc: testImg,<br>            &#125;,<br>        ]<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div className=<span class="hljs-string">&quot;pgOnePlaceholder&quot;</span>&gt;<br>                &lt;img<br>                    src=&#123;pgoneBackground&#125;<br>                    style=&#123;&#123;<br>                        opacity: <span class="hljs-number">1</span>,<br>                        width: <span class="hljs-string">&quot;100%&quot;</span>,<br>                        height: <span class="hljs-string">&quot;100%&quot;</span>,<br>                        position: <span class="hljs-string">&quot;absolute&quot;</span>, <span class="hljs-comment">//脱离文档流，但是基于父级position:&quot;relative&quot;定位，置于背景的一种方法</span><br>                    &#125;&#125;<br>                    alt=<span class="hljs-string">&quot;&quot;</span> /&gt;<br>                &#123;<br>                    itemList.map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> (<br>                        &lt;PageOneText<br>                            key=&#123;index&#125;<br>                            imgSrc=&#123;item.imgSrc&#125;<br>                            title=&#123;item.title&#125;<br>                            text=&#123;item.text&#125; /&gt;<br>                    ))<br>                &#125;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> PageOne;<br></code></pre></td></tr></table></figure><h1 id="CSS-动画"><a href="#CSS-动画" class="headerlink" title="CSS 动画"></a>CSS 动画</h1><p>关于 CSS 动画，这里单独拿出一块来讲，因为这块踩的坑比较多。<br>我在使用 CSS 动画时，前期采用了 React 官方的一个动画库 <code>react-transition-group</code> ，但是由于教程比较少，一些问题得不到解决，所以后面改用了 CSS 的 keyframe 帧动画。</p><h2 id="CSSTransition"><a href="#CSSTransition" class="headerlink" title="CSSTransition"></a>CSSTransition</h2><p><a href="https://reactcommunity.org/react-transition-group/css-transition">react-transition-group CSSTransition</a><br>使用方法：</p><ol><li>安装 react-transition-group<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">npm install --<span class="hljs-built_in">save</span> react-transition-<span class="hljs-built_in">group</span><br></code></pre></td></tr></table></figure></li><li>配置 react-transition-group<figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> &#123; CSSTransition &#125; <span class="hljs-keyword">from</span> &#x27;react-transition-<span class="hljs-keyword">group</span>&#x27;<br></code></pre></td></tr></table></figure></li><li>使用 CSSTransition<br>用<code>&lt;CSSTransition&gt;&lt;/ CSSTransition&gt;</code>标签包裹需要动画的组件(只能是一个整体，即多个子组件需要用<code>&lt;div&gt;</code>包裹)<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">CSSTransition</span></span><br><span class="hljs-tag">    <span class="hljs-attr">in</span>=<span class="hljs-string">&#123;&#125;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">classNames</span>=<span class="hljs-string">&#123;&#125;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">timeout</span>=<span class="hljs-string">&#123;200&#125;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">onEnter</span>=<span class="hljs-string">&#123;(el)</span>=&gt;</span>(...)&#125;<br>    ...<br>&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">subComponent</span> /&gt;</span><br><span class="hljs-tag">&lt;/ <span class="hljs-attr">CSSTransition</span>&gt;</span><br></code></pre></td></tr></table></figure><code>&lt;CSSTransition&gt;</code> 标签参数参考官方文档，必要的参数为<code>in, classNames, timeout</code>，in 参数接收 true/false，表示动画执行的条件；classNames 参数设定动画的CSS样式；timeout 设定动画执行时间。<br>classNames 要区别于 className，其次，classNames 有两种声明方式：<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">classNames = &#123;&#123;<br>    enter: <span class="hljs-string">&quot;xx&quot;</span>,<br>    enterActive: <span class="hljs-string">&quot;xxx&quot;</span>,<br>    enterDone: <span class="hljs-string">&quot;xxxx&quot;</span>,<br>&#125;&#125;<br>##########<br>.xx &#123;&#125;<br>.xxx &#123;&#125;<br>.xxxx &#123;&#125;<br></code></pre></td></tr></table></figure>或者<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">classNames = <span class="hljs-string">&quot;xx&quot;</span><br>##########<br>.xx-enter &#123;&#125;<br>.xx-enter-active &#123;&#125;<br>.xx-enter-done &#123;&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="使用CSSTransition的一些坑"><a href="#使用CSSTransition的一些坑" class="headerlink" title="使用CSSTransition的一些坑"></a>使用CSSTransition的一些坑</h2><p>无法设置目标的初始状态，例如一些淡入淡出的效果，目标未进行动画的时候理论上应该隐藏在用户视野之外。但在使用CSSTransition动画时，若设置目标 <code>opacity:0</code>，则无法播放动画效果。<br><strong>可能原因：</strong><br>目标还未挂载渲染时候，<code>&lt;CSSTransition&gt;</code>已经挂载，后续的CSS样式遮盖了动画效果。目前没有什么比较好的解决方法。此外，目标组件内容若是接收传递的props，也会出现上述问题。因此，在PageOne 页面制作的时候，采用了 keyframe 帧动画。</p><h1 id="CSS-Keyframes"><a href="#CSS-Keyframes" class="headerlink" title="CSS Keyframes"></a>CSS Keyframes</h1><p>参考链接：<br><a href="https://www.w3cplus.com/css3/CSS3-animation.html">CSS动画 </a></p><h2 id="定义关键帧"><a href="#定义关键帧" class="headerlink" title="定义关键帧"></a>定义关键帧</h2><p><code>@keyframes 关键帧名称 &#123;&#125;</code><br>其中 <code>0%, 100%</code> 代表关键帧位置；<code>opacity</code> 表示透明度，<code>transform</code> 表示相对于目标初始位置的位移。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> leftToRight &#123;<br>    0%&#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100%</span>);<br>    &#125;<br>    100%&#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> topToBottom &#123;<br>    0%&#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateY</span>(-<span class="hljs-number">100%</span>);<br>    &#125;<br>    100%&#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义animation动画"><a href="#定义animation动画" class="headerlink" title="定义animation动画"></a>定义animation动画</h2><p><a href="https://www.w3school.com.cn/cssref/pr_animation.asp">CSS3 animation</a><br><code>animation: name duration timing-function delay iteration-count direction fill-mode;</code>包含以下几个参数：</p><ol><li>name: keyframes 的动画样式名称</li><li>duration: 动画时长</li><li>timing-function: ease-in 快进慢出；ease-out 慢进快出；ease-in-out；…</li><li>delay：动画延迟，等待n秒后开始动画 <a href="https://www.w3school.com.cn/cssref/pr_animation-delay.asp">animation-delay</a></li><li>iteration-count：循环播放次数</li><li>direction：方向</li><li>fill-mode：规定动画在播放之前或之后，其动画效果是否可见。 none | forwards | backwards | <strong>both</strong>; <a href="https://www.w3school.com.cn/cssref/pr_animation-fill-mode.asp">CSS3 animation-fill-mode</a></li></ol><p>其中 animation-fill-mode 是解决动画目标初始化的关键，当 animation-fill-mode 设定为 both 时，以上述代码为例，动画播放前，目标元素动画效果可见，其为<code>opacity:0; transform:translateX(-100%)</code>，即隐藏，而动画播放结束后，目标元素动画效果将会停留在关键帧<code>100%</code>的地方，即显示。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item_row</span> &#123;<br>    <span class="hljs-attribute">animation</span>: leftToRight <span class="hljs-number">1000ms</span> both ease-out;<br>&#125;<br><br><span class="hljs-selector-class">.item_delay_row</span> &#123;<br>    <span class="hljs-attribute">animation</span>: leftToRight <span class="hljs-number">1000ms</span> ease-out <span class="hljs-number">100ms</span> both;<br>&#125;<br><br><span class="hljs-selector-class">.item_column</span> &#123;<br>    <span class="hljs-attribute">animation</span>: topToBottom <span class="hljs-number">1500ms</span> both ease-out;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义触发动画的监听事件"><a href="#定义触发动画的监听事件" class="headerlink" title="定义触发动画的监听事件"></a>定义触发动画的监听事件</h2><p>监听事件由上述的页面滚动触发。首先我们需要设定一个充当占位的样式(可为空)，此处<a href="https://www.w3school.com.cn/cssref/pr_class_visibility.asp">visibility</a>设为hidden表示该元素不可见但仍保留其布局空间。当监听事件触发时，我们向className中添加相应动画的CSS样式，替换原有的占位样式即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.hidden</span> &#123;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">this.state.pgoneClassNames.img</span>&#125;`&#125; <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;testImg&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Title</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">title</span> $&#123;<span class="hljs-attr">this.state.pgoneClassNames.title</span>&#125;`&#125;&gt;</span>&#123;this.props.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Paragraph</span></span></span><br><span class="xml">    ellipsis=</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">rows:</span> <span class="hljs-number">5</span>, expandable: <span class="hljs-literal">true</span>, symbol: <span class="hljs-string">&#x27;more&#x27;</span> &#125;&#125;</span><br><span class="xml">    className=&#123;`texts paragraph $&#123;this.state.pgoneClassNames.text&#125;`&#125;</span><br><span class="xml">&gt;</span><br><span class="xml">    &#123;this.props.text&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Paragraph</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>采用 CSS Keyframes 的另一个好处是能够将动画 CSS 样式和初始 CSS 样式分开，例如下述代码<code>title $&#123;xxx&#125;</code>，用 ES6 模板字符串的方式，title 是固定的初始样式，<code>$&#123;xxx&#125;</code>内可以传入动态的动画样式。</p><h1 id="CSS-样式布局心得"><a href="#CSS-样式布局心得" class="headerlink" title="CSS 样式布局心得"></a>CSS 样式布局心得</h1><p>调整CSS样式心得：</p><ol><li>从网页打开F12，选择元素查看其className进行定位。</li><li>width,height 宽高100%(或百分比设置)针对的是上一级元素(父级元素)，<br>因此若多余空白的<div>包裹应将其删除，或者将上级空白div设置宽高100%。</div></li></ol>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>React</tag>
      
      <tag>React-Portal</tag>
      
      <tag>Redux</tag>
      
      <tag>Redux-thunk</tag>
      
      <tag>CSS-animation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客备份</title>
    <link href="/2020/12/08/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD/"/>
    <url>/2020/12/08/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo博客备份"><a href="#hexo博客备份" class="headerlink" title="hexo博客备份"></a>hexo博客备份</h1><p>参考链接：<br><a href="https://www.itrhx.com/2019/09/29/A53-hexo-backup/">使用 Hexo-Git-Backup 插件备份你的 Hexo 博客 </a><br><a href="https://blog.csdn.net/qq_41793001/article/details/103151182">使用hexo-git-backup插件备份博客源文件</a><br><a href="https://github.com/coneycode/hexo-git-backup">hexo-git-backup</a></p><hr><p>利用 <code>hexo-git-backup</code> 插件进行备份</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>安装备份插件<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ npm install hexo-git-backup@0.0.91 <span class="hljs-params">--save</span>  <span class="hljs-string">//Hexo</span> <span class="hljs-keyword">version</span> = 2.x.x<br>$ npm install hexo-git-backup <span class="hljs-params">--save</span>  <span class="hljs-string">//Hexo</span> <span class="hljs-keyword">version</span> &gt; 3.x.x<br></code></pre></td></tr></table></figure></li><li>到 Hexo 博客根目录的 <code>_config.yml</code> 配置文件里添加以下配置：(我使用了fluid主题，所以需要在<code>_config.fluid.yml</code>中同步配置)<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">backup</span>:<br>  <span class="hljs-attribute">type</span>: git<br>  <span class="hljs-attribute">theme</span>: fluid<br>  <span class="hljs-attribute">message</span>: Back up my blog<br>  <span class="hljs-attribute">repository</span>:<br>    <span class="hljs-attribute">github</span>: git<span class="hljs-variable">@github</span>.<span class="hljs-attribute">com</span>:coneycode/hexo-git-backup.git,hexo<br></code></pre></td></tr></table></figure>参数解释：<br>theme：你要备份的主题名称<br>message：自定义提交信息<br>repository：仓库名，注意仓库地址后面要添加一个分支名，比如我创建了一个 hexo 分支</li><li>在github仓库新建分支，分支名与上述配置对应</li><li>此时github仓库中应存在 master(或main)和hexo ，在提交的时候只需在 master 中使用以下命令备份你的博客即可：<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo backup<br></code></pre></td></tr></table></figure>或者使用以下简写命令也可以：<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo b<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Portal 实战——登陆弹窗</title>
    <link href="/2020/12/08/React%20Portal%20%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E7%99%BB%E9%99%86%E5%BC%B9%E7%AA%97/"/>
    <url>/2020/12/08/React%20Portal%20%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E7%99%BB%E9%99%86%E5%BC%B9%E7%AA%97/</url>
    
    <content type="html"><![CDATA[<h1 id="React-Portal-实战——登陆弹窗"><a href="#React-Portal-实战——登陆弹窗" class="headerlink" title="React Portal 实战——登陆弹窗"></a>React Portal 实战——登陆弹窗</h1><h2 id="实现效果："><a href="#实现效果：" class="headerlink" title="实现效果："></a>实现效果：</h2><p>点击初始界面登录按钮，跳转到登录路径，用 Portal 创建一个登录弹窗以及灰色蒙版背景。<br>要求：</p><ol><li>同时保证原始界面内容保留并显示在蒙版后。</li><li>点击退出按钮后，重定向到“个人档案”页面。</li></ol><p>效果图：<br><img src="/img/posts_img/20201208094720091_21532.png"></p><h2 id="登陆界面代码"><a href="#登陆界面代码" class="headerlink" title="登陆界面代码"></a>登陆界面代码</h2><p>直接解读代码内容<br><strong>重点：</strong></p><ol><li>使用 Portal 需要在组件开头导入 <code>ReactDOM.createPortal()</code> 方法，即 <code>import &#123; createPortal &#125; from &#39;react-dom&#39;</code></li><li>掌握 Portal 的组织结构：创建DOM节点，添加JSX元素，在组件销毁前移除DOM节点</li><li>React Router 重定向</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createPortal &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;../index.css&quot;</span><br><span class="hljs-keyword">import</span> registerPng <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../images/register.png&#x27;</span><br><span class="hljs-comment">//AntDesign调用</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span><br><span class="hljs-keyword">import</span> &#123; Input, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; EyeInvisibleOutlined, EyeTwoTone &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Register</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            isRender: <span class="hljs-literal">true</span>,<br>        &#125;<br>        <span class="hljs-built_in">this</span>.redirect = <span class="hljs-built_in">this</span>.redirect.bind(<span class="hljs-built_in">this</span>)<br><br>        <span class="hljs-keyword">const</span> dom = <span class="hljs-built_in">window</span>.document;<br>        <span class="hljs-built_in">this</span>.node = dom.createElement(<span class="hljs-string">&quot;div&quot;</span>)<br>        <span class="hljs-built_in">this</span>.node.setAttribute(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;account&quot;</span>) <span class="hljs-comment">//this.node.id = &quot;account&quot;</span><br>        dom.body.appendChild(<span class="hljs-built_in">this</span>.node)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">redirect</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-comment">// 多余步骤，跳转时其实已经执行了componentWillUnmount；</span><br>        <span class="hljs-comment">// 此处只做关于组件销毁的常用方法记录；</span><br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            isRender: <span class="hljs-literal">true</span>,<br>        &#125;)<br>        <span class="hljs-built_in">this</span>.props.history.push(<span class="hljs-string">&quot;/person/齐天大圣&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">componentWillUnmount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">window</span>.document.body.removeChild(<span class="hljs-built_in">this</span>.node)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> createPortal(<br>            <span class="hljs-built_in">this</span>.state.isRender ? (<br>                &lt;div&gt;<br>                    &lt;div className=<span class="hljs-string">&quot;beijing&quot;</span>&gt;<br>                        &lt;div className=<span class="hljs-string">&quot;dengLu&quot;</span>&gt;<br>                            &lt;img<br>                                src=&#123;registerPng&#125;<br>                                style=&#123;&#123;<br>                                    borderRadius: <span class="hljs-string">&quot;15px 15px 0 0&quot;</span>,<br>                                    margin: <span class="hljs-number">0</span>,<br>                                    padding: <span class="hljs-number">0</span>,<br>                                &#125;&#125;<br>                            /&gt;<br>                            &lt;div className=<span class="hljs-string">&quot;inputContainer&quot;</span>&gt;<br>                                &lt;h3 style=&#123;&#123; <span class="hljs-attr">marginLeft</span>: <span class="hljs-string">&quot;40px&quot;</span> &#125;&#125;&gt;账户&lt;/h3&gt;<br>                                &lt;Input<br>                                    placeholder=<span class="hljs-string">&quot;Please enter account...&quot;</span><br>                                    className=<span class="hljs-string">&quot;inputStyle&quot;</span><br>                                    style=&#123;&#123;<br>                                        width: <span class="hljs-string">&quot;70%&quot;</span>,<br>                                        height: <span class="hljs-string">&quot;30px&quot;</span>,<br>                                        marginRight: <span class="hljs-string">&quot;40px&quot;</span><br>                                    &#125;&#125;<br>                                /&gt;<br>                            &lt;/div&gt;<br>                            &lt;div className=<span class="hljs-string">&quot;inputContainer&quot;</span>&gt;<br>                                &lt;h3 style=&#123;&#123; <span class="hljs-attr">marginLeft</span>: <span class="hljs-string">&quot;40px&quot;</span> &#125;&#125;&gt;密码&lt;/h3&gt;<br>                                &lt;Input.Password<br>                                    placeholder=<span class="hljs-string">&quot;input password&quot;</span><br>                                    iconRender=&#123;<span class="hljs-function"><span class="hljs-params">visible</span> =&gt;</span> (visible ? <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">EyeTwoTone</span> /&gt;</span></span> : <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">EyeInvisibleOutlined</span> /&gt;</span></span>)&#125;<br>                                    style=&#123;&#123;<br>                                        width: <span class="hljs-string">&quot;70%&quot;</span>,<br>                                        height: <span class="hljs-string">&quot;30px&quot;</span>,<br>                                        marginRight: <span class="hljs-string">&quot;40px&quot;</span><br>                                    &#125;&#125;<br>                                /&gt;<br>                            &lt;/div&gt;<br>                            &lt;div className=<span class="hljs-string">&quot;confirmAction&quot;</span>&gt;<br>                                &lt;Button&gt;确认&lt;/Button&gt;<br>                                &lt;Button onClick=&#123;<span class="hljs-built_in">this</span>.redirect&#125;&gt;取消&lt;/Button&gt;<br>                            &lt;/div&gt;<br>                        &lt;/div&gt;<br>                    &lt;/div&gt;<br>                &lt;/div&gt;<br>            ) : <span class="hljs-literal">null</span><br>            , <span class="hljs-built_in">this</span>.node<br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Register;<br></code></pre></td></tr></table></figure><h3 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h3><ol><li>React v16 Portal 创建的调用方法<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123; createPortal &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br></code></pre></td></tr></table></figure></li><li>Portal 主体<br>constructor()构造函数中创建DOM节点<br>(给DOM节点添加id属性)<br>将DOM节点添加到<code>&lt;body&gt;</code>中<br>用<code>createPortal</code>方法创建 Portal，传入可渲染子元素以及挂载的DOM节点，并在<code>render</code>中返回<br>在<code>componentWillUnmount</code>中，即组件销毁(路由跳转，display:none等都算将组建销毁)前，移除该DOM节点<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Register</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        ...<br>        <span class="hljs-comment">//创建dom节点</span><br>        <span class="hljs-keyword">const</span> dom = <span class="hljs-built_in">window</span>.document;<br>        <span class="hljs-built_in">this</span>.node = dom.createElement(<span class="hljs-string">&quot;div&quot;</span>)<br>        <span class="hljs-built_in">this</span>.node.setAttribute(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;account&quot;</span>) <span class="hljs-comment">//this.node.id = &quot;account&quot;</span><br>        dom.body.appendChild(<span class="hljs-built_in">this</span>.node)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">componentWillUnmount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">window</span>.document.body.removeChild(<span class="hljs-built_in">this</span>.node)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> createPortal(<br>            (<br>                &lt;div&gt;<br>                    ...<br>                &lt;/div&gt;<br>            )<br>            , <span class="hljs-built_in">this</span>.node<br>        )<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Register;<br></code></pre></td></tr></table></figure></li><li>React Router 路由重定向<br>路由重定向可以实现路由路径的直接跳转，例如进入某一组件，在碰到重定向后自动跳转到另一组件。<br>路由重定向可以分为：<strong>标签式重定向</strong> 和 <strong>编程式重定向</strong><br>详细参考 Router 路由文章，此处用了编程式的重定向方法<code>this.props.history.push(&quot;url&quot;)</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">redirect</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 多余步骤，跳转时其实已经执行了componentWillUnmount；</span><br>    <span class="hljs-comment">// 此处只做关于组件销毁的常用方法记录；</span><br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>        isRender: <span class="hljs-literal">true</span>,<br>    &#125;)<br>    <span class="hljs-built_in">this</span>.props.history.push(<span class="hljs-string">&quot;/person/齐天大圣&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>React-Portal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Portal</title>
    <link href="/2020/12/08/React_Portal/"/>
    <url>/2020/12/08/React_Portal/</url>
    
    <content type="html"><![CDATA[<h1 id="React-Portal"><a href="#React-Portal" class="headerlink" title="React Portal"></a>React Portal</h1><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/29880992">传送门：React Portal</a><br>官方网站：<a href="https://reactjs.org/docs/portals.html#___gatsby">Portals-React</a></p><hr><h2 id="Portal-–-传送门"><a href="#Portal-–-传送门" class="headerlink" title="Portal – 传送门"></a>Portal – 传送门</h2><p>为什么React需要传送门？<br>React Portal之所以叫Portal，因为做的就是和“传送门”一样的事情：<strong>render到一个组件里面去，实际改变的是网页上另一处的DOM结构。</strong><br>在React中，一切皆为组件，用组件可以表示一切界面中发生的逻辑，不过，有些特例处理起来还比较麻烦，比如，某个组件在渲染时，在某种条件下需要显示一个对话框(Dialog)，这该怎么做呢？<br>最直观的做法，就是直接在JSX中把Dialog画出来，像下面代码的样子。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;<br>   &lt;<span class="hljs-keyword">div</span>&gt; ... &lt;/<span class="hljs-keyword">div</span>&gt;<br>   &#123; needDialog ? &lt;Dialog /&gt; : <span class="hljs-keyword">null</span> &#125;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>问题是，我们写一个Dialog组件，就这么渲染的话，Dialog最终渲染产生的HTML就存在于上面JSX产生的HTML一起了，类似下面这样。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;<br>   &lt;<span class="hljs-keyword">div</span>&gt; ... &lt;/<span class="hljs-keyword">div</span>&gt;<br>   &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;dialog&quot;</span>&gt;Dialog Content&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>可是问题来了，对话框应该是一个独立的组件，通常应该显示在屏幕的最中间，现在Dialog被包在其他组件中，要用CSS的position属性控制Dialog位置，就要求从Dialog往上一直到body没有其他postion是relative的元素干扰，这有点难为作为通用组件的Dialog，毕竟，谁管得住所有组件不用position呢。还有一点，Dialog的样式，因为包在其他元素中，各种样式纠缠，CSS样式太容易搞成一坨浆糊了。<br>因此，React 就引入了 Portal 传送门的概念。</p><h2 id="React-v16-之前的传送门实现方法"><a href="#React-v16-之前的传送门实现方法" class="headerlink" title="React v16 之前的传送门实现方法"></a>React v16 之前的传送门实现方法</h2><p>为什么要讲旧版本的实现方法呢？因为旧版本更能体现传送门实现的一个思想，而新版本更多的是一个封装和便于使用，理解了旧版本就可以更好地使用新版本 Portal 了。<br>在v16之前，实现“传送门”，要用到两个秘而不宣的React API</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">unstable_renderSubtreeIntoContainer</span><br><span class="hljs-attribute">unmountComponentAtNode</span><br></code></pre></td></tr></table></figure><ul><li>第一个unstable_renderSubtreeIntoContainer。这个API的作用就是建立“传送门”，可以把JSX代表的组件结构塞到传送门里面去，让他们在传送门的另一端渲染出来。</li><li>第二个unmountComponentAtNode用来清理第一个API的副作用，通常在unmount的时候调用，不调用的话会造成资源泄露的。</li></ul><p>一个通用的Dialog组件的实现差不多是这样，注意看renderPortal中的注释。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123;Component&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;unstable_renderSubtreeIntoContainer, unmountComponentAtNode&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dialog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> doc = <span class="hljs-built_in">window</span>.document;<br>    <span class="hljs-built_in">this</span>.node = doc.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    doc.body.appendChild(<span class="hljs-built_in">this</span>.node);<br><br>    <span class="hljs-built_in">this</span>.renderPortal(<span class="hljs-built_in">this</span>.props);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">componentDidUpdate</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.renderPortal(<span class="hljs-built_in">this</span>.props);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">componentWillUnmount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    unmountComponentAtNode(<span class="hljs-built_in">this</span>.node);<br>    <span class="hljs-built_in">window</span>.document.body.removeChild(<span class="hljs-built_in">this</span>.node);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">renderPortal</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    unstable_renderSubtreeIntoContainer(<br>      <span class="hljs-built_in">this</span>, <span class="hljs-comment">//代表当前组件</span><br>      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;dialog&quot;</span>&gt;<br>        &#123;props.children&#125; <span class="hljs-comment">//也可以是其他自定义JSX结构</span><br>      &lt;<span class="hljs-regexp">/div&gt;, /</span><span class="hljs-regexp">/ 塞进传送门的JSX</span><br><span class="hljs-regexp">      this.node /</span><span class="hljs-regexp">/ 传送门另一端的DOM node</span><br><span class="hljs-regexp">    );</span><br><span class="hljs-regexp">  &#125;</span><br><span class="hljs-regexp">&#125;</span><br></code></pre></td></tr></table></figure><ol><li>首先，**<code>render</code>函数不要返回有意义的<code>JSX</code>(即返回<code>null</code>)**，也就说说这个组件通过正常生命周期什么都不画，要是画了，那画出来的HTML/DOM就直接出现在使用Dialog的位置了，这不是我们想要的。</li><li>在**<code>componentDidMount</code><strong>里面，</strong>利用原生API来在body上创建一个div**，这个div的样式绝对不会被其他元素的样式干扰。</li><li>然后，无论<code>componentDidMount</code>还是<code>componentDidUpdate</code>，都<strong>调用一个<code>renderPortal</code>来往“传送门”里塞东西</strong>。</li><li>在<code>renderPortal</code>中，利用<code>unstable_renderSubtreeIntoContainer</code>函数往直前创建的<code>div</code>里塞<code>JSX</code>，这里我们用的<code>JSX</code>是这样。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;dialog&quot;</span>&gt;<br>   &#123;props.children&#125;<br>&lt;/div&gt;<br><span class="hljs-comment">//--------------------</span><br><span class="hljs-comment">//调用 Dialog 组件时，可以加上任意的子组件。</span><br>&lt;Dialog&gt;<br>  What ever shit<br>  &lt;div&gt;Hello&lt;/div&gt;<br>  &lt;p&gt;World&lt;/p&gt;<br>&lt;/Dialog&gt;<br></code></pre></td></tr></table></figure></li></ol><p>总结，这个Dialog组件做得事情是这样：</p><ul><li>它什么都不给自己画，render返回一个null就够了；</li><li>它做得事情是通过调用renderPortal把要画的东西画在DOM树上另一个角落。</li></ul><h2 id="React-v16-Portal"><a href="#React-v16-Portal" class="headerlink" title="React v16 Portal"></a>React v16 Portal</h2><p>正因为 Portal 的强大能力，React v16 开始正式支持 Portal。<br>在v16中，使用Portal创建Dialog组件简单多了，不需要牵扯到componentDidMount、componentDidUpdate，也不用调用API清理Portal，关键代码在render中，像下面这样就行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;createPortal&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dialog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(...arguments);<br><br>    <span class="hljs-keyword">const</span> doc = <span class="hljs-built_in">window</span>.document;<br>    <span class="hljs-built_in">this</span>.node = doc.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    doc.body.appendChild(<span class="hljs-built_in">this</span>.node);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">componentWillUnmount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">window</span>.document.body.removeChild(<span class="hljs-built_in">this</span>.node);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> createPortal(<br>      &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;dialog&quot;</span>&gt;<br>        &#123;<span class="hljs-built_in">this</span>.props.children&#125;<br>      &lt;<span class="hljs-regexp">/div&gt;, /</span><span class="hljs-regexp">/塞进传送门的JSX</span><br><span class="hljs-regexp">      this.node /</span><span class="hljs-regexp">/传送门的另一端DOM node</span><br><span class="hljs-regexp">    );</span><br><span class="hljs-regexp">  &#125;</span><br><span class="hljs-regexp">&#125;</span><br></code></pre></td></tr></table></figure><p>整体思想是类似的：</p><ol><li>在 <code>constructor</code> 中，获取 DOM，用原生 API 创建节点。</li><li>将该节点加载到 DOM 文档树的 body 部分。</li><li>调用 <code>createPortal(child,container)</code> 方法创建新的 JSX 元素(即构造新组件)。**<code>createPortal</code>方法接收两个参数，<code>child</code>是任何可渲染的React子元素，例如元素，字符串或片段。<code>container</code>是将被传送到的目标节点(DOM元素),它会将<code>child</code>插入<code>container</code>中，并且将<code>child</code>传送到<code>container</code>元素内的最底部。**</li><li>在组件销毁时调用<code>componentWillUnmout</code>将 body 中的节点<code>&lt;div&gt;&lt;/div&gt;</code>移除。</li><li>在写模态框时，用了portal，就不会完全挡死，只需调节z-Index，可以覆盖页面上的任意元素(存疑，video，canvas等这类元素未试过)。</li></ol><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>v16之前的React Portal实现方法，有一个小小的缺陷，就是Portal是单向的，内容通过Portal传到另一个出口，在那个出口DOM上发生的事件是不会冒泡传送回进入那一端的。具体详情可以看<a href="https://reactjs.org/docs/portals.html#___gatsby">官方文档</a>，有详细的说明。</p><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onDialogClick&#125;</span>&gt;</span>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">Dialog</span>&gt;</span><br>     What ever shit<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">Dialog</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在Dialog画出的内容上点击，onDialogClick是不会被触发的。<br>在v16中，通过Portal渲染出去的DOM，事件是会冒泡从传送门的入口端冒出来的，上面的onDialogClick也就会被调用到了。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p><a href="https://www.cnblogs.com/demodashi/p/8512647.html">React Portal 实现 Modal</a></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>React-Portal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Router 路由</title>
    <link href="/2020/12/07/React%20Router%20%E8%B7%AF%E7%94%B1/"/>
    <url>/2020/12/07/React%20Router%20%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="React-Router-路由"><a href="#React-Router-路由" class="headerlink" title="React Router 路由"></a>React Router 路由</h1><h2 id="React-Router-开发环境搭建"><a href="#React-Router-开发环境搭建" class="headerlink" title="React Router 开发环境搭建"></a>React Router 开发环境搭建</h2><ol><li>安装React脚手架工具（若之前安装过了可以省略）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> -g <span class="hljs-keyword">create</span>-react-app<br></code></pre></td></tr></table></figure></li><li>创建项目<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">D:  <span class="hljs-regexp">//</span>进入D盘<br>mkdir ReactRouterDemo   <span class="hljs-regexp">//</span>创建ReactRouterDemo文件夹<br>cd ReactRouterDemo      <span class="hljs-regexp">//</span>进入文件夹<br>create-react-app demo01  <span class="hljs-regexp">//</span>用脚手架创建React项目<br>cd demo01   <span class="hljs-regexp">//</span>等项目创建完成后，进入项目目录<br>npm  start  <span class="hljs-regexp">//</span>预览项目，可跳过该步<br></code></pre></td></tr></table></figure></li><li>安装 React Router<br>在终端<code>Ctrl+丶</code>的项目目录下：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save react-router-dom</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="React-Router-使用"><a href="#React-Router-使用" class="headerlink" title="React Router 使用"></a>React Router 使用</h2><h2 id="创建多个组件作为路由跳转的目标组件"><a href="#创建多个组件作为路由跳转的目标组件" class="headerlink" title="创建多个组件作为路由跳转的目标组件"></a>创建多个组件作为路由跳转的目标组件</h2><p><strong>组件目录树: 新建<code>components</code>文件夹存放组件</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">demo_router_01<br>└─ src<br>  ├─ components<br>     ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Analysis</span>.</span></span>js<br>     ├─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Home</span>.</span></span>js<br>     └─ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span>js<br></code></pre></td></tr></table></figure><p><strong><code>Home.js</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> homePng <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../images/Home.png&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../index.css&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div className=<span class="hljs-string">&quot;homePage&quot;</span>&gt;<br>                    &lt;img className=<span class="hljs-string">&quot;img&quot;</span> src=&#123;homePng&#125; alt=<span class="hljs-string">&quot;&quot;</span> /&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Home;<br></code></pre></td></tr></table></figure><p><strong><code>Analysis.js</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> analysisPng <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../images/Analysis.png&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../index.css&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Analysis</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;  &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123; <br>        <span class="hljs-keyword">return</span> ( <br>            &lt;div&gt;<br>                &lt;img className=<span class="hljs-string">&quot;img&quot;</span> src=&#123;analysisPng&#125; alt=<span class="hljs-string">&quot;&quot;</span> /&gt;<br>            &lt;/div&gt;<br>         );<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Analysis;<br></code></pre></td></tr></table></figure><p><strong><code>Person.js</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> personPng <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../images/Person.png&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../index.css&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;  &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123; <br>        <span class="hljs-keyword">return</span> ( <br>            &lt;div&gt;<br>                &lt;img className=<span class="hljs-string">&quot;img&quot;</span> src=&#123;personPng&#125; alt=<span class="hljs-string">&quot;&quot;</span> /&gt;<br>            &lt;/div&gt;<br>         );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Person;<br></code></pre></td></tr></table></figure><h2 id="编写路由组件-React万物皆组件"><a href="#编写路由组件-React万物皆组件" class="headerlink" title="编写路由组件(React万物皆组件)"></a>编写路由组件(React万物皆组件)</h2><p><strong>新建<code>router</code>文件夹存放路由组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; BrowserRouter <span class="hljs-keyword">as</span> Router, Route, NavLink &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Home&#x27;</span><br><span class="hljs-keyword">import</span> Analysis <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Analysis&#x27;</span><br><span class="hljs-keyword">import</span> Person <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Person&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;../index.css&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;../images/iconfont.css&quot;</span><br><br><span class="hljs-keyword">const</span> HomePage = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> routeList = [<br>        &#123;<br>            path: <span class="hljs-string">&quot;/&quot;</span>,<br>            exact: <span class="hljs-literal">true</span>,<br>            title: <span class="hljs-string">&quot;首页&quot;</span>,<br>            component: Home,<br>            icon: <span class="hljs-string">&quot;iconfont icon-yemian-copy&quot;</span><br>        &#125;,<br>        &#123;<br>            path: <span class="hljs-string">&quot;/analysis/&quot;</span>,<br>            exact: <span class="hljs-literal">false</span>,<br>            title: <span class="hljs-string">&quot;相关性分析&quot;</span>,<br>            component: Analysis,<br>            icon: <span class="hljs-string">&quot;iconfont icon-fenxi&quot;</span><br>        &#125;,<br>        &#123;<br>            path: <span class="hljs-string">&quot;/person/&quot;</span>,<br>            exact: <span class="hljs-literal">false</span>,<br>            title: <span class="hljs-string">&quot;个人档案&quot;</span>,<br>            component: Person,<br>            icon: <span class="hljs-string">&quot;iconfont icon-icon-text-fn-documentation&quot;</span><br>        &#125;,<br>    ]<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            &lt;div&gt;<br>                &lt;div className=<span class="hljs-string">&quot;pageTop&quot;</span>&gt;<br>                    &lt;h2 className=<span class="hljs-string">&quot;pageTitle&quot;</span>&gt;社矫人员属性及轨迹数据可视化分析平台&lt;/h2&gt;<br>                &lt;/div&gt;<br>                &lt;div className=<span class="hljs-string">&quot;titleBottom&quot;</span>&gt;<br>                    &lt;Router&gt;<br>                        &lt;div className=<span class="hljs-string">&quot;leftMenu&quot;</span>&gt;<br>                            &lt;ul&gt;<br>                                &#123;<br>                                    routeList.map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> (<br>                                        &lt;div className=<span class="hljs-string">&quot;subTitle&quot;</span> key=&#123;index&#125;&gt;<br>                                            &lt;i className=&#123;item.icon&#125; key=&#123;index&#125;&gt;&lt;/i&gt;<br>                                            &lt;li className=<span class="hljs-string">&quot;textItem&quot;</span>&gt;<br>                                                &lt;NavLink<br>                                                    exact=&#123;item.exact&#125; <span class="hljs-comment">//NavLink-exact: if true, 精确匹配active</span><br>                                                    to=&#123;item.path&#125;<br>                                                    key=&#123;index&#125;<br>                                                    className=<span class="hljs-string">&quot;link&quot;</span><br>                                                    activeClassName=<span class="hljs-string">&quot;activeLink&quot;</span><br>                                                &gt;&#123;item.title&#125;&lt;/NavLink&gt;<br>                                            &lt;/li&gt;<br>                                        &lt;/div&gt;<br>                                    ))<br>                                &#125;<br>                            &lt;/ul&gt;<br>                        &lt;/div&gt;<br>                        &lt;div&gt;<br>                            &#123;<br>                                routeList.map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>                                    <span class="hljs-keyword">return</span> (<br>                                        &lt;Route<br>                                            exact=&#123;item.exact&#125;<br>                                            path=&#123;item.path&#125;<br>                                            key=&#123;index&#125;<br>                                            component=&#123;item.component&#125;<br>                                        &gt;&lt;/Route&gt;<br>                                    )<br>                                &#125;)<br>                            &#125;<br>                        &lt;/div&gt;<br>                    &lt;/Router&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> HomePage<br></code></pre></td></tr></table></figure><p><strong>重点：</strong></p><ol><li>上述路由组件中没有状态的变化，因此采用了无状态组件的方式书写。<strong>注意引入<code>React</code>，凡是用到<code>JSX</code>语法的都要<code>import React from &#39;react&#39;</code></strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">const</span> xxx = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;...&lt;/div&gt;<br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> xxx<br></code></pre></td></tr></table></figure></li><li>开头引入<code>react-router-dom</code>，否则无法使用路由标签。**<code>NavLink</code>与<code>Link</code>相比可以在<code>active</code>时改变样式，<code>BrowserRouter as Router</code>设定别名**。<br>React Router 具体标签属性和使用可以参考<a href="https://reactrouter.com/web/api/NavLink/exact-bool">官方文档</a><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123; BrowserRouter <span class="hljs-keyword">as</span> Router, Route, NavLink &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br>or <br><span class="hljs-keyword">import</span> &#123; BrowserRouter <span class="hljs-keyword">as</span> Router, Route, Link &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom</span><br></code></pre></td></tr></table></figure></li><li>开头引入路由跳转组件<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Home&#x27;</span><br><span class="hljs-keyword">import</span> Analysis <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Analysis&#x27;</span><br><span class="hljs-keyword">import</span> Person <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Person&#x27;</span><br></code></pre></td></tr></table></figure></li><li>列表存放路由参数，模拟接收后台请求数据。此处采用遍历路由参数信息列表的方式搭建路由。相较于单独搭建，该方法灵活性更高。<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dts">const routeList = [<br>    &#123;<br><span class="hljs-symbol">        path:</span> <span class="hljs-string">&quot;/&quot;</span>,<br><span class="hljs-symbol">        exact:</span> true,<br><span class="hljs-symbol">        title:</span> <span class="hljs-string">&quot;首页&quot;</span>,<br><span class="hljs-symbol">        component:</span> Home,<br><span class="hljs-symbol">        icon:</span> <span class="hljs-string">&quot;iconfont icon-yemian-copy&quot;</span><br>    &#125;,<br>    &#123;<br><span class="hljs-symbol">        path:</span> <span class="hljs-string">&quot;/analysis/&quot;</span>,<br><span class="hljs-symbol">        exact:</span> false,<br><span class="hljs-symbol">        title:</span> <span class="hljs-string">&quot;相关性分析&quot;</span>,<br><span class="hljs-symbol">        component:</span> Analysis,<br><span class="hljs-symbol">        icon:</span> <span class="hljs-string">&quot;iconfont icon-fenxi&quot;</span><br>    &#125;,<br>    &#123;<br><span class="hljs-symbol">        path:</span> <span class="hljs-string">&quot;/person/&quot;</span>,<br><span class="hljs-symbol">        exact:</span> false,<br><span class="hljs-symbol">        title:</span> <span class="hljs-string">&quot;个人档案&quot;</span>,<br><span class="hljs-symbol">        component:</span> Person,<br><span class="hljs-symbol">        icon:</span> <span class="hljs-string">&quot;iconfont icon-icon-text-fn-documentation&quot;</span><br>    &#125;,<br>]<br></code></pre></td></tr></table></figure></li><li>遍历路由参数列表，设定<code>&lt;Route&gt;</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">routeList.map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;Route<br>            exact=&#123;item.exact&#125;<br>            path=&#123;item.path&#125;<br>            key=&#123;index&#125;<br>            component=&#123;item.component&#125;<br>        &gt;&lt;/Route&gt;<br>    )<br>&#125;)<br></code></pre></td></tr></table></figure></li><li>遍历路由参数列表，引用<code>&lt;NavLink&gt;</code>标签<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">routeList.map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> (<br>    &lt;div className=<span class="hljs-string">&quot;subTitle&quot;</span> key=&#123;index&#125;&gt;<br>        &lt;i className=&#123;item.icon&#125; key=&#123;index&#125;&gt;&lt;/i&gt;<br>        &lt;li className=<span class="hljs-string">&quot;textItem&quot;</span>&gt;<br>            &lt;NavLink<br>                exact=&#123;item.exact&#125; <span class="hljs-comment">//NavLink-exact: if true, 精确匹配active</span><br>                to=&#123;item.path&#125;<br>                key=&#123;index&#125;<br>                className=<span class="hljs-string">&quot;link&quot;</span><br>                activeClassName=<span class="hljs-string">&quot;activeLink&quot;</span><br>            &gt;&#123;item.title&#125;&lt;/NavLink&gt;<br>        &lt;/li&gt;<br>    &lt;/div&gt;<br>))<br></code></pre></td></tr></table></figure></li></ol><p><strong>注意事项：</strong></p><ul><li>注意路由的层级关系为 <code>&lt;BrowserRouter&gt;</code>&gt;<code>&lt;Route&gt;</code>=<code>&lt;Link&gt;</code>，即<code>&lt;Route&gt;</code>和<code>&lt;Link&gt;</code>都必须被包裹在 <code>&lt;BrowserRouter&gt;</code>内使用。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">exact</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><code>Link</code>,<code>NavLink</code>,<code>Route</code>常用参数举例：<br>to: 跳转路径 “string”<br>path: 路由路径 “string”<br>exact: 是否精确匹配 (true/false)<br>component: 目标组件<br>activeClassName: 链接激活后的样式 “string”<br>activeStyle: 链接激活后的样式 (css obj)<br>NavLink - exact: NavLink 中定义的 exact 指确认 active 激活的精确匹配，若不设置可能导致 <code>&quot;/&quot;&quot;/post/&quot;</code>两个链接都显示 active 样式<br><code>&lt;Link to=&quot;/&quot;&gt;&lt;/Link&gt;</code><br><code>&lt;NavLink to=&quot;/post/&quot; activeClassName=&quot;activeAction&quot; activeStyle=&#123;&#123;color:red,&#125;&#125;&gt;&lt;/NavLink&gt;</code><br><code>&lt;Route path=&quot;/post/&quot; exact=true component=&quot;Home&quot;&gt;&lt;/Route&gt;</code></li><li><code>map()</code> 遍历时要给所遍历的组件加上<code>key</code>参数，且<code>key</code>要保证唯一性，此处用<code>key=&#123;index&#125;</code>，但实际应用中往往采用其他办法。</li><li><code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code> 无序列表书写格式，不要写错(填坑)</li></ul><h3 id="精确匹配-exact"><a href="#精确匹配-exact" class="headerlink" title="精确匹配 exact"></a>精确匹配 exact</h3><p>精确匹配从字面上理解，就是你的路径信息要<strong>完全匹配</strong>成功，才可以实现跳转，匹配一部分是不行的。<br>例如路由设置了两个跳转路径<code>/</code>和<code>/post/</code>，若<code>exact=false</code>，则路由既可以跳转到<code>/</code>对应的组件，也可以跳转到<code>/post/</code>对应的组件。<br>值得一提的是，我们一般在首页<code>/</code>的时候采用精确匹配，其余时候不用，当然这也要考虑的实际项目需求，酌情而定。</p><h2 id="路由动态传参"><a href="#路由动态传参" class="headerlink" title="路由动态传参"></a>路由动态传参</h2><p>参考链接：<a href="https://www.cnblogs.com/yky-iris/p/9161907.html">路由动态传参</a></p><h3 id="通配符传参"><a href="#通配符传参" class="headerlink" title="通配符传参"></a>通配符传参</h3><p>在进行路由跳转的过程中，我们可以通过 url 向子组件传递一些参数，这也被称为路由的动态传参。<br><strong>设置动态传参的步骤如下：</strong></p><ol><li>在<code>Route</code>上设置动态传值 <strong>(设置传参的 key 值)</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/post/:key&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>在<code>Link</code>上传递值 <strong>(value)</strong><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">&lt;<span class="hljs-keyword">Link</span> <span class="hljs-keyword">to</span>=<span class="hljs-string">&quot;/post/123&quot;</span>&gt;&lt;/<span class="hljs-keyword">Link</span>&gt;<br></code></pre></td></tr></table></figure></li><li>在子组件上获取传递的参数<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">value</span> === <span class="hljs-keyword">this</span>.props.match.<span class="hljs-keyword">params</span>.key<br><span class="hljs-keyword">value</span> === <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>注意事项：</strong></p><ul><li>如果不往 url 里传任何东西，是没办法匹配路由成功的。即若设置了动态传参<code>:</code>，则必须要给定一个参数。</li><li>params：传递过来的参数，<code>key</code>和<code>value</code>值。通过 <code>this.props.params.xxx</code> 取值，xxx = key</li></ul><blockquote><p>优点：简单快捷，并且在刷新页面的时候，参数不会丢失。<br>缺点：只能传字符串，并且如果传的值太多的话，url会变得长而丑陋。<br>如果想传对象的话，可以用<code>JSON.stringify()</code>,想将其转为字符串，然后另外的页面接收后，用<code>JSON.parse()</code>转回去。</p></blockquote><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><strong>设置动态路由 &amp; Link传值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; BrowserRouter <span class="hljs-keyword">as</span> Router, Route, NavLink &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Home&#x27;</span><br><span class="hljs-keyword">import</span> Analysis <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Analysis&#x27;</span><br><span class="hljs-keyword">import</span> Person <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Person&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;../index.css&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;../images/iconfont.css&quot;</span><br><br><span class="hljs-keyword">const</span> HomePage = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> routeList = [<br>        ...<br>        &#123;<br>            <span class="hljs-comment">// href 定义了 value</span><br>            <span class="hljs-comment">// path 定义了 key</span><br>            href: <span class="hljs-string">&quot;/person/齐天大圣&quot;</span>,<br>            path: <span class="hljs-string">&quot;/person/:name&quot;</span>,<br>            exact: <span class="hljs-literal">false</span>,<br>            title: <span class="hljs-string">&quot;个人档案&quot;</span>,<br>            component: Person,<br>            icon: <span class="hljs-string">&quot;iconfont icon-icon-text-fn-documentation&quot;</span><br>        &#125;,<br>    ]<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            ...<br>        &lt;/div&gt;<br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> HomePage<br></code></pre></td></tr></table></figure><p><strong>子组件接收参数</strong><br>用了 <code>Ant Design</code> 的标签，标签具体属性可参照官网。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span><br><span class="hljs-keyword">import</span> &#123;Input&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd&quot;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;  &#125;<br>        <span class="hljs-built_in">this</span>.onSearch = <span class="hljs-built_in">this</span>.onSearch.bind(<span class="hljs-built_in">this</span>)<br>    &#125;<br><br>    onSearch () &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123;Search&#125; = Input <br>        <span class="hljs-keyword">return</span> ( <br>            &lt;div&gt;<br>                &lt;div&gt;<br>                    &lt;h1 className=<span class="hljs-string">&quot;basicInfo&quot;</span>&gt;基本信息&lt;/h1&gt;<br>                &lt;/div&gt;<br>                &lt;div&gt;<br>                    &lt;Search <br>                        <span class="hljs-comment">// 接收传递的参数</span><br>                        placeholder=&#123;<span class="hljs-built_in">this</span>.props.match.params.name&#125;<br>                        allowClear<br>                        onSearch=&#123;<span class="hljs-built_in">this</span>.onSearch&#125;<br>                        style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">250</span>, <span class="hljs-attr">margin</span>: <span class="hljs-string">&#x27;0 10px&#x27;</span> &#125;&#125;<br>                    /&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>         );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Person;<br></code></pre></td></tr></table></figure><h3 id="query-传参"><a href="#query-传参" class="headerlink" title="query 传参"></a>query 传参</h3><ol><li><code>&lt;Route&gt;</code>定义方式同普通路由相同<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/post/&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><code>&lt;Link&gt;</code>定义前需要声明一个对象，保存 url 地址和传递的参数 <code>key: value</code><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts">const name = &#123;<br><span class="hljs-symbol">    pathname:</span> <span class="hljs-string">&quot;/post/&quot;</span>,<br><span class="hljs-symbol">    query:</span> &#123;<br><span class="hljs-symbol">        xxx:</span> yyy,<br><span class="hljs-symbol">        aaa:</span> bbb,<br>        ...<br>    &#125;<br>    <span class="hljs-comment">// query: value (string or obj)</span><br>&#125;<br><span class="hljs-params">&lt;Link to=&#123;name&#125;&gt;</span><span class="hljs-params">&lt;/Link&gt;</span><br></code></pre></td></tr></table></figure></li><li>子组件参数获取<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.props</span><span class="hljs-selector-class">.location</span><span class="hljs-selector-class">.query</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>注意事项：</strong></p><ul><li><code>pathname, query</code>都是固定名称，不能修改，其中<code>pathname</code>不是驼峰命名，<code>query</code>表示传递的参数，等价于通配符的<code>key</code>。</li><li>获取参数时，取的是 url 链接内的 <code>query</code> 属性值，而不是 <code>name</code>。即<code>this.props.location.name</code> 是错误的</li></ul><blockquote><p>优点：优雅，可传对象。<br>缺点：刷新页面，参数丢失。</p></blockquote><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> HomePage = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> routeList = [<br>        &#123;<br>            <span class="hljs-comment">// href 对应的是&lt;Link&gt;标签内的 to 属性值</span><br>            href: &#123;<span class="hljs-attr">pathname</span>:<span class="hljs-string">&#x27;/analysis/&#x27;</span>, <span class="hljs-attr">query</span>:&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1024</span>, <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;齐天大圣&quot;</span>&#125;&#125;,<br>            path: <span class="hljs-string">&quot;/analysis/&quot;</span>,<br>            exact: <span class="hljs-literal">false</span>,<br>            title: <span class="hljs-string">&quot;相关性分析&quot;</span>,<br>            component: Analysis,<br>            icon: <span class="hljs-string">&quot;iconfont icon-fenxi&quot;</span><br>        &#125;,<br>        ...<br>    ]<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            ...<br>        &lt;/div&gt;<br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> HomePage<br></code></pre></td></tr></table></figure><p><strong>子组件接收参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> analysisPng <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../images/Analysis.png&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../index.css&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Analysis</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;&#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-comment">// 刷新后参数不保留，会报错，因此在这添一个判断</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.props.location.query === <span class="hljs-literal">undefined</span>) &#123;<br>            <span class="hljs-built_in">this</span>.setState(&#123;<br>                id: <span class="hljs-number">0</span>,<br>                name: <span class="hljs-string">&quot;无&quot;</span>,<br>            &#125;)<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.props)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.setState(&#123;<br>                id: <span class="hljs-built_in">this</span>.props.location.query.id,<br>                name: <span class="hljs-built_in">this</span>.props.location.query.name<br>            &#125;)<br>            <span class="hljs-comment">// this.props.location.query 接收传递的参数值，此处为一个对象</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.props.location.query)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div&gt;<br>                    &lt;img className=<span class="hljs-string">&quot;img&quot;</span> src=&#123;analysisPng&#125; alt=<span class="hljs-string">&quot;&quot;</span> /&gt;<br>                &lt;/div&gt;<br>                &lt;h3&gt;&#123;<span class="hljs-built_in">this</span>.state.id&#125;&lt;/h3&gt;<br>                &lt;h3&gt;&#123;<span class="hljs-built_in">this</span>.state.name&#125;&lt;/h3&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Analysis;<br></code></pre></td></tr></table></figure><h3 id="state-传参"><a href="#state-传参" class="headerlink" title="state 传参"></a>state 传参</h3><p>与 <code>query</code> 传参类似：</p><ol><li><code>&lt;Route&gt;</code>定义方式同普通路由相同<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/post/&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><code>&lt;Link&gt;</code>定义前需要声明一个对象，保存 url 地址和传递的参数 <code>key: value</code><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> name = &#123;<br>    pathname: <span class="hljs-string">&quot;/post/&quot;</span>,<br>    <span class="hljs-keyword">state</span>: &#123;<br>        xxx: yyy,<br>        aaa: bbb,<br>        ...<br>    &#125;<br>    // <span class="hljs-keyword">state</span>: value (string or obj)<br>&#125;<br><span class="hljs-variable">&lt;Link to=&#123;name&#125;&gt;</span>&lt;/Link&gt;<br></code></pre></td></tr></table></figure></li><li>子组件参数获取<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">this.props.location.<span class="hljs-keyword">state</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p><strong>重定向</strong> 和 <strong>跳转</strong> 有一个重要的<strong>区别</strong>，就是跳转式可以用浏览器的回退按钮返回上一级的，而重定向是不可以的。</p><h3 id="标签式重定向"><a href="#标签式重定向" class="headerlink" title="标签式重定向"></a>标签式重定向</h3><p>一般用在不是很复杂的业务逻辑中，比如我们进入Index组件，然后Index组件,直接重定向到Home组件。</p><ol><li>引入<code>&lt;Redirect&gt;</code>重定向标签<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123;Redirect&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br></code></pre></td></tr></table></figure></li><li>在<code>render</code>函数里使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span>(<br>        &lt;div&gt;<br>            ...<br>            &lt;Redirect to=<span class="hljs-string">&quot;...&quot;</span>&gt;<br>            ...<br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>标签式重定向只能写在 <code>render</code> 函数中，因此无法绑定到一些业务逻辑上，例如一些业务逻辑绑定函数函数体是独立于<code>render</code>函数之外的，将<code>&lt;Redirect&gt;</code>标签定义在这类函数体中是不奏效的。因此，我们可以使用另一种编程式的重定向方法，它直接使用JS的语法实现重定向，一般用在业务逻辑比较发杂的场合或者需要多次判断的场合。</li></ol><h3 id="编程式重定向"><a href="#编程式重定向" class="headerlink" title="编程式重定向"></a>编程式重定向</h3><p>调用方法：直接在函数体中加入以下语句即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.props</span><span class="hljs-selector-class">.history</span><span class="hljs-selector-class">.push</span>(&quot;<span class="hljs-selector-tag">url</span>地址&quot;)<br></code></pre></td></tr></table></figure><p>例如在 <code>constructor</code> 构造函数中加入上述代码，即可在组件构造时就进行重定向。<br>在登陆界面中，我们可以将编程式重定向应用到点击事件判断中，例如当用户名密码与后端一致时，点击确认，重定向到目标路由。这也是标签式重定向无法做到的，具体过程在实战中继续领悟！</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>react-router-dom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React+Redux实现小书评论实战(一~三)</title>
    <link href="/2020/12/04/React+Redux%E5%AE%9E%E7%8E%B0%E5%B0%8F%E4%B9%A6%E8%AF%84%E8%AE%BA%E5%AE%9E%E6%88%98/"/>
    <url>/2020/12/04/React+Redux%E5%AE%9E%E7%8E%B0%E5%B0%8F%E4%B9%A6%E8%AF%84%E8%AE%BA%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="React-Redux实现小书评论实战-一-三"><a href="#React-Redux实现小书评论实战-一-三" class="headerlink" title="React+Redux实现小书评论实战(一~三)"></a>React+Redux实现小书评论实战(一~三)</h1><p>个人github: <a href="https://github.com/jtwang7">个人github</a><br>github地址：<a href="https://github.com/jtwang7/reduxCommentApp.git">项目</a></p><hr><h2 id="项目结构树"><a href="#项目结构树" class="headerlink" title="项目结构树"></a>项目结构树</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">React</span>小书评论功能(一~三)<br>├─ <span class="hljs-selector-tag">README</span><span class="hljs-selector-class">.md</span><br>└─ <span class="hljs-selector-tag">src</span><br>   ├─ <span class="hljs-selector-tag">CommentApp</span><span class="hljs-selector-class">.js</span><br>   ├─ <span class="hljs-selector-tag">components</span><br>   │  ├─ <span class="hljs-selector-tag">comment</span><span class="hljs-selector-class">.css</span><br>   │  ├─ <span class="hljs-selector-tag">Comment</span><span class="hljs-selector-class">.js</span><br>   │  ├─ <span class="hljs-selector-tag">CommentInput</span><span class="hljs-selector-class">.js</span><br>   │  └─ <span class="hljs-selector-tag">CommentList</span><span class="hljs-selector-class">.js</span><br>   ├─ <span class="hljs-selector-tag">componentsUI</span><br>   │  └─ <span class="hljs-selector-tag">CommentInputUI</span><span class="hljs-selector-class">.js</span><br>   ├─ <span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.js</span><br>   └─ <span class="hljs-selector-tag">store</span><br>      ├─ <span class="hljs-selector-tag">actionCreators</span><span class="hljs-selector-class">.js</span><br>      ├─ <span class="hljs-selector-tag">actionTypes</span><span class="hljs-selector-class">.js</span><br>      ├─ <span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.js</span><br>      └─ <span class="hljs-selector-tag">reducer</span><span class="hljs-selector-class">.js</span><br></code></pre></td></tr></table></figure><p>用 Redux 状态管理实现了 React 小书的评论功能(一~三)，同时基于企业级项目开发要求进行了整体优化，包括 actionTypes 和 actionCreator ，以及 UI 界面与业务逻辑分离。项目结构如上述所示，项目整体样式未经过调整，主要采用了阿里开源的 Ant Design 作为主要样式。</p><h2 id="项目文件"><a href="#项目文件" class="headerlink" title="项目文件"></a>项目文件</h2><h3 id="src-CommentApp-js"><a href="#src-CommentApp-js" class="headerlink" title="src/CommentApp.js"></a>src/CommentApp.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> CommentInput <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/CommentInput&quot;</span><br><span class="hljs-keyword">import</span> CommentList <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/CommentList&#x27;</span>;<br><span class="hljs-comment">// 整体框架</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommentApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                <span class="hljs-comment">// 二级组件</span><br>                &lt;CommentInput /&gt;<br>                &lt;CommentList /&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CommentApp;<br></code></pre></td></tr></table></figure><h3 id="CommentInput"><a href="#CommentInput" class="headerlink" title="CommentInput"></a>CommentInput</h3><h4 id="src-components-CommentInput-js"><a href="#src-components-CommentInput-js" class="headerlink" title="src/components/CommentInput.js"></a>src/components/CommentInput.js</h4><p>CommentInput 业务逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../store/index&quot;</span><br><span class="hljs-keyword">import</span> &#123; inputChangeAction, textAreaChangeAction, commentSubmitAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../store/actionCreators&quot;</span><br><span class="hljs-keyword">import</span> &#123; CommentInputUI &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../componentsUI/CommentInputUI&quot;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommentInput</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = store.getState()<br>        <span class="hljs-comment">// store订阅</span><br>        <span class="hljs-built_in">this</span>.storeChange = <span class="hljs-built_in">this</span>.storeChange.bind(<span class="hljs-built_in">this</span>)<br>        store.subscribe(<span class="hljs-built_in">this</span>.storeChange)<br>        <span class="hljs-comment">// 事件方法绑定</span><br>        <span class="hljs-built_in">this</span>.inputChange = <span class="hljs-built_in">this</span>.inputChange.bind(<span class="hljs-built_in">this</span>)<br>        <span class="hljs-built_in">this</span>.textAreaChange = <span class="hljs-built_in">this</span>.textAreaChange.bind(<span class="hljs-built_in">this</span>)<br>        <span class="hljs-built_in">this</span>.commentSubmit = <span class="hljs-built_in">this</span>.commentSubmit.bind(<span class="hljs-built_in">this</span>)<br>    &#125;<br>    <span class="hljs-comment">// store仓库内容改变后，重新渲染组件，与subscribe一同使用</span><br>    <span class="hljs-function"><span class="hljs-title">storeChange</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(store.getState())<br>    &#125;<br>    <span class="hljs-comment">// 方法内声明action,并注入到store仓库</span><br>    <span class="hljs-function"><span class="hljs-title">inputChange</span>(<span class="hljs-params">e</span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = inputChangeAction(e.target.value)<br>        store.dispatch(action)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">textAreaChange</span>(<span class="hljs-params">e</span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = textAreaChangeAction(e.target.value)<br>        store.dispatch(action)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">commentSubmit</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = commentSubmitAction()<br>        store.dispatch(action)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;CommentInputUI<br>                    inputChange=&#123;<span class="hljs-built_in">this</span>.inputChange&#125;<br>                    textAreaChange=&#123;<span class="hljs-built_in">this</span>.textAreaChange&#125;<br>                    commentSubmit=&#123;<span class="hljs-built_in">this</span>.commentSubmit&#125;<br>                /&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CommentInput;<br></code></pre></td></tr></table></figure><h4 id="src-componentsUI-CommentInputUI-js"><a href="#src-componentsUI-CommentInputUI-js" class="headerlink" title="src/componentsUI/CommentInputUI.js"></a>src/componentsUI/CommentInputUI.js</h4><p>CommentInput UI界面 + 无状态组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span><br><span class="hljs-keyword">import</span> &#123; Input, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;../components/comment.css&quot;</span><br><br><span class="hljs-keyword">const</span> &#123; TextArea &#125; = Input;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> CommentInputUI = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            &lt;div className=<span class="hljs-string">&quot;inputRow&quot;</span>&gt;<br>                &lt;span&gt;用户名:&lt;/span&gt;<br>                &lt;Input<br>                    style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;300px&quot;</span>, <span class="hljs-attr">marginLeft</span>:<span class="hljs-string">&quot;20px&quot;</span> &#125;&#125;<br>                    placeholder=<span class="hljs-string">&quot;Please enter your name&quot;</span><br>                    onChange=&#123;props.inputChange&#125;<br>                /&gt;<br>            &lt;/div&gt;<br>            &lt;div className=<span class="hljs-string">&quot;inputRow secondRow&quot;</span>&gt;<br>                &lt;span&gt;评论内容:&lt;/span&gt;<br>                &lt;TextArea<br>                    rows=&#123;<span class="hljs-number">5</span>&#125;<br>                    style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;285px&quot;</span>, <span class="hljs-attr">marginLeft</span>:<span class="hljs-string">&quot;20px&quot;</span> &#125;&#125;<br>                    <span class="hljs-comment">// ref=&#123;(textArea) =&gt; (this.textArea = textArea)&#125;</span><br>                    onChange=&#123;props.textAreaChange&#125;<br>                /&gt;<br>            &lt;/div&gt;<br>            &lt;div&gt;<br>                &lt;Button<br>                    type=<span class="hljs-string">&quot;primary&quot;</span><br>                    onClick=&#123;props.commentSubmit&#125;<br>                &gt;发布&lt;/Button&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CommentList"><a href="#CommentList" class="headerlink" title="CommentList"></a>CommentList</h3><h4 id="src-components-CommentList-js"><a href="#src-components-CommentList-js" class="headerlink" title="src/components/CommentList.js"></a>src/components/CommentList.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../store/index&quot;</span><br><span class="hljs-keyword">import</span> Comment <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Comment&quot;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommentList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = store.getState()<br>        <span class="hljs-comment">// CommentList要渲染到页面，所以要订阅storeChange方法</span><br>        <span class="hljs-built_in">this</span>.storeChange = <span class="hljs-built_in">this</span>.storeChange.bind(<span class="hljs-built_in">this</span>)<br>        store.subscribe(<span class="hljs-built_in">this</span>.storeChange)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">storeChange</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(store.getState())<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div&gt;<br>                    &#123;<span class="hljs-built_in">this</span>.state.list.map(<br>                        (item, index) =&gt; (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Comment</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&#123;item&#125;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&#123;index&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span> /&gt;</span></span>)<br>                    )&#125;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CommentList;<br></code></pre></td></tr></table></figure><h4 id="src-components-Comment-js"><a href="#src-components-Comment-js" class="headerlink" title="src/components/Comment.js"></a>src/components/Comment.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span><br><span class="hljs-keyword">import</span> &#123; Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../store&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; deleteCommentAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../store/actionCreators&quot;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Comment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.deleteComment = <span class="hljs-built_in">this</span>.deleteComment.bind(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">deleteComment</span>(<span class="hljs-params">index</span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = deleteCommentAction(index)<br>        store.dispatch(action)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div&gt;<br>                    &#123;<span class="hljs-built_in">this</span>.props.content&#125;<br>                    &lt;Button<br>                        type=<span class="hljs-string">&quot;link&quot;</span><br>                        onClick=&#123;<span class="hljs-function">() =&gt;</span> (<span class="hljs-built_in">this</span>.deleteComment(<span class="hljs-built_in">this</span>.props.index))&#125;<br>                    &gt;删除&lt;/Button&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Comment;<br></code></pre></td></tr></table></figure><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><h4 id="src-store-actionTypes-js"><a href="#src-store-actionTypes-js" class="headerlink" title="src/store/actionTypes.js"></a>src/store/actionTypes.js</h4><p>action.type 常量单独分离</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> INPUT_CHANGE = <span class="hljs-string">&quot;input_change&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> TEXT_AREA_CHANGE = <span class="hljs-string">&quot;text_area_change&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> COMMENT_SUBMIT = <span class="hljs-string">&quot;comment_submit&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> DELETE_COMMENT = <span class="hljs-string">&quot;delete_comment&quot;</span><br><br></code></pre></td></tr></table></figure><h4 id="src-store-actionCreators-js"><a href="#src-store-actionCreators-js" class="headerlink" title="src/store/actionCreators.js"></a>src/store/actionCreators.js</h4><p>action 对象单独分离管理，用函数方式调用</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> &#123; INPUT_CHANGE, TEXT_AREA_CHANGE, COMMENT_SUBMIT, DELETE_COMMENT &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./actionTypes&quot;</span><br><span class="hljs-keyword">export</span> const inputChangeAction = <span class="hljs-function"><span class="hljs-params">(value)</span> =&gt;</span> (&#123;<br>    type: INPUT_CHANGE,<br>    value,<br>&#125;)<br><span class="hljs-keyword">export</span> const textAreaChangeAction = <span class="hljs-function"><span class="hljs-params">(value)</span> =&gt;</span> (&#123;<br>    type: TEXT_AREA_CHANGE,<br>    value,<br>&#125;)<br><span class="hljs-keyword">export</span> const commentSubmitAction = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> (&#123;<br>    type: COMMENT_SUBMIT,<br>&#125;)<br><span class="hljs-keyword">export</span> const deleteCommentAction = <span class="hljs-function"><span class="hljs-params">(index)</span> =&gt;</span> (&#123;<br>    type: DELETE_COMMENT,<br>    index,<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="src-store-index-js"><a href="#src-store-index-js" class="headerlink" title="src/store/index.js"></a>src/store/index.js</h4><p>store仓库创建</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br>import reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducer&#x27;</span><br><br>const store = createStore(reducer)<br><span class="hljs-builtin-name">export</span><span class="hljs-built_in"> default </span>store<br></code></pre></td></tr></table></figure><h4 id="src-store-reducer-js"><a href="#src-store-reducer-js" class="headerlink" title="src/store/reducer.js"></a>src/store/reducer.js</h4><p>reducer 管理，定义 action 操作</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pf">import &#123; act &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/test-utils&quot;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">default</span>State = &#123;<br>    inputValue: <span class="hljs-string">&quot;&quot;</span>,<br>    textAreaValue: <span class="hljs-string">&quot;&quot;</span>,<br>    list: [],<br>&#125;<br><br>export <span class="hljs-keyword">default</span> (<span class="hljs-keyword">state</span> = <span class="hljs-keyword">default</span>State, action) =&gt; &#123;<br>    if (action.type === <span class="hljs-string">&quot;input_change&quot;</span>) &#123;<br>        let newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))<br>        newState.inputValue = action.value<br>        return newState<br>    &#125;<br>    if (action.type === <span class="hljs-string">&quot;text_area_change&quot;</span>) &#123;<br>        let newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))<br>        newState.textAreaValue = action.value<br>        return newState<br>    &#125;<br>    if (action.type === <span class="hljs-string">&quot;comment_submit&quot;</span>) &#123;<br>        let newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))<br>        newState.list.push(`$&#123;newState.inputValue&#125;: $&#123;newState.textAreaValue&#125;`)<br>        return newState<br>    &#125;<br>    if (action.type === <span class="hljs-string">&quot;delete_comment&quot;</span>) &#123;<br>        let newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))<br>        newState.list.splice(action.index,<span class="hljs-number">1</span>)<br>        return newState<br>    &#125;<br>    return <span class="hljs-keyword">state</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Redux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redux UI界面与业务逻辑分离</title>
    <link href="/2020/12/03/Redux%20UI%E7%95%8C%E9%9D%A2%E4%B8%8E%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E5%88%86%E7%A6%BB/"/>
    <url>/2020/12/03/Redux%20UI%E7%95%8C%E9%9D%A2%E4%B8%8E%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E5%88%86%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Redux-UI界面与业务逻辑分离"><a href="#Redux-UI界面与业务逻辑分离" class="headerlink" title="Redux UI界面与业务逻辑分离"></a>Redux UI界面与业务逻辑分离</h1><p>视频教程：<a href="https://www.bilibili.com/video/BV1w441137ss?p=1">技术胖 Redux 免费教程</a><br>参考链接：<a href="https://jspang.com/detailed?id=48#toc230">技术胖 Redux 教程笔记汇总</a><br><strong>本文搭配原文教程食用，风味更佳~!</strong></p><hr><p><strong>UI界面与业务逻辑分离的必要性</strong></p><ol><li>让项目更容易维护。</li><li>多人协作，实现超大型项目的开发和快速上线。比如两个人同时写一个模块，一个写UI部分，一个写业务逻辑部分，之后两个人在一起整合。</li></ol><h2 id="分离步骤"><a href="#分离步骤" class="headerlink" title="分离步骤"></a>分离步骤</h2><ol><li><code>src/</code> 文件夹下新建 <code>TodoListUI.js</code>，用于存储 UI 界面代码</li><li>将 JSX 代码迁移到 <code>TodoListUI.js</code></li><li>UI组件与业务逻辑组件整合</li><li>进阶：无状态组件编写UI界面</li></ol><h2 id="实战代码"><a href="#实战代码" class="headerlink" title="实战代码"></a>实战代码</h2><h3 id="TodoListUI-js"><a href="#TodoListUI-js" class="headerlink" title="TodoListUI.js"></a>TodoListUI.js</h3><ul><li>在src目录下新建一个文件<code>TodoListUI.js</code>, <code>imrc ccc</code>快速生成页面的基本结构.</li><li>去<code>TodoList.js</code>里把<code>JSX</code>拷贝过来，并在<code>TodoList.js</code>中引入<code>&lt;TodoListUI /&gt;</code>标签。此时<code>TodoListUI</code>中并没有组件所需要的<code>state</code>(状态信息)，接下来需要改造父组件进行值传递。</li><li>父组件通过属性传值的形式(props)，把需要的值传递给子组件，子组件接收这些值，进行相应的绑定就可以了。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-comment">// 别忘了引入antd组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Input, Button, List &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoListUI</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &#123;<span class="hljs-comment">/* 迁移UI界面JSX代码 */</span>&#125;<br>                &lt;div style=&#123;&#123; <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;10px&quot;</span> &#125;&#125;&gt;<br>                    &lt;Input<br>                        <span class="hljs-comment">// - placeholder=&#123;this.state.inputValue&#125; </span><br>                        <span class="hljs-comment">// + placeholder=&#123;this.props.inputValue&#125;</span><br>                        <span class="hljs-comment">// 属性值从TodoList组件通过 &lt;TodoListUI /&gt; 的props传入</span><br>                        placeholder=&#123;<span class="hljs-built_in">this</span>.props.inputValue&#125;<br>                        style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;250px&quot;</span>, <span class="hljs-attr">marginRight</span>: <span class="hljs-string">&quot;10px&quot;</span> &#125;&#125;<br>                        onChange=&#123;<span class="hljs-built_in">this</span>.props.inputChangeValue&#125;<br>                    /&gt;<br>                    &lt;Button<br>                        type=<span class="hljs-string">&quot;primary&quot;</span><br>                        onClick=&#123;<span class="hljs-built_in">this</span>.props.addItem&#125;<br>                    &gt;添加&lt;/Button&gt;<br>                &lt;/div&gt;<br>                &lt;div style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;325px&quot;</span>, <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;10px&quot;</span> &#125;&#125;&gt;<br>                    &lt;List<br>                        size=<span class="hljs-string">&quot;small&quot;</span><br>                        bordered<br>                        dataSource=&#123;<span class="hljs-built_in">this</span>.props.list&#125;<br>                        <span class="hljs-comment">/*</span><br><span class="hljs-comment">                        不能写成(item, index) =&gt; (&lt;List.Item onClick=&#123;(index) =&gt; &#123; this.props.deleteItem(index) &#125;&#125;&gt;&#123;item&#125;&lt;/List.Item&gt;)</span><br><span class="hljs-comment">                        因为在onClick=&#123;&#125;代码块中，又重新声明了一个index，此时this.props.deleteItem(index)取的是代码块内的index</span><br><span class="hljs-comment">                        正确写法如下，将(index)=&gt;&#123;&#125;改为()=&gt;&#123;&#125;，让外层代码块的index传入进来。</span><br><span class="hljs-comment">                        */</span><br>                        <span class="hljs-comment">// this.props.deleteItem.bind(this,index) 在这里无法使用，因为无法绑定到TodoList组件的this</span><br>                        <span class="hljs-comment">// 所以推荐将 .bind(this) 写入原组件的 constructor</span><br>                        renderItem=&#123;<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">List.Item</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123; this.props.deleteItem(index) &#125;&#125;&gt;&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">List.Item</span>&gt;</span></span>) &#125;&#125;<br>                    /&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoListUI;<br></code></pre></td></tr></table></figure><h3 id="TodoList-js"><a href="#TodoList-js" class="headerlink" title="TodoList.js"></a>TodoList.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; inputChangeValueAction, addItemAction, deleteItemAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store/actionCreators&quot;</span><br><span class="hljs-comment">// 引入 UI 界面代码</span><br><span class="hljs-keyword">import</span> TodoListUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TodoListUI&#x27;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.inputChangeValue = <span class="hljs-built_in">this</span>.inputChangeValue.bind(<span class="hljs-built_in">this</span>)<br>        <span class="hljs-built_in">this</span>.addItem = <span class="hljs-built_in">this</span>.addItem.bind(<span class="hljs-built_in">this</span>)<br>        <span class="hljs-built_in">this</span>.deleteItem = <span class="hljs-built_in">this</span>.deleteItem.bind(<span class="hljs-built_in">this</span>)<br>        <span class="hljs-built_in">this</span>.state = store.getState()<br><br>        <span class="hljs-built_in">this</span>.storeChange = <span class="hljs-built_in">this</span>.storeChange.bind(<span class="hljs-built_in">this</span>)<br>        store.subscribe(<span class="hljs-built_in">this</span>.storeChange)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">inputChangeValue</span>(<span class="hljs-params">e</span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = inputChangeValueAction(e.target.value)<br>        store.dispatch(action)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">addItem</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = addItemAction()<br>        store.dispatch(action)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">deleteItem</span>(<span class="hljs-params">index</span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = deleteItemAction(index)<br>        store.dispatch(action)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">storeChange</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(store.getState())<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &#123;<span class="hljs-comment">/* 用组件替代 */</span>&#125;<br>                &lt;TodoListUI<br>                    inputValue=&#123;<span class="hljs-built_in">this</span>.state.inputValue&#125;<br>                    inputChangeValue=&#123;<span class="hljs-built_in">this</span>.inputChangeValue&#125;<br>                    addItem=&#123;<span class="hljs-built_in">this</span>.addItem&#125;<br>                    list=&#123;<span class="hljs-built_in">this</span>.state.list&#125;<br>                    deleteItem=&#123;<span class="hljs-built_in">this</span>.deleteItem&#125;<br>                /&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoList;<br></code></pre></td></tr></table></figure><h2 id="无状态组件"><a href="#无状态组件" class="headerlink" title="无状态组件"></a>无状态组件</h2><p>无状态组件其实就是一个函数，它不用再继承任何的类（class），也不存在state（状态）。当我们需要的组件<strong>不需要其余业务逻辑</strong>的时候，即只是构造<strong>单纯的UI组件</strong>时，把其改成无状态组件可以提高程序性能。</p><ol><li>不在需要引入React中的{ Component }。</li><li>用一个TodoListUI函数代替组件继承, 里边只返回JSX的部分。</li><li>函数传递一个props参数，之后修改里边的所有props，去掉this (因为函数中已经没有 this 了，原 this 指向的是继承类)。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// - import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class="hljs-comment">// Component 不需要，但是 React 在 React 项目中必须引入</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Input, Button, List &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd&quot;</span>;<br><br><span class="hljs-comment">// 无状态组件是个函数，返回 UI 界面的 JSX </span><br><span class="hljs-keyword">const</span> TodoListUI = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            &#123;<span class="hljs-comment">/* </span><br><span class="hljs-comment">            此处将props打印到控制台，发现props为obj对象</span><br><span class="hljs-comment">            即&lt;TodoListUI /&gt;组件在属性传递时，是将所有属性打包成了一个对象进行传递的。</span><br><span class="hljs-comment">            */</span>&#125;<br>            &#123;<span class="hljs-built_in">console</span>.log(props)&#125;<br>            &lt;div style=&#123;&#123; <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;10px&quot;</span> &#125;&#125;&gt;<br>                &lt;Input<br>                    <span class="hljs-comment">// - this.props.inputValue</span><br>                    <span class="hljs-comment">// + props.inputValue</span><br>                    placeholder=&#123;props.inputValue&#125;<br>                    style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;250px&quot;</span>, <span class="hljs-attr">marginRight</span>: <span class="hljs-string">&quot;10px&quot;</span> &#125;&#125;<br>                    onChange=&#123;props.inputChangeValue&#125;<br>                /&gt;<br>                &lt;Button<br>                    type=<span class="hljs-string">&quot;primary&quot;</span><br>                    onClick=&#123;props.addItem&#125;<br>                &gt;添加&lt;/Button&gt;<br>            &lt;/div&gt;<br>            &lt;div style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;325px&quot;</span>, <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;10px&quot;</span> &#125;&#125;&gt;<br>                &lt;List<br>                    size=<span class="hljs-string">&quot;small&quot;</span><br>                    bordered<br>                    dataSource=&#123;props.list&#125;<br>                    renderItem=&#123;<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">List.Item</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123; props.deleteItem(index) &#125;&#125;&gt;&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">List.Item</span>&gt;</span></span>) &#125;&#125;<br>                /&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoListUI;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Redux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redux工程优化</title>
    <link href="/2020/12/02/Redux%E5%B7%A5%E7%A8%8B%E4%BC%98%E5%8C%96/"/>
    <url>/2020/12/02/Redux%E5%B7%A5%E7%A8%8B%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Redux工程优化"><a href="#Redux工程优化" class="headerlink" title="Redux工程优化"></a>Redux工程优化</h1><p>视频教程：<a href="https://www.bilibili.com/video/BV1w441137ss?p=1">技术胖 Redux 免费教程</a><br>参考链接：<a href="https://jspang.com/detailed?id=48#toc230">技术胖 Redux 教程笔记汇总</a><br><strong>本文搭配原文教程食用，风味更佳~!</strong></p><hr><h2 id="Action-Type-分离"><a href="#Action-Type-分离" class="headerlink" title="Action Type 分离"></a>Action Type 分离</h2><p>写Redux Action的时候，我们写了很多Action的派发，产生了很多Action Types。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs fortran">inputChangeValue(e) &#123;<br>    const <span class="hljs-keyword">action</span> = &#123;<br>        <span class="hljs-keyword">type</span>: <span class="hljs-string">&quot;input_change_value&quot;</span>,<br>        <span class="hljs-keyword">value</span>: e<span class="hljs-number">.</span><span class="hljs-keyword">target</span><span class="hljs-number">.</span><span class="hljs-keyword">value</span>,<br>    &#125;<br>    store<span class="hljs-number">.</span>dispatch(<span class="hljs-keyword">action</span>)<br>&#125;<br><br>addItem() &#123;<br>    const <span class="hljs-keyword">action</span> = &#123;<br>        <span class="hljs-keyword">type</span>: <span class="hljs-string">&quot;add_item&quot;</span>,<br>    &#125;<br>    store<span class="hljs-number">.</span>dispatch(<span class="hljs-keyword">action</span>)<br>&#125;<br><br>deleteItem(<span class="hljs-built_in">index</span>) &#123;<br>    const <span class="hljs-keyword">action</span> = &#123;<br>        <span class="hljs-keyword">type</span>: <span class="hljs-string">&quot;delete_item&quot;</span>,<br>        <span class="hljs-built_in">index</span>,<br>    &#125;<br>    store<span class="hljs-number">.</span>dispatch(<span class="hljs-keyword">action</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>在项目管理中，不分离 action.type 会导致两个问题：</p><ol><li>Types不统一管理，不利于大型项目的复用，设置会长生冗余代码。</li><li>因为Action里的Type，一定要和Reducer里的type一一对应在，所以这部分代码或字母写错后，浏览器里并没有明确的报错，这给调试带来了极大的困难。</li></ol><h3 id="actionTypes-js"><a href="#actionTypes-js" class="headerlink" title="actionTypes.js"></a>actionTypes.js</h3><p>因此，我们需要将组件派发的 <code>action.type</code> 单独分离成一个 <code>actionTypes.js</code> 文件，<code>actionTypes.js</code> 文件放在 <code>src/store/</code> 目录下。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs julia">/*<br>将 action.<span class="hljs-keyword">type</span> 分离成一个单独的文件 (actionTypes.js)<br><span class="hljs-number">1.</span>分离后能精确定位错误原因 (原书写方法不会报错，难debug)，避免名称写错难定位的问题<br><span class="hljs-number">2.</span>增强代码复用性：可以在多个组件引用 action.<span class="hljs-keyword">type</span> 的变量<br>*/<br>// 要 <span class="hljs-keyword">export</span> 抛出文件接口(此文件为常量)；常量要大写<br>// 其他组件使用时不要忘记 <span class="hljs-keyword">import</span> <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> INPUT_CHANGE_VALUE = <span class="hljs-string">&quot;input_change_value&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ADD_ITEM = <span class="hljs-string">&quot;add_item&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> DELETE_ITEM = <span class="hljs-string">&quot;delete_item&quot;</span><br></code></pre></td></tr></table></figure><p>同时，我们需要修改组件<code>TodoList.js</code>以及 Reducer <code>reducer.js</code>中的 <code>action.type</code> 引用。<strong>注意要在开头将 <code>actionTypes.js</code> 引入。</strong></p><p><strong><code>TodoList.js</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Input, Button, List &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span>;<br><span class="hljs-comment">// 在使用其他文件内容时，不要忘记 import 接口</span><br><span class="hljs-keyword">import</span> &#123; INPUT_CHANGE_VALUE, ADD_ITEM, DELETE_ITEM &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/actionTypes&#x27;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.inputChangeValue = <span class="hljs-built_in">this</span>.inputChangeValue.bind(<span class="hljs-built_in">this</span>)<br>        <span class="hljs-built_in">this</span>.addItem = <span class="hljs-built_in">this</span>.addItem.bind(<span class="hljs-built_in">this</span>)<br>        <span class="hljs-built_in">this</span>.deleteItem = <span class="hljs-built_in">this</span>.deleteItem.bind(<span class="hljs-built_in">this</span>)<br>        <span class="hljs-built_in">this</span>.state = store.getState()<br><br>        <span class="hljs-built_in">this</span>.storeChange = <span class="hljs-built_in">this</span>.storeChange.bind(<span class="hljs-built_in">this</span>)<br>        store.subscribe(<span class="hljs-built_in">this</span>.storeChange)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">inputChangeValue</span>(<span class="hljs-params">e</span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = &#123;<br>            <span class="hljs-comment">// - type: &quot;input_change_value&quot;  + type: INPUT_CHANGE_VALUE</span><br>            type: INPUT_CHANGE_VALUE,<br>            value: e.target.value,<br>        &#125;<br>        store.dispatch(action)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">addItem</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = &#123;<br>            type: ADD_ITEM,<br>        &#125;<br>        store.dispatch(action)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">deleteItem</span>(<span class="hljs-params">index</span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = &#123;<br>            type: DELETE_ITEM,<br>            index,<br>        &#125;<br>        store.dispatch(action)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">storeChange</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(store.getState())<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div style=&#123;&#123; <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;10px&quot;</span> &#125;&#125;&gt;<br>                    &lt;Input<br>                        placeholder=&#123;<span class="hljs-built_in">this</span>.state.inputValue&#125;<br>                        style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;250px&quot;</span>, <span class="hljs-attr">marginRight</span>: <span class="hljs-string">&quot;10px&quot;</span> &#125;&#125;<br>                        onChange=&#123;<span class="hljs-built_in">this</span>.inputChangeValue&#125;<br>                    /&gt;<br>                    &lt;Button<br>                        type=<span class="hljs-string">&quot;primary&quot;</span><br>                        onClick=&#123;<span class="hljs-built_in">this</span>.addItem&#125;<br>                    &gt;添加&lt;/Button&gt;<br>                &lt;/div&gt;<br>                &lt;div style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;325px&quot;</span>, <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;10px&quot;</span> &#125;&#125;&gt;<br>                    &lt;List<br>                        size=<span class="hljs-string">&quot;small&quot;</span><br>                        bordered<br>                        dataSource=&#123;<span class="hljs-built_in">this</span>.state.list&#125;<br>                        renderItem=&#123;<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">List.Item</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123; this.deleteItem(index) &#125;&#125;&gt;&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">List.Item</span>&gt;</span></span>) &#125;&#125;<br>                    /&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoList;<br></code></pre></td></tr></table></figure><p><strong><code>reducer.js</code></strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs pf">// reducer.js 中也不要忘记修改 action.type<br>import &#123; INPUT_CHANGE_VALUE, ADD_ITEM, DELETE_ITEM &#125; <span class="hljs-keyword">from</span> &#x27;./actionTypes&#x27;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">default</span>State = &#123;<br>    inputValue: <span class="hljs-string">&quot;Write Something&quot;</span>,<br>    list: [<br>        <span class="hljs-string">&quot;第一天&quot;</span>,<br>        <span class="hljs-string">&quot;第二天&quot;</span>,<br>        <span class="hljs-string">&quot;第三天&quot;</span>,<br>    ]<br>&#125;<br><br>export <span class="hljs-keyword">default</span> (<span class="hljs-keyword">state</span> = <span class="hljs-keyword">default</span>State, action) =&gt; &#123;<br>    if (action.type === INPUT_CHANGE_VALUE) &#123;<br>        let newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))<br>        newState.inputValue = action.value<br>        return newState<br>    &#125;<br><br>    if (action.type === ADD_ITEM) &#123;<br>        let newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))<br>        newState.list.push(<span class="hljs-keyword">state</span>.inputValue)<br>        return newState<br>    &#125;<br><br>    if (action.type === DELETE_ITEM) &#123;<br>        let newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))<br>        newState.list.splice(action.index,<span class="hljs-number">1</span>)<br>        return newState<br>    &#125;<br><br>    return <span class="hljs-keyword">state</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="管理-Redux-Action"><a href="#管理-Redux-Action" class="headerlink" title="管理 Redux Action"></a>管理 Redux Action</h2><p>工程项目中各组件里有很多Action，并且分散才程序的各个地方，如果庞大的工程，这势必会造成严重的混乱。因此，在工程中通常将所有的Redux Action放到一个文件里进行管理。<br>我们通常通过以下步骤将 <code>action</code> 对象单独分离出来：</p><ol><li>在 <code>src/store/</code> 目录下新建 <code>actionCreators.js</code> 文件。(还记得吗？Redux 官方工作流程中管理 Action 的就是 actionCreators)</li><li>将 <code>action对象</code> 写入 <code>actionCreators.js</code> 中，并以方法的形式(普通函数或箭头函数)抛出。</li><li>引入方法，替换原组件内的 <code>action</code> 对象。</li></ol><blockquote><p>为什么不直接抛出 action 对象？<br>因为事件函数可能会传递参数给 action 对象，因此需要用函数来接受并传递参数。</p></blockquote><p><strong><code>actionCreators.js</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 不要忘记引入，否则报错</span><br><span class="hljs-keyword">import</span> &#123; INPUT_CHANGE_VALUE, ADD_ITEM, DELETE_ITEM &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./actionTypes&#x27;</span><br><br><span class="hljs-comment">// 抛出方法，返回 action 对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> inputChangeValueAction = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> (&#123;<br>    type: INPUT_CHANGE_VALUE,<br>    value,<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> addItemAction = <span class="hljs-function">() =&gt;</span> (&#123;<br>    type: ADD_ITEM,<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> deleteItemAction = <span class="hljs-function">(<span class="hljs-params">index</span>) =&gt;</span> (&#123;<br>    type: DELETE_ITEM,<br>    index,<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong><code>TodoList.js</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Input, Button, List &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span>;<br><span class="hljs-comment">// - import &#123; INPUT_CHANGE_VALUE, ADD_ITEM, DELETE_ITEM &#125; from &#x27;./actionTypes&#x27;</span><br><span class="hljs-comment">// 引入 actionCreators.js，js 后缀可省略</span><br><span class="hljs-keyword">import</span> &#123; inputChangeValueAction, addItemAction, deleteItemAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store/actionCreators&quot;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.inputChangeValue = <span class="hljs-built_in">this</span>.inputChangeValue.bind(<span class="hljs-built_in">this</span>)<br>        <span class="hljs-built_in">this</span>.addItem = <span class="hljs-built_in">this</span>.addItem.bind(<span class="hljs-built_in">this</span>)<br>        <span class="hljs-built_in">this</span>.deleteItem = <span class="hljs-built_in">this</span>.deleteItem.bind(<span class="hljs-built_in">this</span>)<br>        <span class="hljs-built_in">this</span>.state = store.getState()<br><br>        <span class="hljs-built_in">this</span>.storeChange = <span class="hljs-built_in">this</span>.storeChange.bind(<span class="hljs-built_in">this</span>)<br>        store.subscribe(<span class="hljs-built_in">this</span>.storeChange)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">inputChangeValue</span>(<span class="hljs-params">e</span>)</span> &#123;<br>        <span class="hljs-comment">// - &#123;type: INPUT_CHANGE_VALUE, value: e.target.value&#125;</span><br>        <span class="hljs-comment">// 用方法返回 action 对象来代替直接在组件内定义 action 对象，实现 action 代码分离</span><br>        <span class="hljs-comment">// 若事件函数存在参数传递，则同样需要在 actionCreators 方法中定义形参</span><br>        <span class="hljs-keyword">const</span> action = inputChangeValueAction(e.target.value)<br>        store.dispatch(action)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">addItem</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = addItemAction()<br>        store.dispatch(action)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">deleteItem</span>(<span class="hljs-params">index</span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = deleteItemAction(index)<br>        store.dispatch(action)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">storeChange</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(store.getState())<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div style=&#123;&#123; <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;10px&quot;</span> &#125;&#125;&gt;<br>                    &lt;Input<br>                        placeholder=&#123;<span class="hljs-built_in">this</span>.state.inputValue&#125;<br>                        style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;250px&quot;</span>, <span class="hljs-attr">marginRight</span>: <span class="hljs-string">&quot;10px&quot;</span> &#125;&#125;<br>                        onChange=&#123;<span class="hljs-built_in">this</span>.inputChangeValue&#125;<br>                    /&gt;<br>                    &lt;Button<br>                        type=<span class="hljs-string">&quot;primary&quot;</span><br>                        onClick=&#123;<span class="hljs-built_in">this</span>.addItem&#125;<br>                    &gt;添加&lt;/Button&gt;<br>                &lt;/div&gt;<br>                &lt;div style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;325px&quot;</span>, <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;10px&quot;</span> &#125;&#125;&gt;<br>                    &lt;List<br>                        size=<span class="hljs-string">&quot;small&quot;</span><br>                        bordered<br>                        dataSource=&#123;<span class="hljs-built_in">this</span>.state.list&#125;<br>                        renderItem=&#123;<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">List.Item</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123; this.deleteItem(index) &#125;&#125;&gt;&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">List.Item</span>&gt;</span></span>) &#125;&#125;<br>                    /&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoList;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Redux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redux 基础及实战</title>
    <link href="/2020/12/01/Redux%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/12/01/Redux%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><p>视频教程：<a href="https://www.bilibili.com/video/BV1w441137ss?p=1">技术胖 Redux 免费教程</a><br>参考链接：<a href="https://jspang.com/detailed?id=48#toc230">技术胖 Redux 教程笔记汇总</a><br><strong>本文搭配原文教程食用，风味更佳~!</strong></p><hr><h2 id="Redux-简要介绍"><a href="#Redux-简要介绍" class="headerlink" title="Redux 简要介绍"></a>Redux 简要介绍</h2><ul><li><strong>什么是Redux？</strong><br>官方解释：Redux is a predictable state container for JavaScript apps.  === Redux是<strong>js</strong>应用的一种可预测的<strong>状态容器</strong>。<br>通俗理解：Redux是一个用来管理管理数据状态和UI状态的JavaScript应用工具。</li><li><strong>Redux作用？</strong><br>简化组件的状态传递。如下图是不使用Redux和使用Redux时，父子组件之间的通信方式。没有使用Redux的情况，如果两个组件(非父子关系)之间需要通信的话，可能需要多个中间组件为他们进行消息传递，这样既浪费了资源，代码也会比较复杂。Redux中提出了单一数据源 <strong>Store</strong> 用来<strong>存储状态数据</strong>，所有的组建都可以<strong>通过Action修改Store</strong>，也可以<strong>从Store中获取最新状态</strong>，从而实现统一状态管理，完美解决组建之间的通信问题。<br><img src="/img/posts_img/20201201191412481_5749.png"></li></ul><h2 id="Redux-工作流程-总体框架"><a href="#Redux-工作流程-总体框架" class="headerlink" title="Redux 工作流程(总体框架)"></a>Redux 工作流程(总体框架)</h2><p>我们将结合 Redux 官方给出的结构图去总体了解 Redux 的工作流程，对结构图的理解将直接反映使用者对 Redux 的掌握程度，十分重要！！！<br>后续实战代码编写中，我们需要按照该结构流程去实现，所以该章节需要重点关注，初学不理解没关系，不过要不断回顾和反复阅读，同时将理解结合到代码中去。<br>现在给出官方的 Redux 结构，如下：<br><img src="/img/posts_img/20201201192118706_7818.png"><br>直接看专业的 Redux 工作流程不是特别好理解，我们可以通过借书的例子来理解：<br><img src="/img/posts_img/20201201192506882_23071.png"><br>React 的各个子组件更新或者改变状态的过程，等同于读者向图书馆借书的过程。读者(Component)需要从图书馆(Store)借书(state)，就要通过图书管理员去取书，取书的过程就是action，但是图书馆(Store)只负责存放图书(state)，无法告诉图书管理员具体的图书在哪，所以又需要图书管理软件(Reducer)进行精确检索，给它传递书名(state)和取书指令(action)，它将返回该书的具体位置(newState)，即一个新的状态，最终读者将从图书馆借到这本书。<br>当然上述只是通俗的理解，一些步骤可能存在纰漏，我们后续将通过实战代码进行详细解读。</p><h2 id="代码实战：TodoLisT-实现"><a href="#代码实战：TodoLisT-实现" class="headerlink" title="代码实战：TodoLisT 实现"></a>代码实战：TodoLisT 实现</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>方法一：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">Win+</span>R<br><span class="hljs-string">cmd</span><br><span class="hljs-string">npm </span><span class="hljs-string">install </span>-g <span class="hljs-built_in">create-react</span> <span class="hljs-string">app </span>//安装脚手架工具，若以前安装过可跳过该步<br><br>进入相应目录<br><span class="hljs-string">mkdir </span><span class="hljs-string">xxx </span>//创建<span class="hljs-string">xxx文</span>件夹<br><span class="hljs-string">cd </span><span class="hljs-string">ReduxDemo </span>     //进入文件夹<br><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">yyy </span> //用脚手架创建<span class="hljs-string">React项</span>目，名称自定义，此处为<span class="hljs-string">yyy</span><br><span class="hljs-string">cd </span><span class="hljs-string">yyy </span>  //等项目创建完成后，进入项目目录<br><span class="hljs-string">npm </span><span class="hljs-string">start </span> //预览项目<br></code></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">进入<span class="hljs-string">vscode终</span>端：<span class="hljs-string">Ctrl+</span>`<br>进入目标目录<br><span class="hljs-string">npx </span><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">yyy</span><br><span class="hljs-string">cd </span><span class="hljs-string">yyy</span><br><span class="hljs-string">npm </span><span class="hljs-string">start</span><br></code></pre></td></tr></table></figure><p>项目搭建完成后，删除一下没用的文件，让代码结构保持最小化。删除<code>src</code>里边的所有文件，只留一个<code>index.js</code>,并且<code>index.js</code>文件里一些无关内容也都清空，只保留两项引用及<code>ReactDOM.render()</code>中的内容。</p><h3 id="快速生成组件代码结构"><a href="#快速生成组件代码结构" class="headerlink" title="快速生成组件代码结构"></a>快速生成组件代码结构</h3><p>编写<code>index.js</code>基础文件，代码如下，主要包含了 React, ReactDOM，同时引入 TodoList 组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-comment">// 引入组件，组件首字母大写</span><br><span class="hljs-keyword">import</span> TodoList <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TodoList&#x27;</span> <br><br>ReactDOM.render(<br>  &lt;React.StrictMode&gt;<br>    &lt;TodoList /&gt; <br>  &lt;/React.StrictMode&gt;,<br>  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>可以利用 VSCode 中的 Simple React Snippets 插件快速生成 React Component 的代码结构，先输入<code>imrc</code>,再输入<code>ccc</code>。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// imrc</span><br><span class="hljs-keyword">import</span> <span class="hljs-type">React</span>, &#123; <span class="hljs-type">Component</span> &#125; from <span class="hljs-symbol">&#x27;reac</span>t&#x27;;<br><br><span class="hljs-comment">// ccc</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    render() &#123; <br>        <span class="hljs-keyword">return</span> ( <br>            &lt;div&gt;<span class="hljs-type">Hello</span> <span class="hljs-type">World</span>&lt;/div&gt;<br>         );<br>    &#125;<br>&#125;<br>export <span class="hljs-keyword">default</span> <span class="hljs-type">TodoList</span>;<br></code></pre></td></tr></table></figure><h3 id="AntDesign-优化-UI-界面"><a href="#AntDesign-优化-UI-界面" class="headerlink" title="AntDesign 优化 UI 界面"></a>AntDesign 优化 UI 界面</h3><ol><li>安装 antd<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> antd <span class="hljs-comment">--save</span><br>或<br>yarn <span class="hljs-keyword">add</span> antd<br></code></pre></td></tr></table></figure></li><li>在使用Ant Design时，先引入CSS样式，有样式文件才可以让UI组件显示正常。具体可从Ant Design官方文档查看快速上手步骤。<figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span><br></code></pre></td></tr></table></figure></li><li>antd组件使用参照<a href="https://ant.design/components/overview-cn/">AntDesign 组件库</a>文档，同时在使用组件前，需要从相应的文件引入：<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">import &#123;<span class="hljs-keyword">Input</span>, <span class="hljs-keyword">Button</span>, <span class="hljs-keyword">List</span>&#125; from <span class="hljs-string">&quot;antd&quot;</span> //引入了 <span class="hljs-keyword">Input</span> ,<span class="hljs-keyword">Button</span>, <span class="hljs-keyword">List</span> 组件<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>Input 等组件的 style 等属性设置及一些细节参考最后贴出的实战代码，此处不做细讲</p></blockquote><p><strong>TodoList 代码</strong> (此部分是第二遍实现，与首遍代码相比存在出入，功能相同，若要参考具体细节，请移步最后的首版代码)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Input, Button, List &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd&quot;</span>;<br><br><span class="hljs-keyword">const</span> data = [<br>    <span class="hljs-string">&quot;第一天&quot;</span>,<br>    <span class="hljs-string">&quot;第二天&quot;</span>,<br>    <span class="hljs-string">&quot;第三天&quot;</span>,<br>]<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div style=&#123;&#123;<span class="hljs-attr">margin</span>:<span class="hljs-string">&quot;10px&quot;</span>&#125;&#125;&gt;<br>                    &lt;Input placeholder=<span class="hljs-string">&quot;Write Something&quot;</span> style=&#123;&#123;<span class="hljs-attr">width</span>:<span class="hljs-string">&quot;250px&quot;</span>,<span class="hljs-attr">marginRight</span>:<span class="hljs-string">&quot;10px&quot;</span>&#125;&#125; /&gt;<br>                    &lt;Button type=<span class="hljs-string">&quot;primary&quot;</span> &gt;添加&lt;/Button&gt;<br>                &lt;/div&gt;<br>                &lt;div style=&#123;&#123;<span class="hljs-attr">width</span>:<span class="hljs-string">&quot;325px&quot;</span>,<span class="hljs-attr">margin</span>:<span class="hljs-string">&quot;10px&quot;</span>&#125;&#125;&gt;<br>                    &lt;List <br>                        size = <span class="hljs-string">&quot;small&quot;</span><br>                        bordered<br>                        dataSource = &#123;data&#125;<br>                        renderItem = &#123;<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">List.Item</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">List.Item</span>&gt;</span></span>) &#125;&#125;<br>                    /&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoList;<br></code></pre></td></tr></table></figure><h3 id="Redux-工作流程编写"><a href="#Redux-工作流程编写" class="headerlink" title="Redux 工作流程编写"></a>Redux 工作流程编写</h3><h4 id="创建-Store-仓库"><a href="#创建-Store-仓库" class="headerlink" title="创建 Store 仓库"></a>创建 Store 仓库</h4><ol><li>项目根目录安装 Redux <code>npm install redux --save</code></li><li><code>src</code>目录下新建<code>store</code>子文件夹，在<code>store</code>下创建<code>index.js</code>，<code>index.js</code>就是整个项目的<code>store</code>文件，打开文件，编写下面的代码。<strong>注意几点：</strong> 1. 整个项目只能存在一个 <code>store</code> (后续会讲到) 2. 要引入 <code>createStore()</code> 方法 3.要将 <code>store</code> 暴露出去<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span>  <span class="hljs-comment">// 引入createStore方法</span><br><span class="hljs-keyword">const</span> store = createStore()          <span class="hljs-comment">// 创建数据存储仓库</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store                 <span class="hljs-comment">//暴露出去</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="“招募”管理者-Reducer"><a href="#“招募”管理者-Reducer" class="headerlink" title="“招募”管理者 Reducer"></a>“招募”管理者 Reducer</h4><ol><li>在<code>store</code>文件夹下，新建一个文件<code>reducer.js</code></li><li>在<code>reducer.js</code>中编写如下代码，<strong>注意几点：</strong> 1. Reducer 中要定义 <code>defaultState</code> 存储初始(默认)状态，变量名自定义，但常用 <code>defaultState</code> 2.抛出一个方法函数，函数返回<strong>新的状态(newState)**，常用箭头函数。 3.<code>state=defaultState, action</code>注意书写顺序，state 写在 action 前，否则出错，</strong>原因暂时不知**。<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> <span class="hljs-keyword">default</span>State = &#123;&#125;<br>export <span class="hljs-keyword">default</span> (<span class="hljs-keyword">state</span>=<span class="hljs-keyword">default</span>State, action) =&gt; &#123;<br>    return <span class="hljs-keyword">state</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>将 <code>reducer</code> 引入到 <code>Store</code> 中，创建<code>Store</code>时，以参数的形式传递给<code>Store</code>。可以理解为在创建仓库Store的时候就连带着招募一个管理员Reducer。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// - const store = createStore()</span><br><span class="hljs-comment">// + import reducer from &#x27;./reducer&#x27;</span><br><span class="hljs-comment">// + const store = createStore(reducer)</span><br><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span><br><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducer&#x27;</span><br><span class="hljs-keyword">const</span> store = createStore(reducer)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure></li></ol><h4 id="向仓库“存放数据”"><a href="#向仓库“存放数据”" class="headerlink" title="向仓库“存放数据”"></a>向仓库“存放数据”</h4><p>我们创建的仓库是空的，我们可以向仓库中添加一些默认的数据，将其存放在 <code>defaultState</code> 中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> defaultState = &#123;<br>    inputValue: <span class="hljs-string">&quot;Write Something&quot;</span>,<br>    <span class="hljs-built_in">list</span>: [<br>        <span class="hljs-string">&quot;第一天&quot;</span>,<br>        <span class="hljs-string">&quot;第二天&quot;</span>,<br>        <span class="hljs-string">&quot;第三天&quot;</span>,<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="组件从仓库获取数据"><a href="#组件从仓库获取数据" class="headerlink" title="组件从仓库获取数据"></a>组件从仓库获取数据</h4><p>我们仓库中已经存有数据了，我们需要在组件内通过<code>store.getState()</code>方法将其获取出来。<br>接下来，我们要通过store获取的方法，替换掉原有组件的一些值。<strong>注意：</strong> 要从<code>&quot;./store/index&quot;</code> 文件引入 <code>store</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Input, Button, List &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd&quot;</span>;<br><span class="hljs-comment">// + import store from &#x27;./store/index&#x27;;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span>;<br><br><span class="hljs-comment">// - const data = [...]</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-comment">// - this.state = &#123;&#125;</span><br>        <span class="hljs-built_in">this</span>.state = store.getState()<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div style=&#123;&#123;<span class="hljs-attr">margin</span>:<span class="hljs-string">&quot;10px&quot;</span>&#125;&#125;&gt;<br>                    &#123;- <span class="hljs-comment">/* &lt;Input placeholder=&quot;Write Something&quot; style=&#123;&#123;width:&quot;250px&quot;,marginRight:&quot;10px&quot;&#125;&#125; /&gt; */</span>&#125;<br>                    &lt;Input placeholder=&#123;<span class="hljs-built_in">this</span>.state.inputValue&#125; style=&#123;&#123;<span class="hljs-attr">width</span>:<span class="hljs-string">&quot;250px&quot;</span>,<span class="hljs-attr">marginRight</span>:<span class="hljs-string">&quot;10px&quot;</span>&#125;&#125; /&gt;<br>                    &lt;Button type=<span class="hljs-string">&quot;primary&quot;</span> &gt;添加&lt;/Button&gt;<br>                &lt;/div&gt;<br>                &lt;div style=&#123;&#123;<span class="hljs-attr">width</span>:<span class="hljs-string">&quot;325px&quot;</span>,<span class="hljs-attr">margin</span>:<span class="hljs-string">&quot;10px&quot;</span>&#125;&#125;&gt;<br>                    &lt;List <br>                        size = <span class="hljs-string">&quot;small&quot;</span><br>                        bordered<br>                        <span class="hljs-comment">// - dataSource = &#123;data&#125;</span><br>                        dataSource = &#123;<span class="hljs-built_in">this</span>.state.list&#125;<br>                        renderItem = &#123;<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">List.Item</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">List.Item</span>&gt;</span></span>) &#125;&#125;<br>                    /&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoList;<br></code></pre></td></tr></table></figure><h4 id="添加-lt-Input-gt-事件"><a href="#添加-lt-Input-gt-事件" class="headerlink" title="添加 &lt;Input /&gt;事件"></a>添加 <code>&lt;Input /&gt;</code>事件</h4><p>到目前为止，我们只构建了Redux最基本的结构，还没有真正体会到Redux在管理state时的工作过程，同时我们只在开头定义过<code>action</code>，并没有实际用到它，现在我们给<code>&lt;Input /&gt;</code>添加<code>onChange</code>事件，去看看Redux是怎么通过<code>action</code>改变仓库状态的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs javascript">TodoList.js<br><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Input, Button, List &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-comment">//绑定函数，指向this</span><br>        <span class="hljs-built_in">this</span>.inputChangeValue = <span class="hljs-built_in">this</span>.inputChangeValue.bind(<span class="hljs-built_in">this</span>)<br>        <span class="hljs-built_in">this</span>.state = store.getState()<br>    &#125;<br><br>    <span class="hljs-comment">//定义函数</span><br>    <span class="hljs-function"><span class="hljs-title">inputChangeValue</span>(<span class="hljs-params">e</span>)</span> &#123;<br>        <span class="hljs-comment">//定义action对象</span><br>        <span class="hljs-keyword">const</span> action = &#123;<br>            type: <span class="hljs-string">&quot;input_change_value&quot;</span>,<br>            value: e.target.value,<br>        &#125;<br>        <span class="hljs-comment">//将 action 对象 dispatch 到仓库上</span><br>        store.dispatch(action)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div style=&#123;&#123;<span class="hljs-attr">margin</span>:<span class="hljs-string">&quot;10px&quot;</span>&#125;&#125;&gt;<br>                    &lt;Input placeholder=&#123;<span class="hljs-built_in">this</span>.state.inputValue&#125; style=&#123;&#123;<span class="hljs-attr">width</span>:<span class="hljs-string">&quot;250px&quot;</span>,<span class="hljs-attr">marginRight</span>:<span class="hljs-string">&quot;10px&quot;</span>&#125;&#125; <br>                        <span class="hljs-comment">//添加事件</span><br>                        onChange=&#123;<span class="hljs-built_in">this</span>.inputChangeValue&#125;<br>                    /&gt;<br>                    &lt;Button type=<span class="hljs-string">&quot;primary&quot;</span> &gt;添加&lt;/Button&gt;<br>                &lt;/div&gt;<br>                &lt;div style=&#123;&#123;<span class="hljs-attr">width</span>:<span class="hljs-string">&quot;325px&quot;</span>,<span class="hljs-attr">margin</span>:<span class="hljs-string">&quot;10px&quot;</span>&#125;&#125;&gt;<br>                    &lt;List <br>                        size = <span class="hljs-string">&quot;small&quot;</span><br>                        bordered<br>                        dataSource = &#123;<span class="hljs-built_in">this</span>.state.list&#125;<br>                        renderItem = &#123;<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">List.Item</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">List.Item</span>&gt;</span></span>) &#125;&#125;<br>                    /&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoList;<br><br>-------------------------<br>reducer.js<br><span class="hljs-keyword">const</span> defaultState = &#123;<br>    inputValue: <span class="hljs-string">&quot;Write Something&quot;</span>,<br>    list: [<br>        <span class="hljs-string">&quot;第一天&quot;</span>,<br>        <span class="hljs-string">&quot;第二天&quot;</span>,<br>        <span class="hljs-string">&quot;第三天&quot;</span>,<br>    ]<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (state = defaultState, action) =&gt; &#123;<br>    <span class="hljs-comment">//添加对应的action</span><br>    <span class="hljs-keyword">if</span> (action.type === <span class="hljs-string">&quot;input_change_value&quot;</span>) &#123;<br>        <span class="hljs-keyword">let</span> newState = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(state))<br>        newState.inputValue = action.value<br>        <span class="hljs-keyword">return</span> newState<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> state<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意以下几点：</strong></p><ol><li>函数要用<code>.bind(this)</code>绑定，箭头函数除外。函数绑定最好写在<code>constructor(props) &#123;&#125;</code>内，原因在代码分离的时候会提到。(也可以用<code>this.xxx.bind(this,param1,param2,...)</code>，但后续不好进行企业级代码分离)</li><li>绑定事件的函数内部创建 action 对象，<strong>注意 <code>action</code> 是对象!!!</strong></li><li><strong><code>action</code> 必须要有 <code>type</code> 属性</strong>，其属性值为自定义名称，用于标明当前声明 action 对象的名称。其余属性名称自定义。</li><li>拥有 action 对象后，需要传递给 store 仓库，<strong>首先要将 action <code>dispatch</code> 到 store 仓库上，注意此处是<code>store.dispatch(action)</code>，而不是<code>action.dispatch(store)</code>，dispatch是派遣的意思，可以理解为“仓库派遣一个动作”，而不是“动作派遣仓库”</strong>。</li><li>由于 store 的自动推送策略（store只是一个仓库，它并没有管理能力，它会把接收到的action自动转发给Reducer），我们将在 <code>reducer.js</code> 中对 <code>action</code> 进行处理</li><li><strong>!!!重点：</strong> reducer 中只能接收 state ，但不能直接改变 state。因此，我们需要换种方法：定义一个新的state变量，作为临时变量，将 state 通过 <code>JSON.parse(JSON.stringify(state))</code> 进行深度拷贝，通过重新赋值改变临时变量，再将新的状态抛出</li></ol><h4 id="用newState更新组件"><a href="#用newState更新组件" class="headerlink" title="用newState更新组件"></a>用newState更新组件</h4><p>经过上述操作后，<code>Reducer</code> 通过 <code>action</code> 修改了原始 state 并抛出了新的状态 newState, 但是 newState 还没有被我们的组件给利用，现在就将这最后一环补上，实现整个 Redux 的工作流程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Input, Button, List &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.inputChangeValue = <span class="hljs-built_in">this</span>.inputChangeValue.bind(<span class="hljs-built_in">this</span>)<br>        <span class="hljs-built_in">this</span>.state = store.getState()<br>        <span class="hljs-comment">//绑定storeChange函数指向this；仓库订阅storeChange函数</span><br>        <span class="hljs-built_in">this</span>.storeChange = <span class="hljs-built_in">this</span>.storeChange.bind(<span class="hljs-built_in">this</span>)<br>        store.subscribe(<span class="hljs-built_in">this</span>.storeChange)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">inputChangeValue</span>(<span class="hljs-params">e</span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = &#123;<br>            type: <span class="hljs-string">&quot;input_change_value&quot;</span>,<br>            value: e.target.value,<br>        &#125;<br>        store.dispatch(action)<br>    &#125;<br>    <br>    <span class="hljs-comment">//从仓库中获取新的状态，重新渲染组件</span><br>    <span class="hljs-function"><span class="hljs-title">storeChange</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(store.getState())<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div style=&#123;&#123;<span class="hljs-attr">margin</span>:<span class="hljs-string">&quot;10px&quot;</span>&#125;&#125;&gt;<br>                    &lt;Input placeholder=&#123;<span class="hljs-built_in">this</span>.state.inputValue&#125; style=&#123;&#123;<span class="hljs-attr">width</span>:<span class="hljs-string">&quot;250px&quot;</span>,<span class="hljs-attr">marginRight</span>:<span class="hljs-string">&quot;10px&quot;</span>&#125;&#125; <br>                        onChange=&#123;<span class="hljs-built_in">this</span>.inputChangeValue&#125;<br>                    /&gt;<br>                    &lt;Button type=<span class="hljs-string">&quot;primary&quot;</span> &gt;添加&lt;/Button&gt;<br>                &lt;/div&gt;<br>                &lt;div style=&#123;&#123;<span class="hljs-attr">width</span>:<span class="hljs-string">&quot;325px&quot;</span>,<span class="hljs-attr">margin</span>:<span class="hljs-string">&quot;10px&quot;</span>&#125;&#125;&gt;<br>                    &lt;List <br>                        size = <span class="hljs-string">&quot;small&quot;</span><br>                        bordered<br>                        dataSource = &#123;<span class="hljs-built_in">this</span>.state.list&#125;<br>                        renderItem = &#123;<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">List.Item</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">List.Item</span>&gt;</span></span>) &#125;&#125;<br>                    /&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoList;<br></code></pre></td></tr></table></figure><p><strong>注意以下几点：</strong></p><ol><li><code>this.setState()</code>接收的对象是<code>store.getState()</code>，即仓库中的状态而非 this.state。</li><li>仓库需要订阅<code>storeChange()</code>方法，不订阅程序仍能正常运行，但是在某些地方会出错，为了避免这种情况，请将订阅写在 constructor 中。</li></ol><hr><p>以上就是 Redux 基础的一些操作流程，后续的 Button onClick 事件，List onClick 事件不再详细讲解，感兴趣的同学可在下方整体的代码中找到详细的注释。以上就是我对Redux学习的一些体会，希望对各位有所启示。</p><h3 id="TodoList-Redux-实现及详细注释"><a href="#TodoList-Redux-实现及详细注释" class="headerlink" title="TodoList Redux 实现及详细注释"></a>TodoList Redux 实现及详细注释</h3><h4 id="“-src-index-js”"><a href="#“-src-index-js”" class="headerlink" title="“./src/index.js”"></a>“./src/index.js”</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-comment">// 引入组件，组件首字母大写</span><br><span class="hljs-keyword">import</span> TodoList <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TodoList&#x27;</span> <br><br>ReactDOM.render(<br>  &lt;React.StrictMode&gt;<br>    &lt;TodoList /&gt; <br>  &lt;/React.StrictMode&gt;,<br>  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h4 id="“-src-TodoList-js”"><a href="#“-src-TodoList-js”" class="headerlink" title="“./src/TodoList.js”"></a>“./src/TodoList.js”</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// imrc</span><br><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-comment">// npm install antd --save ; import css file</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd/dist/antd.css&quot;</span><br><span class="hljs-comment">// 引入CSS样式后，还需引入用到的组件</span><br><span class="hljs-keyword">import</span> &#123; Input, Button, List &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd&quot;</span><br><span class="hljs-comment">// 引入 store，绑定 component 和 store</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store/index&quot;</span><br><br><span class="hljs-comment">// 将默认 state 存入 reducer -- defaultState 中</span><br><span class="hljs-comment">// const data = [</span><br><span class="hljs-comment">//     &quot;第一条数据&quot;,</span><br><span class="hljs-comment">//     &quot;第二条数据&quot;,</span><br><span class="hljs-comment">//     &quot;第三条数据&quot;,</span><br><span class="hljs-comment">// ]</span><br><br><span class="hljs-comment">// ccc</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-comment">// store.getState() 方法从 store 仓库获取 state，固定方法</span><br>        <span class="hljs-built_in">this</span>.state = store.getState()<br><br>        <span class="hljs-comment">// storeChange 函数绑定 this</span><br>        <span class="hljs-built_in">this</span>.storeChange = <span class="hljs-built_in">this</span>.storeChange.bind(<span class="hljs-built_in">this</span>)<br>        <span class="hljs-comment">// store 订阅 redux 状态，状态更新则重新渲染</span><br>        store.subscribe(<span class="hljs-built_in">this</span>.storeChange)<br>    &#125;<br><br>    <span class="hljs-comment">// 定义 onChange 函数 changeInputValue</span><br>    <span class="hljs-comment">// 将最新输入的状态通过 action 传递给 store</span><br>    <span class="hljs-comment">// action 是一个对象，需要声明。</span><br>    <span class="hljs-comment">// action: type 属性是必需的，type 属性值自定义，表示该 action 的名字; 其余属性自定义，例如 value</span><br>    <span class="hljs-comment">// e.target.value 获取事件 event 对象的值</span><br>    <span class="hljs-comment">// store.dispatch(action) 是必需的，将 action 绑定到 store 上，参考 redux 官方文档，这是默认的结构</span><br>    <span class="hljs-comment">// store 只是仓库，没有管理能力，根据 store 的自动推送策略，store 会将接收的 action 自动转发给 reducer</span><br>    <span class="hljs-function"><span class="hljs-title">changeInputValue</span>(<span class="hljs-params">e</span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = &#123;<br>            type: <span class="hljs-string">&quot;change_input_value&quot;</span>,<br>            value: e.target.value,<br>        &#125;<br>        store.dispatch(action)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">valueSubmit</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = &#123;<br>            type: <span class="hljs-string">&quot;value_submit&quot;</span>,<br>        &#125;<br>        store.dispatch(action)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">deleteItem</span>(<span class="hljs-params">idx</span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> action = &#123;<br>            type: <span class="hljs-string">&quot;delete_item&quot;</span>,<br>            index: idx,<br>        &#125;<br>        store.dispatch(action)<br>    &#125;<br><br>    <span class="hljs-comment">// reducer action 只更新了 store 状态，需要定义一个 storeChange 函数来更新组件</span><br>    <span class="hljs-comment">// 通过 store.getState() 获取仓库状态，后用 setState 方法重新渲染</span><br>    <span class="hljs-function"><span class="hljs-title">storeChange</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(store.getState())<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div style=&#123;&#123; <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;10px&quot;</span> &#125;&#125;&gt;<br>                    &#123;<span class="hljs-comment">/* </span><br><span class="hljs-comment">                    1.React - style 接收css样式对象 </span><br><span class="hljs-comment">                    2.width 改变宽度；height 改变高度；margin 改变外边距；marginRight 设置右边距</span><br><span class="hljs-comment">                    3.</span><br><span class="hljs-comment">                    - placeholder=&quot;Please input something ...&quot;</span><br><span class="hljs-comment">                    + placeholder=&#123;this.state.inputValue&#125;</span><br><span class="hljs-comment">                    4.添加 onChange 事件，监听 input 文本框内容变化,不要忘记 .bind</span><br><span class="hljs-comment">                    + onChange=&#123;this.changeInputValue.bind(this)</span><br><span class="hljs-comment">                    */</span>&#125;<br>                    &lt;Input<br>                        placeholder=&#123;<span class="hljs-built_in">this</span>.state.inputValue&#125;<br>                        style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;250px&quot;</span>, <span class="hljs-attr">marginRight</span>: <span class="hljs-string">&quot;10px&quot;</span> &#125;&#125;<br>                        onChange=&#123;<span class="hljs-built_in">this</span>.changeInputValue.bind(<span class="hljs-built_in">this</span>)&#125;<br>                    /&gt;<br>                    &#123;<span class="hljs-comment">/* </span><br><span class="hljs-comment">                    1.开头要引入 antd 的 Button 组件</span><br><span class="hljs-comment">                    2.type 属性见 antd 的 Button 组件文档说明</span><br><span class="hljs-comment">                    3.</span><br><span class="hljs-comment">                    +onClick=&#123;this.valueSubmit.bind(this)&#125;</span><br><span class="hljs-comment">                    */</span>&#125;<br>                    &lt;Button<br>                        type=<span class="hljs-string">&quot;primary&quot;</span><br>                        onClick=&#123;<span class="hljs-built_in">this</span>.valueSubmit.bind(<span class="hljs-built_in">this</span>)&#125;<br>                    &gt;输入&lt;/Button&gt;<br>                &lt;/div&gt;<br>                &lt;div style=&#123;&#123; <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;10px&quot;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;325px&quot;</span> &#125;&#125;&gt;<br>                    &#123;<span class="hljs-comment">/* </span><br><span class="hljs-comment">                    1.参照 antd 的 List 组件文档</span><br><span class="hljs-comment">                    2.dataSource 接收一个数组，数组包含List Item</span><br><span class="hljs-comment">                    3.renderItem 渲染 item，固定写法</span><br><span class="hljs-comment">                    4.(item)=&gt;(...)接收dataSource数组中的元素</span><br><span class="hljs-comment">                    5.&lt;List /&gt;理解为外框架，则&lt;List.Item&gt;&lt;/List.Item&gt;理解为框架内的一行，</span><br><span class="hljs-comment">                    &lt;List.Item&gt;&lt;/List.Item&gt;中可以添加其他JSX元素</span><br><span class="hljs-comment">                    6.标签内属性值间用空格或者换行分割</span><br><span class="hljs-comment">                    */</span>&#125;<br>                    &lt;List<br>                        size=<span class="hljs-string">&quot;small&quot;</span><br>                        bordered<br>                        <span class="hljs-comment">// 用 this.state.list 替换 const data</span><br>                        <span class="hljs-comment">// dataSource = &#123;data&#125;</span><br>                        dataSource=&#123;<span class="hljs-built_in">this</span>.state.list&#125;<br>                        <span class="hljs-comment">// -(item) =&gt; (&lt;List.Item&gt;&#123;item&#125;&lt;/List.Item&gt;)</span><br>                        <span class="hljs-comment">// +(item,idx) =&gt; (&lt;List.Item onClick=&#123;this.deleteItem.bind(this,idx)&#125;&gt;&#123;item&#125;&lt;/List.Item&gt;)</span><br>                        <span class="hljs-comment">// 此处箭头函数形式()=&gt;() ，也可写为()=&gt;&#123;return ()&#125;，用&#123;&#125;时要注意必须要用 return 将结果抛出，详情查看 ES6 箭头函数</span><br>                        renderItem=&#123;<span class="hljs-function">(<span class="hljs-params">item,idx</span>) =&gt;</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">List.Item</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.deleteItem.bind(this,idx)&#125;</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">List.Item</span>&gt;</span></span>)&#125;<br>                    /&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoList;<br></code></pre></td></tr></table></figure><h4 id="“-src-store-index-js”"><a href="#“-src-store-index-js”" class="headerlink" title="“./src/store/index.js”"></a>“./src/store/index.js”</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">// npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save redux</span><br>// 创建 redux <span class="hljs-keyword">store</span> 仓库：创建 <span class="hljs-keyword">store</span> 文件夹；创建 index.js 文件<br><br>// 引入 createStore 方法，顾名思义<span class="hljs-comment">--创建仓库</span><br><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br>// 将 reducer 引入 <span class="hljs-keyword">store</span> 中，实现 reducer 到 <span class="hljs-keyword">store</span> 的绑定(见 redux 官方结构图)<br><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducer&#x27;</span><br><br>// 调用 createStore 方法创建 <span class="hljs-keyword">store</span> 仓库<br>// reducer 以参数形式传递给 createStore()，可以理解为在搭建仓库的时候就招募了一个管理员<br>const <span class="hljs-keyword">store</span> = createStore(reducer)<br><br>// 将仓库暴露出去<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">store</span><br></code></pre></td></tr></table></figure><h4 id="“-src-store-reducer-js”"><a href="#“-src-store-reducer-js”" class="headerlink" title="“./src/store/reducer.js”"></a>“./src/store/reducer.js”</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs pf">//仓库需要一个管理员 reducer 进行管理<br><br>// 定义默认<span class="hljs-keyword">state</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">default</span>State = &#123;<br>    inputValue: <span class="hljs-string">&quot;Please input something ...&quot;</span>,<br>    list: [<br>            <span class="hljs-string">&quot;第一条数据&quot;</span>,<br>            <span class="hljs-string">&quot;第二条数据&quot;</span>,<br>            <span class="hljs-string">&quot;第三条数据&quot;</span>,<br>        ],<br>&#125;<br><br>// 暴露 reducer 的管理行为：接收 <span class="hljs-keyword">state</span>，根据 action 动作返回新的 <span class="hljs-keyword">state</span><br>// <span class="hljs-keyword">state</span>=<span class="hljs-keyword">default</span>State 写在 action 之前，否则传出的数据不正确，why?<br>// <span class="hljs-keyword">state</span> 参数：store 仓库内的原始状态<br>// action 参数：action 新传递的状态<br>// store 只是仓库，没有管理能力，根据 store 的自动推送策略，store 会将接收的 action 自动转发给 reducer<br>export <span class="hljs-keyword">default</span> (<span class="hljs-keyword">state</span>=<span class="hljs-keyword">default</span>State,action) =&gt; &#123;<br>    // 在 reducer 中，我们获得了原始状态 <span class="hljs-keyword">state</span> 和新传递的状态 action，下一步就是改变 store 内的 <span class="hljs-keyword">state</span><br>    //console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">state</span>,action)<br><br>    /*<br>    用 if 语句识别当前的 action 对象，<br>    因为每个事件都定义一个 action ，则需要通过 action.type 区分，<br>    这也就解释了为什么 type 属性在 action 中是必需的。<br>    */<br>    if(action.type === <span class="hljs-string">&quot;change_input_value&quot;</span>) &#123;<br>        /*<br>        !!!重点<br>        reducer 中只能接收 <span class="hljs-keyword">state</span> ，但不能直接改变 <span class="hljs-keyword">state</span><br>        因此，我们需要换种方法：<br>        定义一个新的<span class="hljs-keyword">state</span>变量，作为临时变量，将 <span class="hljs-keyword">state</span> 通过 JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>)) 进行深度拷贝<br>        通过重新赋值改变临时变量，再将新的状态抛出<br>        */<br>        let newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))<br>        newState.inputValue = action.value<br>        return newState<br>    &#125;<br><br>    if(action.type === <span class="hljs-string">&quot;value_submit&quot;</span>) &#123;<br>        let newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))<br>        newState.list.push(newState.inputValue)<br>        return newState<br>    &#125;<br><br>    if(action.type === <span class="hljs-string">&quot;delete_item&quot;</span>) &#123;<br>        let newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))<br>        newState.list.splice(action.index,<span class="hljs-number">1</span>)<br>        return newState<br>    &#125;<br><br>    return <span class="hljs-keyword">state</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="React-三个易错点"><a href="#React-三个易错点" class="headerlink" title="React 三个易错点"></a>React 三个易错点</h2><ol><li>store必须是<strong>唯一</strong>的，多个store是坚决不允许，只能有一个store空间</li><li>只有store能改变自己的内容，Reducer不能改变</li><li>Reducer必须是<strong>纯函数</strong></li></ol><h3 id="Store-仓库唯一"><a href="#Store-仓库唯一" class="headerlink" title="Store 仓库唯一"></a>Store 仓库唯一</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span><br>import reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducer&#x27;</span><br>const store = createStore(reducer)<br><span class="hljs-builtin-name">export</span><span class="hljs-built_in"> default </span>store;<br></code></pre></td></tr></table></figure><p>我们在 <code>/store/index.js</code> 文件中，用createStore()方法，声明了一个store。之后整个应用都在使用这个 store，并且只能创建和使用这一个 store ，否则会报错。</p><h3 id="改变-state-的是-Store-，而不是-Reducer"><a href="#改变-state-的是-Store-，而不是-Reducer" class="headerlink" title="改变 state 的是 Store ，而不是 Reducer"></a>改变 state 的是 Store ，而不是 Reducer</h3><p>我们在写 redux 时将业务逻辑代码都写在了 Reducer 中，但这并不意味着组建的 state 状态是在 Reducer 中改变的。事实上 Reducer 中只能接收 state ，而不允许改变 state。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pf">export <span class="hljs-keyword">default</span> (<span class="hljs-keyword">state</span> = <span class="hljs-keyword">default</span>State, action) =&gt; &#123;<br>    if (action.type === INPUT_CHANGE_VALUE) &#123;<br>        let newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))<br>        newState.inputValue = action.value<br>        return newState<br>    &#125;<br>    return <span class="hljs-keyword">state</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如上述代码示例，在 Reducer 中我们声明了一个新的临时状态变量<code>newState</code>来深度拷贝当前状态，最终只是将新的状态作了一个返回，返回到了store中，并没有作任何改变。Reudcer 只是返回了更改的数据，但是并没有更改 store 中的数据，store 拿到了 Reducer 的数据，自己对自己进行了更新。</p><blockquote><p>关于 Store 和 Reducer 中的 state 关联，引用一个网友的评论：<br>redux内的reducer里面的state初始时是一个默认赋值，当store里有state数据时，每次传入当前的currentstate给reducer内的state，所以reducer每次拷贝的是当前的state状态，并不是defaultvalue，reducer 经过 action 后返回更改的 newState 状态到 Store 中，而 Store 会将这些状态改动更新到仓库的状态中。</p></blockquote><h3 id="Reducer-必须是纯函数"><a href="#Reducer-必须是纯函数" class="headerlink" title="Reducer 必须是纯函数"></a>Reducer 必须是纯函数</h3><p><strong>纯函数：</strong> 如果函数的调用参数相同，则永远返回相同的结果。<strong>返回结果</strong>不依赖于程序执行期间函数外部任何状态或数据的变化，必须<strong>只依赖于其输入参数</strong>。<br>简单理解，若1. 某一函数的返回结果是由传入的值(形参)决定的，而不是其它的东西决定的，2. 函数不产生副作用(不影响外部变量)，那么该函数就是纯函数。</p><ul><li><p>纯函数</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gml">const aaa = (<span class="hljs-symbol">x</span>, <span class="hljs-symbol">y</span>) =&gt; &#123;<br>    let m = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-symbol">x</span> + <span class="hljs-symbol">y</span> + m <span class="hljs-comment">//函数返回结果由函数参数决定</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>非纯函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> xxx = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> m = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() <span class="hljs-comment">//或 ajax,axios 异步请求等</span><br>    <span class="hljs-keyword">return</span> x + y + m <span class="hljs-comment">//函数结果受外部影响，结果不能由参数决定</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>Reducer 中返回状态只由 state 和 action 决定。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pf">export <span class="hljs-keyword">default</span> (<span class="hljs-keyword">state</span> = <span class="hljs-keyword">default</span>State, action) =&gt; &#123;<br>    if (action.type === INPUT_CHANGE_VALUE) &#123;<br>        let newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))<br>        newState.inputValue = action.value<br>        return newState<br>    &#125;<br>    return <span class="hljs-keyword">state</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Redux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小书学习笔记 —— 高阶组件（Higher-Order Components）</title>
    <link href="/2020/11/29/%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%EF%BC%88Higher-Order%20Components%EF%BC%89/"/>
    <url>/2020/11/29/%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%EF%BC%88Higher-Order%20Components%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习前端一小步，迈向成功一大步！本专栏主要记录学习前端React框架的一些个人心得，分享一些实战教学，如有不足，欢迎交流讨论。React框架的入门教学强推<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a>的<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a>，简单易懂还有代码实战。还等什么？让我们开始本篇的前端学习之旅，欢迎各位入坑前端！</p><a id="more"></a><h1 id="高阶组件（Higher-Order-Components）"><a href="#高阶组件（Higher-Order-Components）" class="headerlink" title="高阶组件（Higher-Order Components）"></a>高阶组件（Higher-Order Components）</h1><p>参考教程：React小书–第28节(高阶组件（Higher-Order Components））<br>教程作者：<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a><br>参考链接：<a href="http://huziketang.mangojuice.top/books/react/lesson28">React小书</a><br><strong>本文搭配原文教程食用，风味更佳~!</strong></p><hr><h2 id="什么是高阶组件？"><a href="#什么是高阶组件？" class="headerlink" title="什么是高阶组件？"></a>什么是高阶组件？</h2><p>高阶组件是一个函数（而不是组件），它接受一个组件作为参数，返回一个新的组件。例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> <span class="hljs-type">React</span>,&#123;<span class="hljs-type">Component</span>&#125; from <span class="hljs-symbol">&#x27;reac</span>t&#x27;<br><br>export <span class="hljs-keyword">default</span> (<span class="hljs-type">WrappedComponent</span>) =&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-comment">// 可以做很多自定义逻辑</span><br>    render () &#123;<br>      <span class="hljs-keyword">return</span> &lt;<span class="hljs-type">WrappedComponent</span> /&gt;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>接收 <code>WrappedComponent</code> 组件**(组件名首字母大写)** ，返回了 <code>NewComponent</code> 新组件，此处因为只有 <code>class ...</code> 一个整体语句，所以省略了 <code>&#123;&#125; 和 return</code>。</li><li><code>WrappedComponent</code> 代表子组件，是形参名可以更改，但是习惯上用 <code>WrappedComponent</code> 来表示。</li><li>高阶组件是一个函数</li></ul><h2 id="高阶组件作用"><a href="#高阶组件作用" class="headerlink" title="高阶组件作用"></a>高阶组件作用</h2><p>用于代码复用，可以把组件之间可复用的代码、逻辑抽离到高阶组件当中。高阶组件包装组件和被包装组件之间通过 props 传递数据。</p><h2 id="高阶组件使用示例"><a href="#高阶组件使用示例" class="headerlink" title="高阶组件使用示例"></a>高阶组件使用示例</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> <span class="hljs-type">React</span>, &#123; <span class="hljs-type">Component</span> &#125; from <span class="hljs-symbol">&#x27;reac</span>t&#x27;<br><br>export <span class="hljs-keyword">default</span> (<span class="hljs-type">WrappedComponent</span>, name) =&gt; &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    constructor () &#123;<br>      <span class="hljs-keyword">super</span>()<br>      <span class="hljs-keyword">this</span>.state = &#123; data: <span class="hljs-literal">null</span> &#125;<br>    &#125;<br><br>    componentWillMount () &#123;<br>      let data = localStorage.getItem(name)<br>      <span class="hljs-keyword">this</span>.setState(&#123; data &#125;)<br>    &#125;<br><br>    render () &#123;<br>      <span class="hljs-keyword">return</span> &lt;<span class="hljs-type">WrappedComponent</span> data=&#123;<span class="hljs-keyword">this</span>.state.data&#125; /&gt;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">NewComponent</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们定义了一个高阶组件，除了传入子组件外，我们还传入了一个参数 name ，在高阶组件内我们实现了从 name 读取数据，并设置 data 参数向子组件传递该值。<br>子组件调用高阶组件的方法如下所示：</p><ol><li>import 高阶组件(上述未定义变量名，因此引入的变量自定义名称)</li><li>高阶组件是个函数，因此同函数调用类似，在子组件外部套上高阶组件，传入子组件名和参数</li><li>导出子组件</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> wrapWithLoadData from &#x27;./wrapWithLoadData&#x27;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InputWithUserName</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class="hljs-keyword">return</span> &lt;input value=&#123;<span class="hljs-keyword">this</span>.props.data&#125; /&gt;<br>  &#125;<br>&#125;<br><br><span class="hljs-type">InputWithUserName</span> = wrapWithLoadData(<span class="hljs-type">InputWithUserName</span>, <span class="hljs-symbol">&#x27;usernam</span>e&#x27;)<br>export <span class="hljs-keyword">default</span> <span class="hljs-type">InputWithUserName</span><br></code></pre></td></tr></table></figure><h2 id="编写高阶组件步骤"><a href="#编写高阶组件步骤" class="headerlink" title="编写高阶组件步骤"></a>编写高阶组件步骤</h2><ol><li>实现一个普通组件</li><li>将普通组件用函数包裹</li><li>在函数内用 <code>return</code> 将新的组件抛出</li></ol><p>编写的方式有两种：<br>第一种:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala">function funcName(<span class="hljs-type">OldComponent</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>        render () &#123;<br>            <span class="hljs-keyword">return</span> (<br>                &lt;div&gt;<br>                    &lt;<span class="hljs-type">WrappedComponent</span> /&gt;<br>                &lt;/div&gt;<br>            )<br>        &#125;<br>    &#125;<br>&#125;<br>export <span class="hljs-keyword">default</span> funcName;<br></code></pre></td></tr></table></figure><p>第二种:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (WrappedComponent) =&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewComponent</span> <span class="hljs-title">extentds</span> <span class="hljs-title">Component</span> </span>&#123;<br>    render () &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;WrappedComponent /&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React的img标签</title>
    <link href="/2020/11/29/React%E7%9A%84img%E6%A0%87%E7%AD%BE/"/>
    <url>/2020/11/29/React%E7%9A%84img%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="React的img标签"><a href="#React的img标签" class="headerlink" title="React的img标签"></a>React的img标签</h1><p>参考链接：<br><a href="https://www.cnblogs.com/tu-0718/p/12530654.html">react中img引入本地图片的2种方式</a><br><a href="https://www.cnblogs.com/chenbeibei520/p/10930281.html">react项目中关于img标签的src属性的使用</a></p><hr><h2 id="方法一：import"><a href="#方法一：import" class="headerlink" title="方法一：import"></a>方法一：import</h2><p>在 js 文件开头用 import 将本地图片从相对路径中引入为变量</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> homePage <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../static/images/home.png&#x27;</span><br></code></pre></td></tr></table></figure><p>例如此处将 <code>&quot;../static/images/&quot;</code> 路径下的 <code>home.png</code> 图片引入为 <code>homePage</code> 变量。<br>然后在 <code>&lt;img src=&#123;&#125;&gt;</code>中引用该变量名即可。(变量名随意，<code>&#123;&#125;</code>必须，因为 jsx 元素要用 <code>&#123;&#125;</code> 包裹表达式)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;homePage&#125;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="方法二：require方法"><a href="#方法二：require方法" class="headerlink" title="方法二：require方法"></a>方法二：require方法</h2><p>用 require 方法在代码内导入本地图片。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">const</span> <span class="hljs-variable">homePage</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&#x27;../static/images/home.png&#x27;</span>)</span><br>&lt;<span class="hljs-variable">img</span> <span class="hljs-variable">src</span>=&#123;<span class="hljs-variable">homePage</span>&#125;&gt;<br></code></pre></td></tr></table></figure><p>或者直接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;require(</span>&#x27;<span class="hljs-attr">..</span>/<span class="hljs-attr">static</span>/<span class="hljs-attr">images</span>/<span class="hljs-attr">home.png</span>&#x27;)&#125;&gt;</span><br></code></pre></td></tr></table></figure><p>整体思想同 import 类似，即从相对路径引入本地图片并赋值到一个变量。因此，<strong>require中只能写字符串，不能写变量。（因为 require 接收的是一个路径字符串）</strong></p><blockquote><p>一般推荐使用 import 引入图片。<br>用 require 导入容易存在后续 webpack 打包时读取不到本地图片的情况。<br>但是 require 可以实现动态的加载。</p></blockquote><h2 id="import-和-require"><a href="#import-和-require" class="headerlink" title="import 和 require"></a>import 和 require</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>import 和 require 是 react 的两种导入方式。其可以导入图片 / 组件等。<br>其本质就是从路径地址读取目标，并赋值给一个变量。(js中的export即为导出的接口)</p><ol><li>import(常用)<br><code>import component from &#39;./component&#39;</code></li><li>require<br><code>const component = require(&#39;./component&#39;)</code></li></ol><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>提出的规范不同<br>import是ES6语法,reuqire是CommonJs提出的，import会通过babel转换成CommonJS规范。<br>因此，下面两行代码是等价的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> component <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./component&#x27;</span><br><span class="hljs-comment">// =&gt; </span><br><span class="hljs-keyword">const</span> component = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./component&#x27;</span>)<br></code></pre></td></tr></table></figure><p>推荐统一规范一种导入方式,防止混乱，当然,不同情况使用的方式也是不一样的。</p><blockquote><p>一般来说使用import就够了，但是要注意import需要放在定义组件的外部。这就导致一个问题: 如果我需要通过动态路径动态加载组件，那么我们就要用到 require 的导入方法。<br>当需要实现动态加载图片时，我们往往会在require中引入一个变量，但require中不能直接赋值一个变量，正确做法应该是将<code>require(path)</code>拆分成三个部分(即文件路径+名称+后缀)，如下：</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">let homePage</span> = <span class="hljs-string">&quot;home&quot;</span>;<br><span class="hljs-attribute">const data</span> = require(<span class="hljs-string">&#x27;../static/images/&#x27;</span> + homePage + <span class="hljs-string">&#x27;.png&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react-router-dom 路由</title>
    <link href="/2020/11/29/react-router-dom%E8%BF%90%E7%94%A8/"/>
    <url>/2020/11/29/react-router-dom%E8%BF%90%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="react-router-dom运用"><a href="#react-router-dom运用" class="headerlink" title="react-router-dom运用"></a>react-router-dom运用</h1><p>参考链接：<a href="https://www.cnblogs.com/lovels/p/11574700.html">React：react-router-dom 详解</a></p><hr><h2 id="第一步：安装-react-router-dom-第三方库"><a href="#第一步：安装-react-router-dom-第三方库" class="headerlink" title="第一步：安装 react-router-dom 第三方库"></a>第一步：安装 react-router-dom 第三方库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save react-router-dom</span><br></code></pre></td></tr></table></figure><p>在 React 框架 <code>/src</code> 文件夹下新建 <code>router.js</code>，存放路由设置代码。</p><h2 id="第二步：导入"><a href="#第二步：导入" class="headerlink" title="第二步：导入"></a>第二步：导入</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123;BrowserRouter, Route, <span class="hljs-keyword">Switch</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br></code></pre></td></tr></table></figure><p>在 <code>router.js</code> 文件开头导入 <strong>BrowserRouter, Route, Switch</strong>。</p><h2 id="第三步：设置并导出路由"><a href="#第三步：设置并导出路由" class="headerlink" title="第三步：设置并导出路由"></a>第三步：设置并导出路由</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./pages/home&#x27;</span><br><span class="hljs-keyword">import</span> Car <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./pages/car&#x27;</span><br><span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./pages/user&#x27;</span><br>...<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ()=&gt;(<br>    &lt;BrowserRouter&gt;<br>        &lt;Switch&gt;<br>            &lt;Route path=&#123;<span class="hljs-string">&#x27;/home&#x27;</span>&#125; component=&#123;Home&#125;&gt;&lt;/Route&gt;<br>            &lt;Route path=&#123;<span class="hljs-string">&#x27;/car&#x27;</span>&#125; component=&#123;Car&#125;&gt;&lt;/Route&gt;<br>            &lt;Route path=&#123;<span class="hljs-string">&#x27;/user&#x27;</span>&#125; component=&#123;User&#125;&gt;&lt;/Route&gt;<br>            ...<br>        &lt;/Switch&gt;<br>    &lt;/BrowserRouter&gt;<br>)<br></code></pre></td></tr></table></figure><blockquote><p><code>&lt;Route path=&#123;&#125; component=&#123;&#125;&gt;&lt;/Route&gt;</code> 可以理解为将相应组件绑定到了对应的路由上。</p></blockquote><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li><strong>书写顺序：</strong> <code>&lt;BrowserRouter&gt; -&gt; &lt;Switch&gt; -&gt; &lt;Route&gt;</code>，其中 <code>&lt;Route&gt;</code> 可以存在多条，每条<code>&lt;Route&gt;</code>指向一条跳转路径。</li><li><strong><code>&lt;Route&gt;</code>参数：</strong> path 参数对应跳转页面的相对路径，component 参数对应相应页面的组件。注意将组件从相应位置导入，否则路由不知道 component 设置的变量是什么意思。</li><li><strong>关于箭头函数()=&gt;()：</strong> 在ES6中规定，如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用 return 语句返回。此处的 JSX 元素需要用<code>()</code>包裹，从而可以视为一个条语句，省略 <code>&#123;&#125;</code> 和 <code>return</code> 。使用<code>()</code>包裹jsx，而不要用<code>&#123;&#125;</code>包裹，准备杨可以避免js中换行自动插入<code>;</code>的问题。</li></ol><hr><h1 id="Link-标签实现路由跳转"><a href="#Link-标签实现路由跳转" class="headerlink" title="Link 标签实现路由跳转"></a>Link 标签实现路由跳转</h1><h2 id="第一步：从-react-router-dom-引入-Link"><a href="#第一步：从-react-router-dom-引入-Link" class="headerlink" title="第一步：从 react-router-dom 引入 Link"></a>第一步：从 react-router-dom 引入 Link</h2><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">import</span> &#123;Link&#125; <span class="hljs-keyword">from</span> <span class="hljs-keyword">react</span>-router-dom<br></code></pre></td></tr></table></figure><h2 id="第二步：使用-Link-标签"><a href="#第二步：使用-Link-标签" class="headerlink" title="第二步：使用 Link 标签"></a>第二步：使用 Link 标签</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">&lt;<span class="hljs-keyword">Link</span> <span class="hljs-keyword">to</span>=<span class="hljs-string">&#x27;/more&#x27;</span>&gt;&lt;/ <span class="hljs-keyword">Link</span>&gt;<br></code></pre></td></tr></table></figure><p>实现效果：点击后跳转到 <code>&#39;./more&#39;</code> 界面。</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>react-router-dom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>attention 机制详解</title>
    <link href="/2020/11/26/attention/"/>
    <url>/2020/11/26/attention/</url>
    
    <content type="html"><![CDATA[<h1 id="attention"><a href="#attention" class="headerlink" title="attention"></a>attention</h1><p>参考链接：<br><a href="https://zhuanlan.zhihu.com/p/69111029">Self-Attention和Transformer</a><br><a href="https://www.bilibili.com/read/cv4902832/">拆 Transformer 系列二：Multi- Head Attention 机制详解</a><br><a href="https://www.zhihu.com/question/68482809">目前主流的attention方法都有哪些？</a></p><hr><h2 id="Attention-实现机制-本质"><a href="#Attention-实现机制-本质" class="headerlink" title="Attention 实现机制(本质)"></a>Attention 实现机制(本质)</h2><p>Attention 机制实质上就是一个寻址过程：<br>通过给定一个任务相关的查询 Query 向量 Q，通过计算与 Key 的注意力分布并附加在 Value 上，从而计算 Attention Value。<br>其中涉及到了<strong>注意力打分机制</strong>和<strong>注意力概率分布作用过程</strong>。</p><h2 id="What-is-Q-K-V"><a href="#What-is-Q-K-V" class="headerlink" title="What is Q, K, V ?"></a>What is Q, K, V ?</h2><h3 id="字面理解"><a href="#字面理解" class="headerlink" title="字面理解"></a>字面理解</h3><p>Q: Question，问题<br>K：Key，关键字<br>V：Value，值<br>模型抛出一个问题（被查询的对象），根据辅助的关键字信息，得到两者间的<strong>相似度关系</strong>，经过归一化（softmax）后。作用在目标值上，即实现了根据前者相似度来影响目标的权重分布。<br>前一句体现了注意力的打分机制，后一句则体现了利用概率影响 Value 的作用机制。</p><blockquote><p>本质：根据注意力的打分机制，计算两个对象内部的相似关系，并将其作用于目标中。</p></blockquote><p>关于注意力的整个过程，形象理解如下(转自<a href="https://zhuanlan.zhihu.com/p/69111029">Self-Attention和Transformer</a>)：<br><img src="/img/posts_img/20201126104032318_9538.png"><br><img src="/img/posts_img/20201126104103806_13047.png"></p><h2 id="注意力打分机制"><a href="#注意力打分机制" class="headerlink" title="注意力打分机制"></a>注意力打分机制</h2><p>$\alpha_i=softmax(s(x_i,q))$，其中$\alpha$为注意力概率分布，$s(x_i,q)$为注意力打分机制。</p><p>常用的注意力打分机制有以下几种：</p><ol><li>加性模型：$s(x_i,q)=v^Ttanh(Wx_i+Uq)$</li><li>点积模型：$s(x_i,q)=x_i^Tq$</li><li>缩放点积模型：$s(x_i,q)=(x_i^Tq)/\sqrt{d_k}$</li><li>双线性模型：$s(x_i,q)=x_i^TWq$</li></ol><p>$attention(V)=\sum_{i=1}^N\alpha_iV_i=\alpha V$</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>缩放点积模型能防止点积结果过大导致 softmax 梯度过小，反向传播困难的情况。缩放点积模型相较于点积模型更好。</li><li>点积模型及缩放点积模型需要保证矩阵的点积规则，及$(N\times H)\cdot(H\times V)$，在 self-attention 中，由于 Q 和 K 矩阵行数相同，因此仅需要注意最后得到结果的矩阵大小。假设 Q 长度为4，embed_dim 为6的序列($6\times 4$)，K 大小为$6\times 3$，那么就不能硬套上述点积公式，因为我们目标是获得 Q 和 K 的相似关系，即最后矩阵大小为 $3\times 4$，所以我们注意力打分的点积模型为 $s(x,q)=K^TQ$。</li><li>若 Q，K 的矩阵点积无法满足点积规则，则可以用双线性模型或者加性模型，其中 W，U 的作用就是将两者拉到同一维度上进行矩阵运算。</li></ol><hr><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>阅读了<a href="https://www.zhihu.com/question/68482809">目前主流的attention方法都有哪些？</a>，特来对注意力打分机制的公式做一个补充。</p><blockquote><p>注意力机制可以分为三步：一是信息输入；二是计算注意力分布α；三是根据注意力分布α 来计算输入信息的加权平均。</p></blockquote><ol><li>信息输入：$X=[x_0,…,x_N]$表示N 个输入信息。注意思考此处$x_i$的编码向量为：<strong>列向量</strong> (对于后续公式的理解很重要!!!)</li><li>注意力分布计算：令<strong>Key=Value=X</strong>，则可以给出注意力分布，$\alpha_i=softmax(s(k_i,q))=softmax(s(x_i,q))$。</li><li>根据打分机制计算注意力得分系数：<br>加性模型：$s(x_i,q)=v^Ttanh(Wx_i+Uq)$<br>点积模型：$s(x_i,q)=x_i^Tq$<br>缩放点积模型：$s(x_i,q)=(x_i^Tq)/\sqrt{d_k}$<br>双线性模型：$s(x_i,q)=x_i^TWq$</li><li>信息加权：注意力分布 $\alpha_i$ 可以解释为在上下文查询q时，<strong>第i个信息受关注的程度</strong>，采用一种“软性”的信息选择机制对输入信息X进行编码为，$attention(q,X)=\sum_{i=1}^N\alpha_iX_i$，用矩阵乘法表示为 $V(K^TQ)$，注意列向量是右乘的形式，若以行向量计算则为左乘形式$(QK^T)V$。</li></ol><h2 id="软性注意力机制（soft-Attention）"><a href="#软性注意力机制（soft-Attention）" class="headerlink" title="软性注意力机制（soft Attention）"></a>软性注意力机制（soft Attention）</h2><p>软性注意力机制有两种：普通模式（<strong>Key=Value=X</strong>）和键值对模式（<strong>Key！=Value</strong>）:<br><img src="/img/posts_img/20201126143000592_26756.png"></p><h2 id="疑点"><a href="#疑点" class="headerlink" title="疑点"></a>疑点</h2><p>在学习 transformer 过程中一直有个疑问，在点积模型中，$s(x_i,q)=x_i^Tq$，可知，$q$对应的是Q，而$x$对应的是K，可是在transformer中，公式是$QK^T$，按理来说两者表达的是同一个意思，但是矩阵左乘和右乘还是有一定区别的，故对此做了相应的思考，最终得出一个解释：<br>在$s(x_i,q)=x_i^Tq$中，$x_i$是以列向量形式表示的！即假设$x_i$是一个embed_dim=4的单词，那么实际上它的向量形式表示为$(4\times 1)$。<br>所以：<br><strong>向量尽量以列向量表示！！！</strong><br><strong>向量尽量以列向量表示！！！</strong><br><strong>向量尽量以列向量表示！！！</strong><br>完毕！</p><hr><h1 id="补充2"><a href="#补充2" class="headerlink" title="补充2"></a>补充2</h1><p>之前一直没有弄明白 Query, Key, Value 是怎么区分的，上述补充我们已知 Key = Value 和 Key != Value 的情况，即 Key 和 Value 在某种情况下是互通的，但是 Query 又怎么区分呢？什么可以作为 Query ？<br>参考<a href="https://blog.csdn.net/hahajinbu/article/details/81940355">自然语言处理中的Attention机制总结</a></p><h2 id="attention-通用定义"><a href="#attention-通用定义" class="headerlink" title="attention 通用定义"></a>attention 通用定义</h2><p>按照Stanford大学课件上的描述，<strong>attention的通用定义</strong>如下：</p><ol><li>给定一组<strong>向量集合</strong>values，以及<strong>一个向量</strong>query，attention机制是一种根据该query计算values的加权求和的机制。</li><li>attention的重点就是这个集合values中的每个value的“权值”的计算方法。</li></ol><h2 id="Query-目标向量"><a href="#Query-目标向量" class="headerlink" title="Query: 目标向量"></a>Query: 目标向量</h2><p>参考链接：<a href="https://www.jianshu.com/p/6b2e586f9256">attention机制</a><br>在自然语言处理中，我们通常<strong>将目标作为 Query ，辅助信息作为 Key 和 Value</strong>。<br>例如在英译汉中，我们已知英语，需要对汉语做权值重新分配，则将汉语词向量作为 Query = “老师早上好”，将英语作为 (Key / Value) = “Goodmorning teacher”，设 embedding dim 大小为 3，Query 向量大小为 $3\times 5$，(Key / Value) 向量大小为 $3\times 2$，计算相似度 $K^TQ = (2\times 5)$，将相似度作用于 Value 上，得到 $V(K^TQ)=(3\times 5)$。可以看到最终输出的向量大小与 Query 保持一致，这也是为什么将 Query 作为自然语言处理目标向量的原因，因为其根据 Key 调整的是 Query 的权重分布。</p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>attention</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Transformer的位置编码</title>
    <link href="/2020/11/23/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82Transformer%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/11/23/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82Transformer%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一文读懂Transformer模型的位置编码——学习笔记"><a href="#一文读懂Transformer模型的位置编码——学习笔记" class="headerlink" title="一文读懂Transformer模型的位置编码——学习笔记"></a>一文读懂Transformer模型的位置编码——学习笔记</h1><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/106644634">一文读懂Transformer模型的位置编码</a></p><hr><h2 id="Transformer-为什么需要位置编码？"><a href="#Transformer-为什么需要位置编码？" class="headerlink" title="Transformer 为什么需要位置编码？"></a>Transformer 为什么需要位置编码？</h2><ol><li>单词在文本中的位置以及排列顺序对于文本语义的表达十分重要。整个文本的段落含义很可能随着一个单词在句子的位置或排列顺序不同而产生偏差。</li><li>RNN 本身就是个顺序结构，包含了词在序列中的位置信息，因此不需要单独对序列进行位置编码。而 transformer 用 attention 完全取代 RNN 结构后，词序信息就会丢失，模型没有办法知道每个词在文本中的相对和绝对的位置信息。因此，有必要把词序信号加到词向量上帮助模型学习这些信息，所采用的方法即称为位置编码。</li></ol><h2 id="位置编码"><a href="#位置编码" class="headerlink" title="位置编码"></a>位置编码</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>位置编码（Positional Encoding）是一种用词的位置信息对序列中的每个词进行二次表示的方法。Transformer模型本身不具备像RNN那样的学习词序信息的能力，需要主动将词序信息喂给模型。那么，模型原先的输入是不含词序信息的词向量，位置编码需要将词序信息和词向量结合起来形成一种新的表示输入给模型，这样模型就具备了学习词序信息的能力。</p><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>一种好的位置编码方案需要满足以下几条要求：</p><ul><li>它能为每个时间步输出一个独一无二的编码；</li><li>不同长度的句子之间，任何两个时间步之间的距离应该保持一致；</li><li>模型应该能毫不费力地泛化到更长的句子。它的值应该是有界的；</li><li>它必须是确定性的。</li></ul><p><strong>方法一</strong>：分配一个0到1之间的数值给每个时间步，其中，0表示第一个词，1表示最后一个词。<br>存在的问题：无法知道在一个特定区间范围内到底存在多少个单词。换句话说，不同句子之间的时间步差值没有任何的意义。如图，<br><img src="/img/posts_img/20201123103224198_2462.png"><br>将 0 和 1 分别分配给第一个词和最后一个词，但关于内部数值的分配我们不得而知，0.5对应的时间步(词位置)可能在句子一半靠前的位置，也可能在一半靠后的位置，即不会完全对应于句子中心，因此，你无法确定在某个区间范围内包含了多少个单词。</p><p><strong>方法二</strong>：为了解决上述方法任意两个时间步空间距离相等的情况，线性分配一个数值给每个时间步。也就是，1分配给第一个词，2分配给第二个词，以此类推，这样各个词间的距离就均保证为1且相等。<br>存在的问题：随着文本长度增加，这些数值会变得非常大，此外，模型也会遇到一些比训练中的所有句子都要长的句子。数据集中不一定在所有数值上都会包含相对应长度的句子，也就是模型很有可能没有看到过任何一个这样的长度的样本句子，这会严重影响模型的泛化能力。如图，<br><img src="/img/posts_img/20201123105313573_11133.png"></p><p>上述方法均存在一定的问题，没有满足位置编码方案的要求。Transformer 则提出了一种基于三角函数的位置编码方式，很好的解决了上述问题，我们将具体分析它是如何解决这些问题的。</p><hr><h2 id="Position-Encoding"><a href="#Position-Encoding" class="headerlink" title="Position Encoding"></a>Position Encoding</h2><ul><li>Position Encoding 编码不是单一的一个数值，而是包含句子中特定位置信息的 d 维向量 (一个位置对应一个 d 维向量)。</li><li>Position Encoding 编码没有整合进模型，而是用这个向量让每个词具有它在句子中的位置的信息。换句话说，通过注入词的顺序信息来增强模型输入 (Position Encoding + Input Embedding)。</li></ul><h3 id="t位置信息-gt-d维向量"><a href="#t位置信息-gt-d维向量" class="headerlink" title="t位置信息 -&gt; d维向量"></a>t位置信息 -&gt; d维向量</h3><p>假设文本输入为一个长度为 n 的序列，我们用 t 来表示第 t 个词在文本中的位置。根据上述信息，我们可以将文本中一个特定位置信息表示为一个 d 维向量，因此，我们将 t 所对应的 d 维向量记为 $p_t\in R^d$，其对应的函数映射我们记为$f:N\rightarrow R^d$，即有 $p_t=f(t)$，其中 $f()$函数映射计算第 i 个维度的 $p_t^i$ 的具体公式如下，<br><img src="/img/posts_img/20201123111244476_2311.png"><br>其中，$k\in [0,(d_{model} - 1)/2]$，频率$w_k=1/(10000^{2k/d})$，$i\in [1,d_{model}]$表示向量的第 i 维。<strong>频率沿向量维度减小，且 d 可被 2 整除。</strong><br>因此，遍历 k 计算各个维度，每个 t 对应的位置编码 $p_t$可以表示为如下所示，向量长度为 d，<br><img src="/img/posts_img/20201123112135158_31524.png"></p><p>其中，将所有输入序列的编码向量(n个d维向量)进行排列，可得到如下图像，其表示了长度为200、维度为150的序列转置后的位置矩阵PE，红线指输入序列的第 i 个维度。<br><img src="/img/posts_img/20201123112608523_18448.png"></p><h3 id="Position-Encoding-Input-Embedding"><a href="#Position-Encoding-Input-Embedding" class="headerlink" title="Position Encoding + Input Embedding"></a>Position Encoding + Input Embedding</h3><p>位置编码方法已经有了，那如何让每个词具有它们的位置信息？原始论文将位置编码加到模型输入之上。也就是，对于句子里的每个词，计算其对应的词嵌入，然后按照下面的方法喂给模型：<br><img src="/img/posts_img/20201123113620325_27960.png"></p><blockquote><p>为了保证这种相加操作正确，需要让位置向量（PE）的维度等于词向量（WE）的维度，即 $d_{PE}=d_{WE}$。假设某位置 t 的词被 embedding 编码为了 4 维向量，那么执行相加操作的时候，必须也要保证位置编码后的 p 向量维度也为 4，这也就解释了为什么上述 $p_t\in R^{d_{model}}$的原因。</p></blockquote><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p><img src="/img/posts_img/20201123114050252_14574.png"></p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>社矫项目：jQuery事件绑定失效原因总结</title>
    <link href="/2020/11/22/JQuery%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <url>/2020/11/22/JQuery%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="jQuery事件绑定失效问题"><a href="#jQuery事件绑定失效问题" class="headerlink" title="jQuery事件绑定失效问题"></a>jQuery事件绑定失效问题</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>社矫项目中部分 js 代码及 html 代码如下：<br><strong>监听汉字输入的 js 代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 输入汉字监听</span><br>$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">&#x27;#nameSearch&#x27;</span>).on(<span class="hljs-string">&#x27;compositionend&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">let</span> val = $(<span class="hljs-string">&#x27;#nameSearch&#x27;</span>).val();<br>        <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params"><span class="hljs-built_in">isNaN</span>(<span class="hljs-built_in">Number</span>(val))</span>)</span>&#123;<br>            debounce(tooltips, <span class="hljs-number">2000</span>)();<br>        &#125;<br>    &#125;);<br>&#125;)<br><span class="hljs-comment">// $(&#x27;#nameSearch&#x27;).on(&#x27;compositionend&#x27;, event=&gt;&#123;</span><br><span class="hljs-comment">//     console.log(1);</span><br><span class="hljs-comment">//     let val = $(&#x27;#nameSearch&#x27;).val();</span><br><span class="hljs-comment">//     if(isNaN(Number(val)))&#123;</span><br><span class="hljs-comment">//         debounce(tooltips, 2000)();</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;)</span><br></code></pre></td></tr></table></figure><p><strong>搜索框的 html 代码：</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> style=<span class="hljs-string">&quot;position: absolute; width: 300px; height: auto; left:25px&quot;</span>&gt;<br>&lt;form <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;navbar-form1 input-group&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;search1&quot;</span> onsubmit=<span class="hljs-string">&quot;return false&quot;</span> style=<span class="hljs-string">&quot;position:absolute;&quot;</span>&gt;<br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;nameSearch&quot;</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;nameSearch&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> onkeydown=<span class="hljs-string">&quot;search();&quot;</span> <span class="hljs-built_in">list</span>=<span class="hljs-string">&quot;nameList&quot;</span> autocomplete=<span class="hljs-string">&quot;on&quot;</span><br>placeholder=<span class="hljs-string">&quot;请输入姓名...&quot;</span>&gt;<br>&lt;datalist <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;nameList&quot;</span>&gt;<br>&lt;option&gt;&lt;/option&gt;<br>&lt;/datalist&gt;<br>&lt;/form&gt;<br>&lt;button <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;btn btn_form_search&quot;</span> data-toggle=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;bottom_search&quot;</span> <br>style=<span class="hljs-string">&quot;position:absolute; right:48px; z-index:10;outline: none;border-radius: 0 4px 4px 0;background-color: yellowgreen;&quot;</span> <br>onclick=<span class="hljs-string">&quot;buttonClick()&quot;</span>&gt;确定&lt;/button&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="搜索框样式"><a href="#搜索框样式" class="headerlink" title="搜索框样式"></a>搜索框样式</h2><p><img src="/img/posts_img/20201122193701509_16268.png"></p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><p>监听汉字输入，当输入中文时，在输入阶段(即输入法拼音部分)不执行函数，在完成中文拼写并输入到 input 框中后执行绑定函数。<br>未完成输入时状态如下：<br><img src="/img/posts_img/20201122193911660_25674.png"><br>完成输入状态如下：<br><img src="/img/posts_img/20201122193934278_3961.png"></p><h2 id="jQuery-事件绑定失效原因"><a href="#jQuery-事件绑定失效原因" class="headerlink" title="jQuery 事件绑定失效原因"></a>jQuery 事件绑定失效原因</h2><p>JQuery事件绑定不生效，大概分两种情况。</p><ol><li><strong>绑定事件在未加载完成之前：</strong> DOM 元素在未加载完成之前，通过<code>$(&quot;...&quot;).on()</code>方法进行事件绑定，由于此时未加载完成(页面加载的异步性)，实际上<code>$(&quot;...&quot;)</code>是一个空数组，所以最终的结果是未对任何元素进行事件绑定。</li><li><strong>绑定事件后移除了元素重新加入：</strong> DOM 元素首先通过JQuery 的方法被创建出来，然后被加入到 body 中，然后绑定事件，之后从 body 中移除，然后在加入 body 中，此时点击也不会生效，这是因为，在从文档中移除的时候，JQuery 会自动把绑定的事件移除掉了，然后在加入的时候，事件绑定已经不存在了。</li></ol><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>针对<strong>在DOM元素未加载完成之前绑定事件导致绑定失效的问题</strong>，通常把事件绑定放在 DOM 元素加载完成之后即可，jQuery的做法是用<code>$(function()&#123;&#125;)</code>包裹事件绑定操作，例如上例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">&#x27;#nameSearch&#x27;</span>).on(<span class="hljs-string">&#x27;compositionend&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">let</span> val = $(<span class="hljs-string">&#x27;#nameSearch&#x27;</span>).val();<br>        <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params"><span class="hljs-built_in">isNaN</span>(<span class="hljs-built_in">Number</span>(val))</span>)</span>&#123;<br>            debounce(tooltips, <span class="hljs-number">2000</span>)();<br>        &#125;<br>    &#125;);<br>&#125;)<br></code></pre></td></tr></table></figure><p>针对<strong>绑定事件后移除元素后重新加入导致绑定失效的问题</strong>，一般来说考虑 delegate 的方式，这通常针对某些元素存在频繁的添加、移除、再添加的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-built_in">document</span>.body).delegate(<span class="hljs-string">&#x27;#button2&#x27;</span>,<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-string">&quot;button2 clicked&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><hr><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="关于-jQuery-的-function"><a href="#关于-jQuery-的-function" class="headerlink" title="关于 jQuery 的 $(function() {})"></a>关于 jQuery 的 $(function() {})</h2><p><code>$(function() &#123;&#125;)</code> 是<code>$(document).ready(function()&#123;&#125;)</code>的简写。<br>该函数在 DOM 元素加载完毕之后执行。</p><p><strong>什么是 DOM ？</strong><br>DOM 就是一个 html 页面的标签树:<br><img src="/img/posts_img/20201122195517212_4963.png"><br>当页面所有的 html 标签（包括图片等）都加载完了，即浏览器已经响应完了，DOM 即完成了加载操作。DOM 在第一次页面加载完毕后，就在内存里了，无论后面怎么局部修改 html 页面，都只是对内存中的 DOM 树进行修改，而 DOM在第一次页面加载后就已经加载完毕了。所以后面 js文件（动态加载或者 head 中加载）再使用到 <code>$(function() &#123;&#125;)</code> 函数肯定会执行的。</p>]]></content>
    
    
    <categories>
      
      <category>jQuery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Resnet 详解</title>
    <link href="/2020/11/20/ResNet/"/>
    <url>/2020/11/20/ResNet/</url>
    
    <content type="html"><![CDATA[<h1 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h1><p>参考链接：<br><a href="https://zhuanlan.zhihu.com/p/31852747">你必须要知道CNN模型：ResNet</a><br><a href="https://zhuanlan.zhihu.com/p/72589432">梯度消失和梯度爆炸及解决方法</a></p><hr><h2 id="深层网络的退化问题"><a href="#深层网络的退化问题" class="headerlink" title="深层网络的退化问题"></a>深层网络的退化问题</h2><ul><li><p>深层网络结构为什么会导致模型退化？<br>网络的深度对于模型特征提取至关重要，按理来说，不断堆叠网络层数，模型可以进行更加复杂的特征模式提取，因此模型深度越深，就能取得更好的结果。但事实上，当网络深度增加到一定程度后，网络准确度出现了饱和，甚至出现下降，即网络退化(Degradation problem)，网络退化的原因主要是由<strong>梯度消失</strong>或者<strong>梯度爆炸</strong>造成的。</p></li><li><p>什么是梯度消失？什么是梯度爆炸？<br>目前优化神经网络的方法都是根据损失函数计算的误差通过梯度反向传播的方式(即BP)，指导深度网络权值的更新优化。其中将误差从末层往前传递的过程需要<strong>链式法则</strong>（Chain Rule)， 而链式法则是一个<strong>连乘</strong>的形式，梯度将以指数形式传播。随着网络深度不断增加，在根据损失函数计算的误差通过梯度反向传播的方式对深度网络权值进行更新时，容易导致得到的梯度值接近0或特别大，也就是梯度消失或爆炸。反向传播即链式法则如下图所示，梯度值为学习率右侧的偏导求值，当导数部分小于1时，经过链式法则连乘不断放大，最终梯度值会接近于0，模型几乎不再更新，即梯度消失，若导数部分大于1，经过链式法则连乘，最终梯度值会越来越大，发生梯度爆炸。<br><img src="/img/posts_img/20201117113531949_7119.png">    <img src="/img/posts_img/20201117113716099_20642.png"></p></li><li><p>梯度消失/梯度爆炸解决方法<br>梯度消失和梯度爆炸问题都是因为网络太深，网络权值更新不稳定造成的，本质上是因为梯度反向传播中的连乘效应。解决梯度消失、爆炸主要有以下几种方法：</p></li></ul><ol><li>梯度剪切：主要是针对梯度爆炸，其思想是设置一个梯度剪切阈值，然后更新梯度的时候，如果梯度超过这个阈值，那么就将其强制限制在这个范围之内。这可以防止梯度爆炸。</li><li>权重正则化：通过对网络权重做正则来限制过拟合。如果发生梯度爆炸，那么权值就会变的非常大，反过来，通过正则化项来限制权重的大小，也可以在一定程度上防止梯度爆炸的发生。</li><li>选择ReLU代替Sigmoid作为激活函数：使用sigmoid作为损失函数，其梯度是不可能超过0.25的，这样经过链式求导之后，很容易发生梯度消失(即越乘越小)，同理，tanh作为损失函数，它的倒数仍然是小于1。relu函数的导数在正数部分是恒等于1的，因此在深层网络中使用relu激活函数就不会导致梯度消失和爆炸的问题。</li><li>batch normalization：通过对每一层的输出规范为均值和方差一致的方法，消除了权重参数放大缩小带来的影响，进而解决梯度消失和爆炸的问题，或者可以理解为BN将输出从饱和区拉倒了非饱和区。</li><li><strong>残差网络(ResNet)</strong></li><li>LSTM门结构</li></ol><h2 id="ResNet-1"><a href="#ResNet-1" class="headerlink" title="ResNet"></a>ResNet</h2><h3 id="恒等映射"><a href="#恒等映射" class="headerlink" title="恒等映射"></a>恒等映射</h3><p>假设现在存在一个浅层网络，为了获得更好地学习能力，你想通过向上堆积新层的方式来建立深层网络，一个极端情况是这些增加的层什么也不学习，仅仅复制浅层网络的特征，即这样新层是<strong>恒等映射（Identity mapping）</strong>。在这种情况下，深层网络应该至少和浅层网络性能一样，不应该出现退化现象，但是显然事实如刚才所说，存在梯度爆炸或梯度消失的现象，那么残差网络单元是如何解决这一问题的呢？</p><h3 id="残差单元"><a href="#残差单元" class="headerlink" title="残差单元"></a>残差单元</h3><p><img src="/img/posts_img/20201117115531507_1447.png"><br>如图为残差网络ResNet的一个残差学习单元<br>原先当输入为$x$时，其对应输出的特征为$H(x)$，而残差学习单元将学习的目标转化为了对残差$F(x)=H(x)-x$的学习，最终输出的仍是$H(x)$，只是输出从原有的$x$变为了$x+F(x)$。<br>为什么要这样做？之所以这样是因为<strong>残差学习相比原始特征直接学习更容易</strong>。当残差为0时，此时堆积层仅仅做了恒等映射(即$H(x)=x+0$)，至少网络性能不会下降，实际上残差不会为0，这也会使得堆积层在输入特征基础上学习到新的特征，从而拥有更好的性能。</p><h3 id="ResNet采用的两种残差单元"><a href="#ResNet采用的两种残差单元" class="headerlink" title="ResNet采用的两种残差单元"></a>ResNet采用的两种残差单元</h3><h4 id="浅层残差单元"><a href="#浅层残差单元" class="headerlink" title="浅层残差单元"></a>浅层残差单元</h4><p>对于短路连接，当输入和输出维度一致时，可以直接将输入加到输出上。但是当维度不一致时（对应的是维度增加一倍），这就不能直接相加。有两种策略：（1）采用zero-padding增加维度，此时一般要先做一个downsamp，可以采用strde=2的pooling，这样不会增加参数；（2）采用新的映射（projection shortcut），一般采用1x1的卷积，这样会增加参数，也会增加计算量。短路连接除了直接使用恒等映射，当然都可以采用projection shortcut。<br><img src="/img/posts_img/20201117120420866_906.png"><br>如图，输入维度为64维，内部经过2个3*3，深度为64的卷积核对残差进行学习，用relu激活函数(原因参照上面陈述)进行非线性激活。(可以理解为将外部$x$的学习转化为内部残差$F(x)$的学习)。</p><h4 id="深层残差单元"><a href="#深层残差单元" class="headerlink" title="深层残差单元"></a>深层残差单元</h4><p><img src="/img/posts_img/20201117120752930_11450.png"><br>如图，输入维度为256维，用 $1\times1$ 卷积核下采样，将深度降为64维，经过 $3\times3$ 卷积核对残差进行内部学习，再通过 $1\times1$ 卷积将维度还原到与输入维度一致，做相加操作。</p><hr><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>最近看到一篇关于 ResNet 的知乎讲解很有意思，讲得非常透彻，特此安利一下：<a href="https://www.zhihu.com/question/64494691">Resnet到底在解决一个什么问题呢？</a><br>关于里面一些有趣的点，做一下总结：</p><ol><li>什么造成了模型退化？<br>模型<strong>退化现象</strong>：当神经网络的层数堆叠到一定程度时，模型的效果不升反降。<br>起初人们认为是模型过拟合导致的 (模型性能不佳，存在高偏差，导致欠拟合；模型复杂度过高，存在高方差，导致过拟合)，但是很明显当前CNN面临的效果退化不是因为过拟合，因为过拟合的现象是”高方差，低偏差”，即测试误差大而训练误差小。但实际上，深层CNN的训练误差和测试误差都很大。<br>那么是否与模型梯度爆炸/梯度消失有关？作者首先介绍了一些反向传播的知识，很通俗易懂，可以仔细研读一下(<a href="https://www.zhihu.com/question/64494691">Resnet到底在解决一个什么问题呢？</a>)。在反向传播中，其输出值的大小除了与求导式子有关外，很大程度上还取决于输入值的大小，当输入值大于1时，经过反向传播多层的回传，梯度将以几何倍数增长 (涉及了链式求导的知识)，这就造成了深度神经网络梯度爆炸的现象，同理当输入值小于1时，会造成梯度消失的现象。<br>好像是梯度爆炸/消失造成的，可事实真的如此吗？我们知道在 Resnet 前，人们处理梯度爆炸/消失时，通常用的是 Batch Normalization，理论上梯度爆炸/消失很早就被人们解决一大半了，为什么还是会导致模型退化呢？</li><li>模型退化不符合常理？<br>按理说，当我们堆叠一个模型时，理所当然的会认为效果会越堆越好。因为，假设一个比较浅的网络已经可以达到不错的效果，那么即使之后堆上去的网络什么也不做，模型的效果也不会变差。然而事实上，这却是问题所在。“什么都不做”恰好是当前神经网络最难做到的东西之一。不断堆叠神经网络层数，会导致神经网络在具有无限可能的“非线性”道路上越走越远，以至于模型走了很远后，忘记了它为什么要出发，拟合的目标是什么 (“不忘初心，牢记使命”诚不欺我)。因此，后续就有了 Resnet 的提出，其初衷就是让模型的内部结构至少有恒等映射的能力。以保证在堆叠网络的过程中，网络至少不会因为继续堆叠而产生退化！</li><li>Resnet 的恒等映射<br>让深层神经网络模型具备恒等映射 $H(x)=x$是一件看似简单，但难以解决的事，此处$x$表示输入，$H(x)$对应模型学习后的输出，在上述说到，模型总会尝试着输出一点新的东西，这就导致$H(x)$和$x$不会相等。但如果把网络设计为$H(x) = F(x) + x$，即直接把恒等映射作为网络的一部分，就可以把问题转化为学习一个残差函数$F(x) = H(x) - x$。因为只要$F(x)=0$，就构成了一个恒等映射$H(x) = x$。 而且，拟合残差至少比拟合恒等映射容易得多，该结构被称为 Residual Block。<br><img src="/img/posts_img/20201120154958055_11900.png"><br>图中右侧的曲线叫做跳接（shortcut connection），通过跳接在激活函数前，将上一层（或几层）之前的输出与本层计算的输出相加，将求和的结果输入到激活函数中做为本层的输出。数学公式表达如图所示：<br><img src="/img/posts_img/20201120155050630_28876.png"><br>其中 $F(x,{W_i})$ 是我们学习的目标，即输出输入的残差。以上图为例，残差部分是中间有一个Relu激活的双层权重，为什么一个 Block 中要用两层的权重来表示呢？因为只用一层权重，通过公式计算就会得到以下情况，结果就是加与不加残差块没有差别。<br><img src="/img/posts_img/20201120155336431_27734.png"></li><li>Resnet 在 VGG 上的变化，即网络结构和一些细节<br>图结构可见<a href="https://www.zhihu.com/question/64494691">Resnet到底在解决一个什么问题呢？</a><br>这里主要对空间维度不一致和深度不一致做一个解释。<br>空间维度不一致的解决方法：在跳接的部分给输入x加上一个线性映射，具体如图。<br><img src="/img/posts_img/20201120155659614_2741.png"><br>深度维度不一致的解决方法：一种是在跳接过程中加一个 $1\times1$ 的卷积层进行升维，另一种则是直接简单粗暴地补零。事实证明两种方法都行得通。通过 $1\times1$ 卷积升维的方式如图。该结构也被称为是 bottleneck，它通过使用1x1 conv来巧妙地缩减或扩张feature map维度从而使得我们的3x3 conv的filters数目不受外界即上一层输入的影响，除了改变深度维度外，它还节省了计算时间进而缩小整个模型训练所需的时间。<br><img src="/img/posts_img/20201120155831799_13135.png"></li></ol>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小书学习笔记 —— 实战分析：评论功能(四)</title>
    <link href="/2020/11/18/%E5%AE%9E%E6%88%98%E5%88%86%E6%9E%90%EF%BC%9A%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD(%E5%9B%9B)/"/>
    <url>/2020/11/18/%E5%AE%9E%E6%88%98%E5%88%86%E6%9E%90%EF%BC%9A%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD(%E5%9B%9B)/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习前端一小步，迈向成功一大步！本专栏主要记录学习前端React框架的一些个人心得，分享一些实战教学，如有不足，欢迎交流讨论。React框架的入门教学强推<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a>的<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a>，简单易懂还有代码实战。还等什么？让我们开始本篇的前端学习之旅，欢迎各位入坑前端！</p><a id="more"></a><h1 id="实战分析：评论功能-四"><a href="#实战分析：评论功能-四" class="headerlink" title="实战分析：评论功能(四)"></a>实战分析：评论功能(四)</h1><p>参考教程：React小书–第25节(实战分析：评论功能(四)）<br>教程作者：<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a><br>参考链接：<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a><br><strong>本文搭配原文教程食用，风味更佳~!</strong></p><hr><h2 id="本篇重点"><a href="#本篇重点" class="headerlink" title="本篇重点"></a>本篇重点</h2><p>本篇是对 React 小书内代码实战过程中遇到的一些疑难点做的解释性帖子。因此不注重于代码的连贯性，代码按照 React 小书介绍排布，将针对具体细节做深入阐述。</p><h2 id="自动聚焦到评论框"><a href="#自动聚焦到评论框" class="headerlink" title="自动聚焦到评论框"></a>自动聚焦到评论框</h2><h3 id="React-小书代码"><a href="#React-小书代码" class="headerlink" title="React 小书代码"></a>React 小书代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>...<br>    &lt;textarea<br>      ref=&#123;<span class="hljs-function">(<span class="hljs-params">textarea</span>) =&gt;</span> &#123;<span class="hljs-built_in">this</span>.textarea = textarea&#125;&#125;<br>      value=&#123;<span class="hljs-built_in">this</span>.state.content&#125;<br>      onChange=&#123;<span class="hljs-built_in">this</span>.handleContentChange.bind(<span class="hljs-built_in">this</span>)&#125; /&gt;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommentInput</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  static propTypes = &#123;<br>    onSubmit: <span class="hljs-type">PropTypes</span>.func<br>  &#125;<br><br>  constructor () &#123;<br>    <span class="hljs-keyword">super</span>()<br>    <span class="hljs-keyword">this</span>.state = &#123;<br>      username: &#x27;&#x27;,<br>      content: &#x27;&#x27;<br>    &#125;<br>  &#125;<br><br>  componentDidMount () &#123;<br>    <span class="hljs-keyword">this</span>.textarea.focus()<br>  &#125;<br>...<br></code></pre></td></tr></table></figure><h3 id="侧重点"><a href="#侧重点" class="headerlink" title="侧重点"></a>侧重点</h3><ul><li>学会用 ref 属性调用 DOM 元素的 API</li><li>componentDidMount() 生命周期使用</li><li>PropTypes 限制输入参数类型</li><li><code>.focus()</code></li></ul><h3 id="代码编写思路"><a href="#代码编写思路" class="headerlink" title="代码编写思路"></a>代码编写思路</h3><ol><li>给标签添加 <code>ref</code> 属性值</li><li>在 <code>componentDidMount()</code> 中调用 <code>.focus()</code>，确保组件挂载完成后聚焦光标到组件。</li></ol><h3 id="实战填坑"><a href="#实战填坑" class="headerlink" title="实战填坑"></a>实战填坑</h3><ol><li>在 <code>&lt;textarea ref=&#123;(textarea)=&gt;&#123;this.textarea=textarea&#125;&#125; value=&#123;this.state.content&#125; onChange=&#123;this.handleContentChange.bind(this)&#125; /&gt;</code> 中，<code>this</code>指的是什么？<code>ref</code>传的形参是什么？<code>(textarea)</code>可以变为其他值吗，比如<code>(aaa)=&gt;&#123;this.textarea=aaa&#125;</code>？<code>onChange</code>监听函数是什么？</li></ol><ul><li><strong><code>this</code>指的是什么？</strong> 请参考<a href="https://www.zhihu.com/question/353757734/answer/964557747">JavaScript 的 this 原理是什么？</a>仔细研读，此处不知道理解的对不对，暂且记录一下：首先<code>this</code>是在箭头函数里的，箭头函数的this取决于它的上级调用对象，其上级为<code>render()</code>的函数调用，而<code>render()</code>调用的主体是 <code>class CommentInput</code> 类，因此，<code>this</code> 指向的是该类，即 <code>CommentInput</code> 组件，因此<code>this.state; this.textarea</code>就都很好解释了，其实就是组件类下的一些属性。</li><li><strong><code>ref</code>传的形参是什么？</strong> <code>ref</code>传入的是该属性所对应标签对象的 DOM 元素，这里指的是 textarea 输入框。</li><li><strong><code>(textarea)</code>可以变为其他值吗，比如<code>(aaa)=&gt;&#123;this.textarea=aaa&#125;</code>？</strong> 可以，<code>()</code>内的 textarea 只是一个形参名称，其实际值为 textarea 的 DOM 节点。</li><li><strong><code>onChange</code>监听函数是什么？</strong> 简要了解可参考<a href="https://zhuanlan.zhihu.com/p/149353182">JavaScript 中常见HTML事件</a>，<code>onChange</code>事件监听一个域的内容是否发生改变，在改变时触发绑定的函数，即触发<code>handleContentChange()</code>。在此重点讲一下 <code>event</code>对象和事件监听的关系，参考<a href="https://www.w3school.com.cn/jsref/dom_obj_event.asp">HTML DOM Event 对象</a>，以下是我当前的理解：event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。但是我们如何去用这些状态呢？这就要靠 <code>onClick</code>,<code>onChange</code>等事件句柄监听 event 对象状态，在状态发生相应变化是触发绑定的函数，那么显而易见，所触发的函数必然接收了该事件的状态，即 event 对象，每个事件监听函数都会有一个形参 event (例如<code>handleClick(event)</code>)，注意我们提及 event 它是一个对象，对象则必然有它对应的属性，结合<a href="https://www.w3school.com.cn/jsref/dom_obj_event.asp">HTML DOM Event 对象</a>，可查到 event 对象对应的属性值，其中 <code>event.target</code>,<code>event.currentTarget</code>目前我用的比较多。</li></ul><ol start="2"><li><code>propTypes</code>的使用。<br>大小写很容易搞混，这里要重点关注一下，按照规范来写。</li></ol><ul><li>首先是<code>prop-types</code>的引入，代码为<code>import PropTypes from &#39;prop-types&#39;</code></li><li>其次是静态对象声明，因为是一个变量，所以用驼峰命名法，代码为<code>static propTypes = &#123;&#125;</code></li><li>内部是对参数的类型限制，调用<code>PropTypes</code>，因为<code>PropTypes</code>是<code>&#39;prop-types&#39;</code>中的一个类，所以开头是大写的，后面跟类型属性。</li></ul><ol start="3"><li><code>.foucus()</code>作用<br>focus() 方法用于为 checkbox 赋予焦点。语法<code>checkboxObject.focus()</code>。<br>拓展：移开 checkbox 的焦点用 blur() 方法，语法<code>checkboxObject.blur()</code></li></ol><h2 id="持久化用户名"><a href="#持久化用户名" class="headerlink" title="持久化用户名"></a>持久化用户名</h2><h3 id="React-小书代码-1"><a href="#React-小书代码-1" class="headerlink" title="React 小书代码"></a>React 小书代码</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">...<br>    &lt;input<br>      value=&#123;<span class="hljs-keyword">this</span>.state.username&#125;<br>      onBlur=&#123;<span class="hljs-keyword">this</span>.handleUsernameBlur.bind(<span class="hljs-keyword">this</span>)&#125;<br>      onChange=&#123;<span class="hljs-keyword">this</span>.handleUsernameChange.bind(<span class="hljs-keyword">this</span>)&#125; /&gt;<br>...<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommentInput</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  constructor () &#123;<br>    <span class="hljs-keyword">super</span>()<br>    <span class="hljs-keyword">this</span>.state = &#123;<br>      username: &#x27;&#x27;,<br>      content: &#x27;&#x27;<br>    &#125;<br>  &#125;<br><br>  componentDidMount () &#123;<br>    <span class="hljs-keyword">this</span>.textarea.focus()<br>  &#125;<br><br>  _saveUsername (username) &#123;<br>    localStorage.setItem(<span class="hljs-symbol">&#x27;usernam</span>e&#x27;, username)<br>  &#125;<br><br>  handleUsernameBlur (event) &#123;<br>    <span class="hljs-keyword">this</span>._saveUsername(event.target.value)<br>  &#125;<br>...<br></code></pre></td></tr></table></figure><h3 id="侧重点-1"><a href="#侧重点-1" class="headerlink" title="侧重点"></a>侧重点</h3><ul><li>LocalStorage浏览器本地存储的使用</li><li>onBlur() 事件监听句柄</li><li>handlexxx 事件监听函数</li><li>componentWillMount() 生命周期</li></ul><h3 id="代码编写思路-1"><a href="#代码编写思路-1" class="headerlink" title="代码编写思路"></a>代码编写思路</h3><ol><li>通过<code>onBlur()</code>事件句柄绑定一个监听函数<code>handleUsernameChange</code>，当event事件状态失焦时，触发监听函数。</li><li>编写监听函数<code>handleUsernameChange</code>，接收事件状态 (即 event 对象)，通过对象属性获取触发事件的目标节点，这里应该指向了<code>&lt;textarea /&gt;</code>，因此通过<code>.value</code>将文本框内值取出，传给私有函数。</li><li>编写私有函数，通过<code>localStorage.setItem(&#39;key&#39;,value)</code>将值存入浏览器本地空间。</li></ol><h3 id="实战填坑-1"><a href="#实战填坑-1" class="headerlink" title="实战填坑"></a>实战填坑</h3><ol><li><p><code>onBlur()</code>是什么？<code>event</code>是什么？<br>参照“自动聚焦到评论框”实战填坑的第一问。</p></li><li><p><code>localStorage</code>的作用和使用方法。<br>参照<a href="https://blog.csdn.net/weixin_41997724/article/details/84560612">localStorage使用</a>。<br>localStorage 作用：<strong>前提-在HTML5中实现。</strong> 主要是用来作为本地存储来使用的，解决了cookie存储空间不足的问题(cookie中每条cookie的存储空间为4k)，localStorage中一般浏览器支持的是5M大小，这个在不同的浏览器中localStorage会有所不同。</p><blockquote><p>localStorage 优势：<br>拓展了cookie的4K限制；<br>可以将第一次请求的数据直接存储到本地，这个相当于一个5M大小的针对于前端页面的数据库，相比于cookie可以节约带宽，但是这个却是只有在高版本的浏览器中才支持的；<br>localStorage与sessionStorage的唯一一点区别就是localStorage属于永久性存储，而sessionStorage属于当会话结束的时候，sessionStorage中的键值对会被清空；</p></blockquote></li></ol><p><strong>localStorage 两种使用：</strong></p><ul><li><code>localStorage.getItem(&#39;key&#39;)</code>:获取指定<strong>key字段</strong>本地存储的值。 注意，我这里特别强调了字段，即接收的 key 参数是个字符，需要<code>&#39; &#39;</code>包裹。</li><li><code>localStorage.setItem(&#39;key&#39;,value)</code>：将value存储到key字段。 同理，这里key也是字符，value是数据。</li></ul><p><code>.getItem()</code>方法主要是从浏览器本地存储中获取相应 key 的值 value。<br><code>.setItem()</code>方法主要是将值存储到本地存储中的指定 key 字段中，若没有 key 则由本地存储创建一个空的 key。</p><p>localStorage 使用实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">在A页面中先存储：<br><span class="hljs-keyword">var</span> imgs = obj_mainform.archivesId  <span class="hljs-comment">//声明个变量存储下数据</span><br><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;key&#x27;</span>,imgs);  <span class="hljs-comment">//将变量imgs存储到name字段</span><br><br>在B页面中使用：<br><span class="hljs-keyword">var</span> naid = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&quot;key&quot;</span>); <span class="hljs-comment">//获取指定key本地存储的值</span><br></code></pre></td></tr></table></figure><ol start="3"><li><code>handleUsernameBlur (event) &#123;this._saveUsername(event.target.value)&#125;</code>中，为什么要用<code>this</code>调用类中的私有方法？<br>首先，我们需要知道的一点是，对于这个函数来说，我将 <code>this.</code> 去掉对整个过程没有任何的影响。那我们为什么还要去“多此一举”加入<code>this</code>呢？这就涉及到了 JS 的编程思想，原先 JS 语言提出的过程中，主要是面向函数的，即函数内调用函数，内部函数是通过向上查找发现的，随着 ES6 的提出，JS 的编程思想逐渐从面向函数向<strong>面向对象</strong>转变，此处的<code>this</code>即指向了类这个对象(JS 类的概念是在ES6中提出的)。所以我们在理解的时候可以认为：<strong>类内部函数的调用需要用<code>this</code>是目前一个通用的写法。</strong><br>我们理解了上述的思想后，再回过头来看这段代码：<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;input<br>      value=&#123;<span class="hljs-keyword">this</span>.state.username&#125;<br>      onBlur=&#123;<span class="hljs-keyword">this</span>.handleUsernameBlur.bind(<span class="hljs-keyword">this</span>)&#125;/&gt;<br></code></pre></td></tr></table></figure>第二行，<code>this.handleUsernameBlur</code>是类内函数调用的一个通用写法，所以 <code>this</code> 指的就是类(准确来说是类的实例)，那有人就问，既然都指向类了，为什么还要<code>.bind(this)</code>呢？前面提到的<code>this.xxx</code>是类内调用函数的通用写法，虽然函数写在了类内，但它并没有与类进行一个绑定，当触发该事件监听函数时，是在全局环境下运行<code>handleUsernameBlur()</code>，即 windows 对象调用的该函数，this 就指向了 windows，为了让类内函数在触发时指向类，就需要对它做一个绑定。<br>都谈到这了，那么就说一下第一行的<code>this</code>的指向，<code>this</code> 永远指向<strong>调用</strong>包含自身（this本身）的<strong>函数</strong>对应的<strong>对象</strong>。那么是什么函数调用了<code>this.state.username</code>呢？答案是<code>render()</code>，或者可以理解为是<code>CommentInput.render()</code>，那么显而易见这个对象，也就是this所指向的是 CommentInput。</li></ol>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小书学习笔记 —— PropTypes 和组件参数验证</title>
    <link href="/2020/11/17/PropTypes%20%E5%92%8C%E7%BB%84%E4%BB%B6%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81/"/>
    <url>/2020/11/17/PropTypes%20%E5%92%8C%E7%BB%84%E4%BB%B6%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习前端一小步，迈向成功一大步！本专栏主要记录学习前端React框架的一些个人心得，分享一些实战教学，如有不足，欢迎交流讨论。React框架的入门教学强推<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a>的<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a>，简单易懂还有代码实战。还等什么？让我们开始本篇的前端学习之旅，欢迎各位入坑前端！</p><a id="more"></a><h1 id="PropTypes-和组件参数验证"><a href="#PropTypes-和组件参数验证" class="headerlink" title="PropTypes 和组件参数验证"></a>PropTypes 和组件参数验证</h1><p>参考教程：React小书–第24节(PropTypes 和组件参数验证）<br>教程作者：<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a><br>参考链接：<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a><br><strong>本文搭配原文教程食用，风味更佳~!</strong></p><hr><h2 id="为什么需要-React-第三方库-prop-types"><a href="#为什么需要-React-第三方库-prop-types" class="headerlink" title="为什么需要 React 第三方库: prop-types"></a>为什么需要 React 第三方库: prop-types</h2><p>JavaScript 的灵活性体现在弱类型、高阶函数等语言特性上。而语言的弱类型一般来说确实让我们写代码很爽，但是也很容易出 bug。<br>JS 语言在声明变量的时候统一用的是 <strong>let（先前是 var）</strong>，这就意味着<strong>变量是没有固定类型且可以随意赋值的</strong>，假如我起初声明了一个变量<code>let a=&#123;&#125;</code>，显然 a 是一个对象，但是在工程项目的某处对该共享的对象变量做了改变，如<code>a=4</code>，那么 <code>a</code> 变量就变成了一个 Number 类型(此处可以看到，共享变量可以通过赋值改变其类型，即应证了上述变量没有固定类型且随意赋值这句话)，此时再使用 <code>a.xxx</code> 就会报错，但 debug 的时候不会明确告诉你是这里出错了。</p><h2 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h2><p>React.js 提供了一种机制，实现<strong>给组件的配置参数加上类型验证</strong>。<br><strong>步骤：</strong></p><ol><li>安装第三方库 <strong>prop-types</strong>:  <code>npm install --save prop-types</code></li><li>头文件引入 <strong>PropTypes</strong>: <code>import PropTypes from &#39;prop-types&#39;</code></li><li>在组件中添加类属性 <strong>propTypes</strong>, 属性值接收一个对象：<code>statics propTypes = &#123;xx: yyy&#125;</code></li><li>对象键值对写为：<code>xxx:PropTypes.yyy</code> ，其中 yyy 为变量类型(object, number,…)</li><li>通过 isRequired 关键字强制组件某个参数传值，如<code>xxx:PropTypes.object.isRequired</code></li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;prop-types&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Comment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> propTypes = &#123;<br>    comment: PropTypes.object<br>    num: PropTypes.number.isRequired<br>  &#125;<br><br>  render () &#123;<br>    <span class="hljs-keyword">const</span> &#123; comment &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&#x27;comment&#x27;</span>&gt;<br>        &lt;div className=<span class="hljs-string">&#x27;comment-user&#x27;</span>&gt;<br>          &lt;span&gt;&#123;comment.username&#125; &lt;/span&gt;：<br>        &lt;/div&gt;<br>        &lt;p&gt;&#123;comment.content&#125;&lt;/p&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>组件参数验证在构建大型的组件库的时候相当有用。</p><ol><li>可以帮助我们迅速定位这种类型错误，让我们组件开发更加规范。</li><li>起到了一个说明文档的作用，在使用组件的时候，只要看到组件的 propTypes 就清晰地知道这个组件到底能够接受什么参数，什么参数是可选的，什么参数是必选的。</li></ol>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小书学习笔记 —— style 属性</title>
    <link href="/2020/11/17/style%E5%B1%9E%E6%80%A7/"/>
    <url>/2020/11/17/style%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习前端一小步，迈向成功一大步！本专栏主要记录学习前端React框架的一些个人心得，分享一些实战教学，如有不足，欢迎交流讨论。React框架的入门教学强推<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a>的<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a>，简单易懂还有代码实战。还等什么？让我们开始本篇的前端学习之旅，欢迎各位入坑前端！</p><a id="more"></a><h1 id="style-属性"><a href="#style-属性" class="headerlink" title="style 属性"></a>style 属性</h1><p>参考教程：React小书–第23节(dangerouslySetHTML 和 style 属性）<br>教程作者：<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a><br>参考链接：<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a><br><strong>本文搭配原文教程食用，风味更佳~!</strong></p><hr><p>dangerouslySetHTML 主要是防止跨站脚本攻击(XSS)，这个属性不必要的情况就不要使用。所以此处不再赘述，有需要可以在小书中学习。</p><ul><li><p>HTML 中的 style 属性<br><code>&lt;h1 style=&#39;font-size: 12px; color: red;&#39;&gt;React.js 小书&lt;/h1&gt;</code></p></li><li><p>React.js 中的 style 属性<br><code>&lt;h1 style=&#123;&#123;fontSize: '12px', color: 'red'&#125;&#125;&gt;React.js 小书&lt;/h1&gt;</code></p></li></ul><p>对比可看到，React.js 中需要把 CSS 属性变成一个对象，再传给标签元素。此外，<code>font-size</code>等 HTML 中 <code>-</code> 的表示需要替换为驼峰命名法 <code>fontSize</code>。</p><p><strong>总结：</strong></p><ol><li>style 属性接收一个对象，对象为原 CSS 属性的样式</li><li>样式名采用驼峰命名法</li></ol><hr><p>为什么要采用对象的方法传递样式参数？<br>答：用对象作为 style 方<strong>便动态设置元素的样式</strong>。我们可以用 <code>props</code> 或者 <code>state</code> 中的数据生成样式对象再传给元素，然后用 <code>setState</code> 就可以修改样式，非常灵活，例如 <code>&lt;h1 style=&#123;&#123;fontSize: '12px', color: this.state.color&#125;&#125;&gt;React.js 小书&lt;/h1&gt;</code>，此处我只需修改 <code>setState(&#123;color:blue&#125;)</code> 即可更改样式颜色为蓝色。</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小书学习笔记 —— props.children 和容器类组件</title>
    <link href="/2020/11/17/props.children%20%E5%92%8C%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/"/>
    <url>/2020/11/17/props.children%20%E5%92%8C%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习前端一小步，迈向成功一大步！本专栏主要记录学习前端React框架的一些个人心得，分享一些实战教学，如有不足，欢迎交流讨论。React框架的入门教学强推<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a>的<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a>，简单易懂还有代码实战。还等什么？让我们开始本篇的前端学习之旅，欢迎各位入坑前端！</p><a id="more"></a><h1 id="props-children-和容器类组件"><a href="#props-children-和容器类组件" class="headerlink" title="props.children 和容器类组件"></a>props.children 和容器类组件</h1><p>参考教程：React小书–第22节(props.children 和容器类组件）<br>教程作者：<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a><br>参考链接：<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a><br><strong>本文搭配原文教程食用，风味更佳~!</strong></p><hr><h2 id="容器类组件"><a href="#容器类组件" class="headerlink" title="容器类组件"></a>容器类组件</h2><p>容器类组件是一种功能性组件，其充当了容器的作用，它定义了一种外层结构形式，允许开发者往容器里添加任意的内容。<br>首先，我们介绍未使用 <code>props.children</code> 的容器组件，通过代码了解它存在什么问题以及 <code>props.children</code> 的作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Card</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&#x27;card&#x27;</span>&gt;<br>        &lt;div className=<span class="hljs-string">&#x27;card-content&#x27;</span>&gt;<br>          &#123;<span class="hljs-built_in">this</span>.props.content&#125;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<br>  &lt;Card content=&#123;<br>    &lt;div&gt;<br>      &lt;h2&gt;React.js 小书&lt;/h2&gt;<br>       &lt;div&gt;开源、免费、专业、简单&lt;/div&gt;<br>      订阅：&lt;input /&gt;<br>    &lt;/div&gt;<br>  &#125; /&gt;,<br>  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>)<br></code></pre></td></tr></table></figure><p>Card 是我们定义的容器类组件，其内部结构为<code>&lt;div ...&gt;&lt;div className=&#39;card-content&#39;&gt;...&lt;/ div&gt;&lt;/ div&gt;</code>，即用块状元素定义了一个容器，卡片内容通过 <code>this.props</code> 从外部接收，即实现让开发者自定义添加容器内容的效果。<br>在<code>ReactDOM.render()</code>渲染过程中，我们传入 props 参数，其为一个 JSX 元素(<code>&#123;&lt;div&gt;...&lt;/ div&gt;&#125;</code>)(是否还记得，之前提及 JSX 元素内部用<code>&#123;&#125;</code>包裹可以接收另一个 JSX 元素)，然后 Card 内部会通过 <code>this.props.content</code> 将内容渲染到页面上。</p><ul><li> <strong>存在的问题：</strong> 如果 Card 除了 content 以外还能传入其他属性的话，那么这些 JSX 和其他属性就会混在一起，很不好维护，如下，不仔细看我都不知道还有个<code>onClick</code>属性：<figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nim">&lt;<span class="hljs-type">Card</span> content=&#123;<br>    &lt;<span class="hljs-keyword">div</span>&gt;<br>        ...<br>    &lt;/ <span class="hljs-keyword">div</span>&gt;<br>&#125;, onClick=<span class="hljs-meta">&#123;...&#125;</span>&gt;<br></code></pre></td></tr></table></figure></li></ul><hr><p>我们希望改变这种写法，让组件接收的 JSX 元素独立作为一部分，但又与当前组件相关联，于是乎 React.js 提供了 <code>props.children</code> 写法</p><h2 id="props-children"><a href="#props-children" class="headerlink" title="props.children"></a>props.children</h2><p><code>props.children</code>使得组件标签也能像普通的 HTML 标签那样编写内嵌的结构，具体使用方法如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Card</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&#x27;card&#x27;</span>&gt;<br>        &lt;div className=<span class="hljs-string">&#x27;card-content&#x27;</span>&gt;<br>          &#123;<span class="hljs-built_in">this</span>.props.children&#125;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<br>  &lt;Card&gt;<br>    &lt;h2&gt;React.js 小书&lt;/h2&gt;<br>    &lt;div&gt;开源、免费、专业、简单&lt;/div&gt;<br>    订阅：&lt;input /&gt;<br>  &lt;/Card&gt;,<br>  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>)<br></code></pre></td></tr></table></figure><p>先看 <code>ReactDOM.render()</code> 实现了什么：<br>可以看到，相比于原先将容器类组件的内容通过 <code>props</code> 参数传入 JSX 元素的方法，该种方法<strong>直接将内容作为一个HTML内嵌结构编写，将组件参数与内嵌结构分开写</strong>，而<code>&lt;card&gt;&lt;/ card&gt;</code>容器组件标签则起到了和<code>&lt;div&gt;&lt;/ div&gt;</code>类似的作用。<br>所有容器类组件内部嵌套的 JSX 结构都通过组件内的 <code>props.children</code> 来获取，即上例中的<code>this.props.children</code>。</p><h3 id="内部实现原理"><a href="#内部实现原理" class="headerlink" title="内部实现原理"></a>内部实现原理</h3><p>我们将 <code>props.children</code> 打印出来，可以发现，其包含的其实是个数组，<strong>React.js 就是把我们嵌套的 JSX 元素一个个都放到数组当中，然后通过 props.children 传给了 Card。</strong><br><img src="/img/posts_img/20201117195904513_10716.png"><br><strong>由于 JSX 会把插入表达式里面数组中的 JSX 一个个罗列下来显示。</strong> 所以其实就相当于在 Card 中嵌套了 JSX 结构，都会显示在 Card 的类名为 card-content 的 div 元素当中。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>按照这种HTML内嵌式的编写方法：</p><ol><li>结构清晰，将内嵌 JSX 结构与组件标签参数分离。</li><li><code>props.children</code> 将内嵌 JSX 结构变成数组的机制，使得我们在编写组件时十分灵活，我们可以选择数组中某些 JSX 元素(而非全部选择，例如<code>this.props.children[1]</code>)，然后将其安置在不同的位置。使我们能够选择内套元素，并进行高度复用。</li><li>大型 React.js 项目在编写容器型组件时非常常用。</li></ol>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小书学习笔记 —— ref 和 React.js 中的 DOM 操作</title>
    <link href="/2020/11/16/ref%20%E5%92%8C%20React.js%20%E4%B8%AD%E7%9A%84%20DOM%20%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/11/16/ref%20%E5%92%8C%20React.js%20%E4%B8%AD%E7%9A%84%20DOM%20%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习前端一小步，迈向成功一大步！本专栏主要记录学习前端React框架的一些个人心得，分享一些实战教学，如有不足，欢迎交流讨论。React框架的入门教学强推<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a>的<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a>，简单易懂还有代码实战。还等什么？让我们开始本篇的前端学习之旅，欢迎各位入坑前端！</p><a id="more"></a><h1 id="ref-和-React-js-中的-DOM-操作"><a href="#ref-和-React-js-中的-DOM-操作" class="headerlink" title="ref 和 React.js 中的 DOM 操作"></a>ref 和 React.js 中的 DOM 操作</h1><p>参考教程：React小书–第21节(ref 和 React.js 中的 DOM 操作）<br>教程作者：<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a><br>参考链接：<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a><br><strong>本文搭配原文教程食用，风味更佳~!</strong></p><hr><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>React.js 提供了一系列的 on* 方法 (例如<code>onClick()</code>等) 帮助我们进行事件监听，所以 React.js 当中不需要直接调用 <code>addEventListener</code> 的 DOM API，因此避免了大量与DOM元素交互的操作。但是，React.js 仍然提供了调用 DOM API 的一些方法，以方便人们对 DOM 元素进行一些自定义的操作。<br>React.js 提供了<strong>ref 属性</strong>来帮助我们<strong>获取已挂载元素的 DOM 节点</strong>，你可以给某个 <strong>JSX 元素加上 ref属性</strong>。</p><blockquote><p>JSX元素：在JavaScript语言内部编写的HTML标签结构，本质上是JS对象。JSX内部(即形如HTML标签结构内部)可以插入任何JS语法(这是成立的，因为JSX就是个JS对象，接受JS语法)，包括变量，表达式计算，函数以及 JSX 元素等，前提是要用<code>&#123;&#125;</code>包裹。JSX元素经过编译和构造，在React中转为JavaScript对象(为什么需要先转为JS对象？因为获得JS对象后可以进行更多的操作，例如react-canvas等，不一定要转为DOM元素)，再经过ReactDOM.render()即可转为真正的DOM元素。</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AutoFocusInput</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  componentDidMount () &#123;<br>    <span class="hljs-keyword">this</span>.input.focus()<br>  &#125;<br><br>  render () &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;input ref=&#123;(input) =&gt; <span class="hljs-keyword">this</span>.input = input&#125; /&gt;<br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-type">ReactDOM</span>.render(<br>  &lt;<span class="hljs-type">AutoFocusInput</span> /&gt;,<br>  document.getElementById(<span class="hljs-symbol">&#x27;roo</span>t&#x27;)<br>)<br></code></pre></td></tr></table></figure><p>ref <strong>属性</strong><br>作用：获取<strong>已挂载</strong>元素的 DOM 节点<br>添加位置：同JSX元素属性设置，即<code>&lt;input ref=&#123;...&#125;&gt;</code><br>属性值：ref 属性<strong>接收一个函数</strong>，当 JSX 元素在页面上挂载完成以后，React.js 就会调用 JSX元素内部 ref 属性定义的函数，并且把这个挂载以后的 DOM 节点传给这个函数(在实例中为<code>(input)中的input</code>，input 可以换成任意名称，因为这仅仅代表一个形参)。</p><p>在上述实例中，DOM 节点在 JSX元素挂载完成后被传给了<code>this.input</code>，这样我们就可以通过 this.input 获取到这个 DOM 元素。然后我们就可以在 componentDidMount 中使用这个 DOM 元素，并且调用 this.input.focus() 的 DOM API。整体就达到了页面加载完成就自动 focus 到输入框的功能。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>React.js 支持给任意代表 <strong>HTML 元素标签以及组件标签</strong>加上 ref 从而<strong>获取到它 DOM 元素然后调用 DOM API</strong>。但是记住一个原则：<strong>能不用 ref 就不用</strong>。特别是要避免用 ref 来做 React.js 本来就可以帮助你做到的页面自动更新的操作和事件监听。多余的 DOM 操作其实是代码里面的“噪音”，不利于我们理解和维护。</li><li>组件标签中添加 ref 属性，属性值函数获取的形参值为组件标签在 React.js 内部初始化的实例(即通过 constructor 定义的最初始组件渲染后的实例)，这并不是什么常用的做法，而且也并不建议这么做。</li></ol>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小书学习笔记 —— 挂载阶段的组件生命周期（二）</title>
    <link href="/2020/11/10/%E6%8C%82%E8%BD%BD%E9%98%B6%E6%AE%B5%E7%9A%84%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2020/11/10/%E6%8C%82%E8%BD%BD%E9%98%B6%E6%AE%B5%E7%9A%84%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习前端一小步，迈向成功一大步！本专栏主要记录学习前端React框架的一些个人心得，分享一些实战教学，如有不足，欢迎交流讨论。React框架的入门教学强推<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a>的<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a>，简单易懂还有代码实战。还等什么？让我们开始本篇的前端学习之旅，欢迎各位入坑前端！</p><a id="more"></a><h1 id="挂载阶段的组件生命周期（二）"><a href="#挂载阶段的组件生命周期（二）" class="headerlink" title="挂载阶段的组件生命周期（二）"></a>挂载阶段的组件生命周期（二）</h1><p>参考教程：React小书–第18节(挂载阶段的组件生命周期(二)）<br>教程作者：<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a><br>参考链接：<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a><br><strong>本文搭配原文教程食用，风味更佳~!</strong></p><hr><p>经过上一节的讲述，你大概已经知道挂载阶段组件各生命周期有哪些，包括其排布的方式，调用的顺序等等，这节我们将接下来将讨论对于一个组件来说，其挂载阶段生命周期的几个方法(constructor ; componentWillMount; componentDidMount; componentWillUnmount)在一个组件的出生到死亡的过程里面起了什么样的作用。</p><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a>constructor()</h2><p>一般来说， constructor 里主要做一些<strong>关于组件自身状态的初始化工作</strong>。即所有组件的 state 的初始化工作都是放在 constructor 里面的，具体代码如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xxx</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    constructor() &#123;<br>        <span class="hljs-keyword">super</span>()<br>        <span class="hljs-keyword">this</span>.state = &#123;<br>            xx:yy,<br>            xx:yy,<br>            ...<br>        &#125;<br>    &#125;<br>    <br>    ...<br><br>    render() &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount()"></a>componentWillMount()</h2><p>小书中提到，componentWillMount 生命周期主要用于一些组件启动的动作，比如Ajax 数据的拉取操作、一些定时器的启动等，此外，书中还举了一个Ajax的例子：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">...<br>  componentWillMount () &#123;<br>    ajax.get(<span class="hljs-string">&#x27;http://json-api.com/user&#x27;</span>, <span class="hljs-function"><span class="hljs-params">(userData)</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">this</span>.setState(&#123; userData &#125;)<br>    &#125;)<br>  &#125;<br>...<br></code></pre></td></tr></table></figure><p><strong>但是！问题来了：</strong> 上一节我们不是说componentWillMount是在render前执行，无法触发setState的二次渲染吗？那这例子又是什么例子呢？对此，这里引出另一篇参考文献(<a href="https://segmentfault.com/a/1190000018082225">React componentwillmount和componentdidmount请求数据</a>)来深入了解一下。<br>首先要明确一点，<strong>在componentWillMount中执行this.setState是不会触发二次渲染的。</strong> 它也只会在挂载过程中被调用一次，它的作用和constructor没有太大差异。<br>在componentWillMount中请求后台数据是无法保证更早得到数据的，因为componentWillMout是在render函数执行前执行的，虽然请求是在第一次render之前发送的，但是返回并不能保证在render之前完成(即按照js异步的特点，在请求数据时，render已经开始异步工作了)，render不会等你慢慢请求.所以在渲染的时候没有办法等到数据到来再去setState触发二次渲染。<br>那为什么小书中说可以用 componentWillMount 进行 Ajax 数据拉取的操作呢？这是因为在服务端渲染的场景中componentDidMount是不会被执行的，因此可以在componnetWillMount中发送AJAX请求，注意这里是发送请求，而非发送并接收到请求，举个例子：你尝试过自己给自己送信吗？如果你要自己给自己送信会怎么办？方法很简单，你写一封信从浙江寄到武汉，寄完马上乘动车从浙江出发，到达武汉后等着这封信送到你手中就可以了，当然这封信可能会比你早到，那么你去邮局取件完事。componentWillMount 和 render 的关系也是如此，componentWillMount 先发送请求，然后程序就开始执行 render，至于请求怎么处理的和 render 执行不存在冲突，render 完成后等待请求结果或者获取结果即可。<br>顺便说一句在es6中,使用extend component的方式里的constructor函数和componentWillMount是通用的作用,所以你在构造函数里初始化了组件的状态就不必在WillMount做重复的事情了.React中不推荐在componentWillMount中发送异步请求。</p><p>以下是对该片引文的重点提取。</p><ol><li>componentWillMount 是一个同步操作，即你只有进行了 componentWillMount 才能进行后续的 render 等一系列操作。</li><li>componentWillMount 在 render 前执行，所以 componentWillMount 中执行 this.setState 无法触发二次渲染(此时组件自身都没被渲染)。</li><li>componentWillMount 可以执行一些不依赖于组件渲染的操作，比如定时器启动，请求发送等。</li></ol><p>引文还将 componentWillMount 和 componentDidMount 做了对比，相比于 componentWillMount ，componentDidMount 这个生命周期函数在是在render之后调用一次,component已经初始化完成了。在生产时,componentDidMount生命周期函数是最好的时间去请求数据,其中最重要原因:使用componentDidMount第一个好处就是这个一定是在组件初始化完成之后,再会请求数据,因此不会报什么警告或者错误,我们正常请教数据完成之后一般都会setState。</p><h2 id="componentWillUnmout"><a href="#componentWillUnmout" class="headerlink" title="componentWillUnmout()"></a>componentWillUnmout()</h2><p>componentWillUnmount 生命周期主要在组件销毁前(注意是销毁前，可以看前一篇，是先执行 componentWillUnmout，后在页面删除组件)，执行一些清场工作，比如清楚定时器等。在 React 中，组件生命周期是 js 自己控制的，父组件不要子组件了，那么子组件就可以卸载了，就这么简单。React 管理 DOM 的过程，可以理解为每个组件 render() 返回的虚拟 DOM 会被 React 整理到一个树里面，按照它们之间相互依赖的关系，把相应的组件 mount 起来。然后可能父组件状态变化之后， render() 不返回某个子组件了，那么这个子组件就会被 React unmount 掉。</p><h2 id="动态时钟实战"><a href="#动态时钟实战" class="headerlink" title="动态时钟实战"></a>动态时钟实战</h2><p>下面记录了不堪入目的代码实战过程：</p><h3 id="step1：创建React"><a href="#step1：创建React" class="headerlink" title="step1：创建React"></a>step1：创建React</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">npx </span><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">clock</span><br><span class="hljs-string">cd </span><span class="hljs-string">clock</span><br></code></pre></td></tr></table></figure><h3 id="step2：定义时钟组件"><a href="#step2：定义时钟组件" class="headerlink" title="step2：定义时钟组件"></a>step2：定义时钟组件</h3><p>创建 Clock.js <strong>(注意大写，语法规范：导出类名的文件开头首字母大写)</strong><br>编写代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Clock.js代码：<br><span class="hljs-keyword">import</span> React,&#123;Component&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clock</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>()<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            date: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        &lt;div&gt;<br>            &lt;h1&gt;<br>                &lt;p&gt;现在时间是&lt;/p&gt;<br>                &#123;<span class="hljs-built_in">this</span>.state.date.toLocaleTimeString()&#125;<br>            &lt;/h1&gt;<br>        &lt;/div&gt;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Clock;<br>--------------------------------------------------------------<br>index.js代码：<br><span class="hljs-keyword">import</span> reportWebVitals <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reportWebVitals&#x27;</span>;<br><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> Clock <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Clock&#x27;</span>;<br><br>ReactDOM.render(<br>  &lt;React.StrictMode&gt;<br>    &lt;Clock /&gt;<br>  &lt;/React.StrictMode&gt;,<br>  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br><br><span class="hljs-comment">// If you want to start measuring performance in your app, pass a function</span><br><span class="hljs-comment">// to log results (for example: reportWebVitals(console.log))</span><br><span class="hljs-comment">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span><br>reportWebVitals();<br></code></pre></td></tr></table></figure><p>稍作解释：<br>Clock.js 中首先要引入<code>import React,&#123;Component&#125; from &#39;react&#39;;</code>(基本每个React组件都要引用)，创建组件，在组件构造函数生命周期中初始化 state 状态(初始化一个对象)，<code>new Date()</code>定义了一个 Date 对象，在 render 中调用 Date 对象的<code>.toLocaleTimeString()</code>方法，根据本地时间格式，把 Date 对象的时间部分转换为字符串。可结合“Date 对象”一起学习。最后 <code>export default xxx</code>导出组件类<br>index.js 主要包含了 <code>ReactDOM.render()</code> 方法，需要 <code>import React from &#39;react&#39;;import ReactDOM from &#39;react-dom&#39;;import Clock from &#39;./Clock&#39;;</code>，然后导入组件进行渲染。</p><p>ok! <code>npm start</code>运行~<br><img src="/img/posts_img/20201110103616469_23459.png"><br>what!!!出错了，好像render()没有return，大意了。加上return后再运行(注意return后加 <strong><code>()</code></strong> )。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Clock.js代码：<br><span class="hljs-keyword">import</span> React,&#123;Component&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clock</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>()<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            date: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;h1&gt;<br>                    &lt;p&gt;现在时间是&lt;/p&gt;<br>                    &#123;<span class="hljs-built_in">this</span>.state.date.toLocaleTimeString()&#125;<br>                &lt;/h1&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Clock;<br></code></pre></td></tr></table></figure><p><img src="/img/posts_img/20201110103942355_23640.png"></p><h3 id="step3：实现时间动态："><a href="#step3：实现时间动态：" class="headerlink" title="step3：实现时间动态："></a>step3：实现时间动态：</h3><p>完美！但是现在时间是静态的，我们需要加上一个定时器，放在 componentWillMount() 生命周期中，每隔多少秒就重新更新一次state状态（实际操作过程中，发现vscode竟然没有自动提示componentWillMount()，果然是被淘汰了呀，不过幸好还能用）。<br><img src="/2020/11/10/%E6%8C%82%E8%BD%BD%E9%98%B6%E6%AE%B5%E7%9A%84%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E4%BA%8C%EF%BC%89/_posts/img/20201110104750052_1966.png"><br>上述意思大致是：componentWillMount 被重命名为了 UNSAFE_componentWillMount，React 建议少用 componentWillMount，因为初始化状态可以在 constructor 中进行，其余的可以在 componentDidMount 中进行，所以没 componentWillMount 啥事了。</p><p>扯远了，继续撸代码，上步我们加了一个 componentWillMount，里面装了个定时器setInterval()，每个1000ms重新更新一下状态并渲染(this.setState)，这里由于每秒都会渲染一次，所以不用担心componentWillMount 无法二次渲染的问题。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">...<br>componentWillMount() &#123;<br>    <span class="hljs-built_in">this</span>.timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;date: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()&#125;)<br>    &#125;,<span class="hljs-number">1000</span>)<br>&#125;<br>...<br></code></pre></td></tr></table></figure><h3 id="step4：时间隐藏与显示"><a href="#step4：时间隐藏与显示" class="headerlink" title="step4：时间隐藏与显示"></a>step4：时间隐藏与显示</h3><p>至此我们实现了时钟的动态展示，下一步我们实现时间的隐藏：<br>在 index.js 中新建一个 Index 类，用来包裹 Clock 组件，并设置一些隐藏的功能。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript">index.js：<br><span class="hljs-keyword">import</span> reportWebVitals <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reportWebVitals&#x27;</span>;<br><br><span class="hljs-keyword">import</span> React,&#123;Component&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;  <span class="hljs-comment">//加上了&#123;Component&#125;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> Clock <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Clock&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>()<br>    <span class="hljs-built_in">this</span>.state = &#123;<br>      isShowClock: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">handleShowOrHide</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      isShowClock: !<span class="hljs-built_in">this</span>.state.isShowClock<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div&gt;<br>        &#123;<span class="hljs-built_in">this</span>.state.isShowClock?<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Clock</span> /&gt;</span></span>:<span class="hljs-literal">null</span>&#125;<br>        &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.handleShowOrHide.bind(<span class="hljs-built_in">this</span>)&#125;&gt;显示/隐藏&lt;/button&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<br>  &lt;React.StrictMode&gt;<br>    &lt;Index /&gt;<br>  &lt;/React.StrictMode&gt;,<br>  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br><br><span class="hljs-comment">// If you want to start measuring performance in your app, pass a function</span><br><span class="hljs-comment">// to log results (for example: reportWebVitals(console.log))</span><br><span class="hljs-comment">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span><br>reportWebVitals();<br></code></pre></td></tr></table></figure><p>需要注意的几点：</p><ol><li>this.setState()是一个方法，传入一个state对象，即用新的state更新上一时间的state状态(注意是更新而非替换，若新的状态不在原来的状态内，则是添加操作)。</li><li>组件中调用状态值都要用 <code>this.state.属性名</code> 的形式。</li><li>关注<code>&lt;div&gt;&#123;...&#125;&lt;/div&gt;</code>的形式，这是典型的JSX书写，即HTML中嵌入JS代码。任何函数及表达式在JSX中都要写入 <strong><code>&#123;&#125;</code></strong> 内，例如<code>onClick=&#123;...函数...&#125;</code></li><li>注意 <code>.bind(this)</code>，组件内部函数没有绑定 this 对象，所以需要人为绑定。箭头函数例外，箭头函数会自动指向 this。</li></ol><p>更新完之后，我们运行代码：<br><img src="/img/posts_img/20201110114320822_23996.png"><br><img src="/img/posts_img/20201110114332942_23846.png"></p><h3 id="step5：添加componentWillUnmout，清除定时器"><a href="#step5：添加componentWillUnmout，清除定时器" class="headerlink" title="step5：添加componentWillUnmout，清除定时器"></a>step5：添加componentWillUnmout，清除定时器</h3><p>隐藏和显示的功能我们已经实现了，但是F12调试发现居然报错了！<br><img src="/img/posts_img/20201110114426671_5798.png"><br>报错原因大致是：没有 unmount 的组件，容易造成内存泄露。结合小书学习我们可知，定时器在每次组件移除时并没有被清除，下一次组件生成时又创建了一个新的定时器，时钟隐藏的时候，定时器的回调函数还在不停地尝试 setState，由于 setState 只能在已经挂载或者正在挂载的组件上调用，所以 React.js 开始疯狂报错。这时候componentWillUnmount 就可以派上用场了，它的作用就是在组件销毁的时候，做这种清场的工作。例如清除该组件的定时器和其他的数据清理工作。我们给 Clock 添加 componentWillUnmount，在组件销毁的时候清除该组件的定时器：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Clock</span>.</span></span>js:<br>...<br>component<span class="hljs-constructor">WillUnmount()</span> &#123;<br>    clear<span class="hljs-constructor">Interval(<span class="hljs-params">this</span>.<span class="hljs-params">timer</span>)</span><br>&#125;<br>...<br></code></pre></td></tr></table></figure><p>注意：这行代码是写在 Clock.js 下的。<br>至此，我们完成了实战，时间能动态走动，且能隐藏或显示，并且不会报错。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们一般会把组件的 state 的初始化工作放在 constructor 里面去做；<br>在 componentWillMount 进行组件的启动工作，例如 Ajax 数据拉取、定时器的启动；<br>组件从页面上销毁的时候，有时候需要一些数据的清理，例如定时器的清理，就会放在 componentWillUnmount 里面去做。</p><p>没有提到的 componentDidMount 将在后续讲解。一般来说，有些组件的启动工作是依赖 DOM 的，例如动画的启动，而 componentWillMount 的时候组件还没挂载完成，所以没法进行这些启动工作，这时候就可以把这些操作放在 componentDidMount 当中。</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小书学习笔记 —— 挂载阶段的组件生命周期（一）</title>
    <link href="/2020/11/09/%E6%8C%82%E8%BD%BD%E9%98%B6%E6%AE%B5%E7%9A%84%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/11/09/%E6%8C%82%E8%BD%BD%E9%98%B6%E6%AE%B5%E7%9A%84%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习前端一小步，迈向成功一大步！本专栏主要记录学习前端React框架的一些个人心得，分享一些实战教学，如有不足，欢迎交流讨论。React框架的入门教学强推<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a>的<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a>，简单易懂还有代码实战。还等什么？让我们开始本篇的前端学习之旅，欢迎各位入坑前端！</p><a id="more"></a><h1 id="挂载阶段的组件生命周期（一）"><a href="#挂载阶段的组件生命周期（一）" class="headerlink" title="挂载阶段的组件生命周期（一）"></a>挂载阶段的组件生命周期（一）</h1><p>参考教程：React小书–第18节(挂载阶段的组件生命周期(一)）<br>教程作者：<a href="https://www.zhihu.com/people/hu-zi-da-ha">胡子大哈</a><br>参考链接：<a href="http://huziketang.mangojuice.top/books/react/lesson18">React小书</a><br><strong>本文搭配原文教程食用，风味更佳~!</strong></p><hr><h2 id="组件挂载"><a href="#组件挂载" class="headerlink" title="组件挂载"></a>组件挂载</h2><p>定义：React.js 将<strong>组件渲染</strong>，并且<strong>构造 DOM 元素然后塞入页面</strong>的过程。<br>回顾前文可知，在每个组件内部<code>render()</code>方法能够实现虚拟DOM元素的构造，而组件真实DOM元素的构造实际上是在<code>ReactDOM.render()</code>方法中实现的。<br>了解上述知识后对定义做更深入的解释：</p><ol><li>组件渲染：==<code>render()</code>，包括了虚拟DOM元素的构造<code>constructor()</code>和渲染<code>render()</code>。</li><li>构造DOM元素并渲染到页面：==<code>ReactDOM.render()</code>，包括了真正DOM元素的渲染。</li></ol><p>React.js 内部对待每个组件都有这么一个组件挂载的过程，也就是<strong>初始化组件 -&gt; 挂载到页面</strong>的过程。具体挂载过程如下：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs delphi">-&gt; <span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">()</span> #组件内部的构造函数</span><br><span class="hljs-function">-&gt; <span class="hljs-title">render</span><span class="hljs-params">()</span> #虚拟<span class="hljs-title">DOM</span>渲染</span><br><span class="hljs-function"><span class="hljs-comment">//构造真实 DOM 元素插入页面</span></span><br><span class="hljs-function">-&gt; <span class="hljs-title">ReactDOM</span>.<span class="hljs-title">render</span><span class="hljs-params">()</span> #构造真正<span class="hljs-title">DOM</span>元素渲染到页面</span><br></code></pre></td></tr></table></figure><blockquote><p>更新：ReactDOM.render() 返回 render() 的 Component 实例，即虚拟DOM的实例，其实就是真实DOM元素。<a href="http://react-china.org/t/reactdom-render/5631">参考</a></p></blockquote><h2 id="React组件挂载的生命周期"><a href="#React组件挂载的生命周期" class="headerlink" title="React组件挂载的生命周期"></a>React组件挂载的生命周期</h2><p>组件挂载时有关的生命周期有以下几个：</p><ol><li>constructor()</li><li>componentWillMount()</li><li>render()</li><li>componentDidMount()</li></ol><p>此处为什么单独罗列出来呢？因为 <code>constructor()</code>,<code>render()</code>也是组件挂载的生命周期，此处没有理解说明对<a href="https://www.jianshu.com/p/e3d1ecfb6312">React生命周期</a>的概念没有理解透彻，不过不着急，可以先进行后面的学习，回头再结合React组件生命周期的总体框架图，你将会恍然大悟，总体框架图后续补充~</p><h2 id="componentWillMount-amp-componentDidMount-amp-componentWillUnmount"><a href="#componentWillMount-amp-componentDidMount-amp-componentWillUnmount" class="headerlink" title="componentWillMount &amp; componentDidMount &amp; componentWillUnmount"></a>componentWillMount &amp; componentDidMount &amp; componentWillUnmount</h2><p>我们已经知道了 componentWillMount 和 componentDidMount 是<strong>组件挂载</strong>时的生命周期(还有组件更新的生命周期，此处要区分)，他们的作用主要是为了让我们更好的掌握组件的挂载过程，加入了 componentWillMount 和 componentDidMount 后，我们的组件挂载过程就可以表示如下：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi">-&gt; <span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">()</span></span><br><span class="hljs-function">-&gt; <span class="hljs-title">componentWillMount</span><span class="hljs-params">()</span></span><br><span class="hljs-function">-&gt; <span class="hljs-title">render</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-comment">//构造真实 DOM 元素插入页面</span></span><br><span class="hljs-function">-&gt; <span class="hljs-title">ReactDOM</span>.<span class="hljs-title">render</span><span class="hljs-params">()</span></span><br><span class="hljs-function">-&gt; <span class="hljs-title">componentDidMount</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>componentWillMount 和 componentDidMount 都是像 render 方法一样自定义在组件内部的，即如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xxx</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>()<br>        ...<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">componentWillMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">//每个组件必须实现一个render()方法，render方法必须返回一各JSX元素，return必须带()，必须要用一个外层的 JSX 元素把所有内容包裹起来,返回并列多个 JSX 元素是不合法的。</span><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        ...<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                JSX<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>更新：<a href="https://www.jianshu.com/p/00226a584eff">react 组件的 render 方法</a>，对应上述代码中关于 render 方法注意事项的解释。</p></blockquote><p>挂载的时候，React.js 会在组件的<code>render()</code>之前调用 componentWillMount，在 DOM 元素塞入页面(即<code>ReactDOM.render()</code>)以后调用 componentDidMount。</p><p>此外，我们既然能控制组件插入页面时的生命周期，那么我们应该也能控制其在页面中删除的生命周期，React.js 实际上也控制了这个组件的删除过程。在组件删除之前 React.js 会调用组件定义的 componentWillUnmount。那么我们的组件挂载生命周期可以写成：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs delphi">-&gt; <span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">()</span></span><br><span class="hljs-function">-&gt; <span class="hljs-title">componentWillMount</span><span class="hljs-params">()</span></span><br><span class="hljs-function">-&gt; <span class="hljs-title">render</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-comment">//构造真实 DOM 元素插入页面</span></span><br><span class="hljs-function">-&gt; <span class="hljs-title">ReactDOM</span>.<span class="hljs-title">render</span><span class="hljs-params">()</span></span><br><span class="hljs-function">-&gt; <span class="hljs-title">componentDidMount</span><span class="hljs-params">()</span></span><br><span class="hljs-function">...</span><br><span class="hljs-function"><span class="hljs-comment">// 即将从页面中删除</span></span><br><span class="hljs-function">-&gt; <span class="hljs-title">componentWillUnmount</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-comment">// 从页面中删除</span></span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，我们已经简单了解了<strong>组件挂载过程的生命周期</strong>，本节主要有以下几个重点：</p><ol><li>组件挂载的定义 </li><li>什么是组件的生命周期</li><li>componentWillMount()：组件挂载开始之前，也就是在组件调用 render 方法之前调用。</li><li>componentDidMount()：组件挂载完成以后，也就是 DOM 元素已经插入页面后调用。</li><li>componentWillUnmount()：组件对应的 DOM 元素从页面中删除之前调用。</li></ol><p>我们需要重点理解的是，<strong>组件生命周期调用是有次序的</strong>，自上而下分别是 <strong><code>constructor -&gt; componentWillMount -&gt; render -&gt; ReactDOM.render -&gt; componentDidMount -&gt; componentWillUnmount</code></strong> 。</p><p><a href="https://zhidao.baidu.com/question/1798845195476676427.html">参考</a><br>也就是当说如果你要<strong>获取外部数据并加载到组件上，只能在组件”已经”挂载到真实的网页上才能作这事情，其它情况你是加载不到组件的</strong>。componentDidMount方法中的代码，是在组件已经完全挂载到网页上才会调用被执行，所以可以保证数据的加载。此外，在这方法中调用setState方法，会触发重渲染。所以，官方设计这个方法就是用来加载外部数据用的，或处理其他的副作用代码。<br>constructor被调用是在组件准备要挂载的最一开始，所以此时组件尚未挂载到网页上。componentWillMount方法的调用在constructor之后，在render之前，在这方法里的代码调用setState方法不会触发重渲染，所以它一般不会用来作加载数据之用，它也很少被使用到**(componentWillMount无法触发setState重渲染)**。一般的从后台(服务器)获取的数据，都会与组件上要用的数据加载有关，所以都在componentDidMount方法里面作。虽然与组件上的数据无关的加载，也可以在constructor里作，但constructor是作组件state初绐化工作，并不是设计来作加载数据这工作的，所以所有有副作用的代码都会集中在componentDidMount方法里。</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始的博客</title>
    <link href="/2020/11/08/%E8%A7%A3%E5%86%B3hexo%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0md%E4%B8%AD%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/11/08/%E8%A7%A3%E5%86%B3hexo%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0md%E4%B8%AD%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>编辑完 .md 文件后，发现 .md 文件中的图片 markdown 书写方法引用的是相对路径，推送到博客上导致无法显示图片，故在网上寻找相应的解决方法，并将其记录下来。</p><a id="more"></a><h1 id="解决hexo无法上传md中本地图片的问题"><a href="#解决hexo无法上传md中本地图片的问题" class="headerlink" title="解决hexo无法上传md中本地图片的问题"></a>解决hexo无法上传md中本地图片的问题</h1><p><strong><em>努力的意义就是以后的日子，放眼望去全部都是自己喜欢的人和事。</em></strong></p><hr><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>编辑完 .md 文件后，发现 .md 文件中的图片 markdown 书写方法引用的是相对路径，推送到博客上导致无法显示图片，故在网上寻找相应的解决方法。<br><strong>参考链接：(大佬写的很详细，可详读)</strong><br><a href="https://blog.csdn.net/xjm850552586/article/details/84101345">hexo引用本地图片无法显示</a></p><h2 id="可能原因"><a href="#可能原因" class="headerlink" title="可能原因"></a>可能原因</h2><ol><li>本地图片没有有效上传至github仓库中，导致引用无效<br>解决方案：安装插件(见下文解决方案)</li><li>本地图片没有存放在同名文件夹中<br>解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中</li><li>图片路径出错<br>解决方案：打开 <code>_config.yml</code> 修改 url 配置参数，将 url 改为 github 仓库地址或者域名 (如 <code>jtwang7.github.io</code> 或 <code>wangjintian.com</code>)</li><li>.md 文件中图片引用相对路径没有更换<br>解决方法：通常我们将 .md 文件的图片存于与该文件同名的文件夹中，然后一同放到 <code>myBlog/source/_posts/</code> 中( _posts 文件夹用于存储文章及文章所包含的图片)，因此，原本 .md 文件中的图片相对路径会发生改变，需要对相应路径进行调整，同时，VNote 引用的图片不要做大小调整(即不可用=…px)！！！否则会导致加载不出来。</li></ol><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="第一步：安装hexo-asset-image插件"><a href="#第一步：安装hexo-asset-image插件" class="headerlink" title="第一步：安装hexo-asset-image插件"></a>第一步：安装hexo-asset-image插件</h3><p>具体方法：<br>首先需要安装一个图片路径转换的插件，插件名为<strong>hexo-asset-image</strong>。<br>进入 myBlog 文件夹(即你的博客根目录)，右击 Git Bush Here，输入命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CodeFalling/</span>hexo-asset-image --save<br></code></pre></td></tr></table></figure><h3 id="第二步：替换hexo-asset-image插件的index-js文件内容"><a href="#第二步：替换hexo-asset-image插件的index-js文件内容" class="headerlink" title="第二步：替换hexo-asset-image插件的index.js文件内容"></a>第二步：替换hexo-asset-image插件的index.js文件内容</h3><p>打开<code>myBlog/node_modules/hexo-asset-image/index.js</code>，将内容更换为下面的代码(不更改会出Bug):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><br><span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPosition</span>(<span class="hljs-params">str, m, i</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> str.split(m, i).join(m).length;<br>&#125;<br><br><span class="hljs-keyword">var</span> version = <span class="hljs-built_in">String</span>(hexo.version).split(<span class="hljs-string">&#x27;.&#x27;</span>);<br>hexo.extend.filter.register(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> config = hexo.config;<br>  <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params">config.post_asset_folder</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> link = data.permalink;<br><span class="hljs-keyword">if</span>(version.length &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)<br>   <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>   <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="hljs-keyword">var</span> endPos = link.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;<br>    link = link.substring(beginPos, endPos);<br><br>    <span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.length; i++</span>)</span>&#123;<br>      <span class="hljs-keyword">var</span> key = toprocess[i];<br> <br>      <span class="hljs-keyword">var</span> $ = cheerio.load(data[key], &#123;<br>        ignoreWhitespace: <span class="hljs-literal">false</span>,<br>        xmlMode: <span class="hljs-literal">false</span>,<br>        lowerCaseTags: <span class="hljs-literal">false</span>,<br>        decodeEntities: <span class="hljs-literal">false</span><br>      &#125;);<br><br>      $(<span class="hljs-string">&#x27;img&#x27;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span> ($(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>))&#123;<br><span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br><span class="hljs-keyword">var</span> src = $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;<br>   !<span class="hljs-regexp">/^\s*\//</span>.test(src)) &#123;<br>  <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br>  <span class="hljs-comment">// In addition, to support multi-level local directory.</span><br>  <span class="hljs-keyword">var</span> linkArray = link.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;<br><span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">var</span> srcArray = src.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;<br><span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">if</span>(srcArray.length &gt; <span class="hljs-number">1</span>)<br>srcArray.shift();<br>  src = srcArray.join(<span class="hljs-string">&#x27;/&#x27;</span>);<br>  $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>, config.root + link + src);<br>  <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);<br><span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info($(<span class="hljs-built_in">this</span>));<br>&#125;<br>      &#125;);<br>      data[key] = $.html();<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="第三步：修改-config-yml文件配置"><a href="#第三步：修改-config-yml文件配置" class="headerlink" title="第三步：修改_config.yml文件配置"></a>第三步：修改_config.yml文件配置</h3><p>打开_config.yml文件，修改下述内容(可<code>Ctrl+F</code>调出查找，搜索 post_asset_folder)：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始的博客(一)</title>
    <link href="/2020/11/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA(%E4%B8%80)%E2%80%94%E2%80%94Github+Hexo/"/>
    <url>/2020/11/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA(%E4%B8%80)%E2%80%94%E2%80%94Github+Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>创建博客的初衷是为了记录和总结自己的学习心得，也希望将自己的一些经历分享给同样在努力奋斗的你。本篇将带着你一步步搭建专属于你的博客网站。在学习之前，你需要具备以下前提：1. 拥有一个专属于你的GitHub 2. 电脑上需安装有Git 3. 需要安装node.js并完成相应的环境配置</p><a id="more"></a><h1 id="从零开始的博客搭建-一-——GitHub-Hexo"><a href="#从零开始的博客搭建-一-——GitHub-Hexo" class="headerlink" title="从零开始的博客搭建(一)——GitHub+Hexo"></a>从零开始的博客搭建(一)——GitHub+Hexo</h1><p><strong><em>努力的意义就是以后的日子，放眼望去全部都是自己喜欢的人和事。</em></strong></p><hr><p>创建博客的初衷是为了记录和总结自己的学习心得，也希望将自己的一些经历分享给同样在努力奋斗的你。本篇将带着你一步步搭建专属于你的博客网站。<br><strong>在学习之前，你需要具备以下前提：</strong></p><p><strong>1. 拥有一个专属于你的GitHub</strong><br><strong>2. 电脑上需安装有Git</strong><br><strong>3. 需要安装node.js并完成相应的环境配置</strong></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo 是目前比较常用的静态博客搭建框架，除 Hexo 外，比较常用的还有 jekyll, hugo 等，可以酌情选择，本篇则以 GitHub + Hexo 搭建博客。</p><h3 id="第一步：在GitHub上创建仓库"><a href="#第一步：在GitHub上创建仓库" class="headerlink" title="第一步：在GitHub上创建仓库"></a>第一步：在GitHub上创建仓库</h3><p>登录你的 GitHub 账号，进入该页面：</p><p><img src="/img/posts_img/20201108195954111_21042.png"></p><p>进入 Repository 仓库，点击 New 创建新的仓库，转入下图页面。</p><p><img src="/img/posts_img/20201108200309207_10161.png"></p><p>你需要填写仓库名称**(你的用户名+<code>.github.io</code>)**，然后点击创建 Create repository 即可。</p><h3 id="第二步：安装Hexo"><a href="#第二步：安装Hexo" class="headerlink" title="第二步：安装Hexo"></a>第二步：安装Hexo</h3><p>首先在你想要存放博客文件的位置创建一个文件夹，例如我的博客在本机中的路径为 <code>G:\myBlog</code>，打开 myBlog 文件夹，鼠标右键打开 Git Bush Here (前提是你要成功安装Git)，输入 npm 命令安装 Hexo：<code>npm install -g hexo-cli</code>。<br>安装完成后，输入 <code>hexo init</code> 初始化博客。<br>其次，输入 <code>hexo g</code> 静态部署。<br>至此，网页已经部署完成了，我们可以输入 <code>hexo s</code> 命令查看，此时浏览器输入 <code>http://localhost:4000</code> 就可以查看到 Hexo 的初始页面啦。</p><p><strong>小结：</strong></p><ol><li>新建文件夹，在该文件夹下右击打开 Git Bush Here</li><li><code>npm install -g hexo-cli</code></li><li><code>hexo init</code></li><li><code>hexo g</code></li><li><code>hexo s</code> (可跳过)</li></ol><blockquote><p>啥？你问我 <code>hexo g</code> 和 <code>hexo s</code> 的具体作用？转载一下这篇博客，讲的很清楚啦，后续出现的一些命令这里也有说明：<a href="https://blog.csdn.net/dxxzst/article/details/76135935">Hexo 常用命令</a></p></blockquote><h3 id="第三步：将Hexo部署到GitHub"><a href="#第三步：将Hexo部署到GitHub" class="headerlink" title="第三步：将Hexo部署到GitHub"></a>第三步：将Hexo部署到GitHub</h3><p>我们已经在 myBlog 中安装了 Hexo 框架，但这些仍是在本机上的一些操作，我们需要把它部署到之前创建的 GitHub 仓库上。<br>同样是在 myBlog 文件夹中，用笔记本的方式打开 <code>_config.yml</code> 文件。</p><blockquote><p>该文件配置了你博客的相关的内容，关于 <code>_config.yml</code> 文件中的配置参数解释，可以参考：<a href="https://blog.csdn.net/zemprogram/article/details/104288872">hexo根目录下的_config.yml配置解释</a><br><strong>所有参数中，冒号 <code>:</code> 后面都要带上空格。</strong></p></blockquote><p>将 <code>_config.yml</code> 文件下拉至底部，修改 deploy (部署)配置参数，如图：</p><p><img src="/img/posts_img/20201108202628168_13089.png"></p><p>其中 type 为部署的方法，repository 为部署的仓库名称(即我们此前创建的仓库clone地址)，branch 为分支(默认主支 master)<br>repository 仓库地址直接从 clone 复制，首先进入你创建的仓库，然后按下步操作进行：</p><p><img src="/img/posts_img/20201108203039449_16182.png"></p><p>回到 myBlog 文件夹中，右击 Git Bush Here，安装 Git 部署插件，输入命令 <code>npm install hexo-deployer-git --save</code>。<br>然后分别输入 <code>hexo clean</code>, <code>hexo g</code>, <code>hexo d</code>。<br>完成上述步骤后，打开浏览器，我们就可以用 <code>https://your_user_name.github.io</code> (此处为 <code>jtwang7.github.io</code>) 代替 <code>http://localhost:4000</code> 打开博客了。</p><p><strong>小结：</strong></p><ol><li>打开 myBlog 目录中的 <code>_config.yml</code> 配置参数文件，修改 deploy 参数。</li><li>在 myBlog 路径下，<code>npm install hexo-deployer-git --save</code></li><li><code>hexo clean</code> #清除缓存文件 db.json 和已生成的静态文件 public</li><li><code>hexo g</code> #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</li><li><code>hexo d</code> #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</li></ol><h3 id="第四步：购买-解析域名，制作个性化的访问地址"><a href="#第四步：购买-解析域名，制作个性化的访问地址" class="headerlink" title="第四步：购买/解析域名，制作个性化的访问地址"></a>第四步：购买/解析域名，制作个性化的访问地址</h3><p>走到上一步，我们已经可以用 <code>https://jtwang7.github.io</code> 访问博客了，但是本着对 .com 的执着，在<a href="https://cloud.tencent.com/?fromSource=gwzcw.2212127.2212127.2212127&utm_medium=cpd&utm_id=gwzcw.2212127.2212127.2212127">腾讯云</a>上购买了一个 .com 的域名，具体购买过程就不细说了，按照网站提示操作就行，除了腾讯云外，也可以在<a href="https://wanwang.aliyun.com/">万网</a>，<a href="https://sg.godaddy.com/zh/offers/domains/godaddycom?isc=gennbacn07&countryview=1&currencyType=CNY&utm_source=baidu&utm_medium=cpc&utm_term=Title&utm_campaign=zh-cn_corp_sem_x_b_x_bz_001&utm_content=Brandzone%20PC&gclid=CIXh9LjPmecCFdOavAoddDkHcw&gclsrc=ds">Godaddy</a>上购买。<br>主要讲一下域名解析的一些过程，以腾讯云为例。<br>首先进入腾讯云控制台，点击域名注册进入域名控制台管理。</p><p><img src="/img/posts_img/20201108204915553_22845.png"></p><p>第二步点击解析。</p><p><img src="/img/posts_img/20201108204944145_13319.png"></p><p>第三步添加以下两条解析记录，其中 IPV4 地址可以通过ping得到，具体方法是：打开cmd输入下面命令：<code>ping jtwang7.github.io</code> #ping + 你的 GitHub 仓库地址</p><p><img src="/img/posts_img/20201108205233329_15863.png"></p><p>至此，在腾讯云上的域名解析已经完成了，我们看到在记录里，有一个记录类型为 CNAME，接下来我们要打开 myBlog 文件夹的 source 文件夹，添加 CNAME 文件，可以先创建一个CNAME.txt文件，打开后写上你的域名，即你购买时申请的域名，(不要加www否则每次访问都必须加www，但如果不带有www，以后访问的时候带不带www都可以访问)，保存后记得要重命名，将.txt删除。</p><p><img src="/img/posts_img/20201108205644657_21100.png"><br><img src="/img/posts_img/20201108205702960_15023.png"></p><p>最后，回到 myBlog 文件夹下，依次输入 <code>hexo clean</code>, <code>hexo g</code>, <code>hexo d</code>。<br>打开 GitHub，查看 CNAME 文件是否在项目中，如图：</p><p><img src="/img/posts_img/20201108210014793_7086.png"></p><p>若没有该文件，则点击 <code>Settings</code>，在 GitHub Pages 中查看域名是否保存，若域名没有自动填写，则手动将其填上并保存，则项目中会出现 CNAME 文件，若还没有 CNAME 文件，则点击 <code>Add file</code>，自行添加即可。</p><p>![]/img/posts_img/20201108210255514_19277.png)<br>![]/img/posts_img/20201108210359154_32401.png)<br>![]/img/posts_img/20201108210335057_9425.png)</p><p>现在，你可以用你自己的域名来访问博客了~</p><p><strong>小结：</strong></p><ol><li>购买域名</li><li>解析域名</li><li>在 myBlog/source/ 中添加 CNAME 文件</li><li>回到 myBlog 文件夹，Git Bush Here</li><li><code>hexo clean</code></li><li><code>hexo g</code></li><li><code>hexo d</code></li><li>检查 GitHub 是否有 CNAME 文件，若无，则在 GitHub 中添加域名</li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
